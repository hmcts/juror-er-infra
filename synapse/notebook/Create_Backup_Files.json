{
	"name": "Create_Backup_Files",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkprod",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "64895b75-0736-4f47-8592-1fb5ad365b92"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5ca62022-6aa2-4cee-aaa7-e7536c8d566c/resourceGroups/baubais-data-factory-rg-prod/providers/Microsoft.Synapse/workspaces/baubais-synapse-prod/bigDataPools/sparkprod",
				"name": "sparkprod",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkprod",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import time\n",
					"from datetime import datetime\n",
					"\n",
					"# Create timestamp for unique backup naming\n",
					"timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
					"storage_account = \"baubaisadfsaprod\"\n",
					"\n",
					"# L2 Backup\n",
					"l2_source_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/voters_transformed\"\n",
					"l2_backup_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/backup/voters_transformed_backup_{timestamp}\"\n",
					"\n",
					"print(f\"Creating L2 backup: {l2_backup_path}\")\n",
					"l2_df = spark.read.format(\"delta\").load(l2_source_path)\n",
					"l2_count = l2_df.count()\n",
					"print(f\"L2 original record count: {l2_count:,}\")\n",
					"\n",
					"# Create backup\n",
					"l2_df.write.format(\"delta\").mode(\"overwrite\").save(l2_backup_path)\n",
					"\n",
					"# Verify backup\n",
					"l2_backup_df = spark.read.format(\"delta\").load(l2_backup_path)\n",
					"l2_backup_count = l2_backup_df.count()\n",
					"print(f\"L2 backup record count: {l2_backup_count:,}\")\n",
					"print(f\"L2 backup verification: {'‚úÖ SUCCESS' if l2_count == l2_backup_count else '‚ùå FAILED'}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# L3 Backup\n",
					"l3_source_path = f\"abfss://dl-juror-eric-voters-temp@{storage_account}.dfs.core.windows.net/voters_deduplicated_delta\"\n",
					"l3_backup_path = f\"abfss://dl-juror-eric-voters-temp@{storage_account}.dfs.core.windows.net/backup/voters_deduplicated_delta_backup_{timestamp}\"\n",
					"\n",
					"print(f\"Creating L3 backup: {l3_backup_path}\")\n",
					"l3_df = spark.read.format(\"delta\").load(l3_source_path)\n",
					"l3_count = l3_df.count()\n",
					"print(f\"L3 original record count: {l3_count:,}\")\n",
					"\n",
					"# Create backup\n",
					"l3_df.write.format(\"delta\").mode(\"overwrite\").save(l3_backup_path)\n",
					"\n",
					"# Verify backup\n",
					"l3_backup_df = spark.read.format(\"delta\").load(l3_backup_path)\n",
					"l3_backup_count = l3_backup_df.count()\n",
					"print(f\"L3 backup record count: {l3_backup_count:,}\")\n",
					"print(f\"L3 backup verification: {'‚úÖ SUCCESS' if l3_count == l3_backup_count else '‚ùå FAILED'}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Document records by creation_date for the affected dates\n",
					"target_dates = [\"20241213\", \"20241216\"]\n",
					"\n",
					"print(\"\\nüìä Current State Documentation:\")\n",
					"print(\"=\" * 50)\n",
					"\n",
					"# L2 current state\n",
					"print(\"L2 (voters_transformed) by creation_date:\")\n",
					"l2_state = l2_df.filter(col(\"creation_date\").isin(target_dates)) \\\n",
					"             .groupBy(\"creation_date\") \\\n",
					"             .count() \\\n",
					"             .orderBy(\"creation_date\")\n",
					"l2_state.show()\n",
					"\n",
					"# L3 current state  \n",
					"print(\"L3 (voters_deduplicated_delta) by creation_date:\")\n",
					"l3_state = l3_df.filter(col(\"creation_date\").isin(target_dates)) \\\n",
					"             .groupBy(\"creation_date\") \\\n",
					"             .count() \\\n",
					"             .orderBy(\"creation_date\")\n",
					"l3_state.show()\n",
					"\n",
					"# L3 by process type\n",
					"print(\"L3 by AdtclmnInsertedByProcessName for target dates:\")\n",
					"l3_process_state = l3_df.filter(col(\"creation_date\").isin(target_dates)) \\\n",
					"                        .groupBy(\"creation_date\", \"AdtclmnInsertedByProcessName\") \\\n",
					"                        .count() \\\n",
					"                        .orderBy(\"creation_date\", \"AdtclmnInsertedByProcessName\")\n",
					"l3_process_state.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Save backup information\n",
					"backup_info = {\n",
					"    \"timestamp\": timestamp,\n",
					"    \"l2_backup_path\": l2_backup_path,\n",
					"    \"l3_backup_path\": l3_backup_path,\n",
					"    \"l2_original_count\": l2_count,\n",
					"    \"l3_original_count\": l3_count,\n",
					"    \"target_dates\": target_dates\n",
					"}\n",
					"\n",
					"print(\"\\nüìù Backup Information:\")\n",
					"print(\"=\" * 50)\n",
					"for key, value in backup_info.items():\n",
					"    print(f\"{key}: {value}\")"
				],
				"execution_count": null
			}
		]
	}
}