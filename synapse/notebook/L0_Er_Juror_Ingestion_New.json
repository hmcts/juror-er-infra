{
	"name": "L0_Er_Juror_Ingestion_New",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6a2efe94-f776-446d-81a4-384b3788db3a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import logging\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"import time\n",
					"from notebookutils import mssparkutils\n",
					"import os\n",
					"import zipfile\n",
					"import shutil\n",
					"import tempfile\n",
					"import re\n",
					"import json  # Add this line\n",
					"from collections import defaultdict\n",
					"import logging\n",
					"import traceback"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"# Configure logging\n",
					"logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
					"\n",
					"# Initialize Spark session with the required packages\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"JurorIngestion\") \\\n",
					"    .config(\"spark.jars.packages\", \"com.crealytics:spark-excel_2.12:0.13.5,org.apache.xmlbeans:xmlbeans:3.1.0,org.apache.poi:poi-ooxml-schemas:4.1.2,org.apache.poi:poi-ooxml:4.1.2,org.apache.poi:poi:4.1.2\") \\\n",
					"    .getOrCreate()\n",
					"\n",
					"# Global counter to track file sequences by folder structure\n",
					"file_counters = defaultdict(int)\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def is_metadata_file(file_path):\n",
					"    \"\"\"Check if file is metadata related\"\"\"\n",
					"    metadata_indicators = [\n",
					"        'metadata.txt',\n",
					"        'readme.txt'\n",
					"    ]\n",
					"    return any(indicator in file_path.lower() for indicator in metadata_indicators)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def should_process_file(file_path):\n",
					"    \"\"\"Check if file should be processed (CSV or Excel) - case insensitive\"\"\"\n",
					"    extensions = ['.csv', '.xlsx', '.xls']\n",
					"    return any(file_path.lower().endswith(ext) for ext in extensions)\n",
					"\n",
					"def get_file_type(file_path):\n",
					"    \"\"\"Determine if file is CSV or Excel\"\"\"\n",
					"    if file_path.lower().endswith(('.xlsx', '.xls')):\n",
					"        return 'excel'\n",
					"    elif file_path.lower().endswith('.csv'):\n",
					"        return 'csv'\n",
					"    return None\n",
					"\n",
					"def is_zip_file(file_path):\n",
					"    \"\"\"Check if file is a zip file\"\"\"\n",
					"    return file_path.lower().endswith('.zip')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def is_empty_file(file_path):\n",
					"    \"\"\"Check if a file is empty or very small with improved reliability\"\"\"\n",
					"    try:\n",
					"        # First check if file exists\n",
					"        if not mssparkutils.fs.exists(file_path):\n",
					"            print(f\"File doesn't exist, can't check if empty: {file_path}\")\n",
					"            return False\n",
					"            \n",
					"        # For CSV files, use a more direct approach\n",
					"        if file_path.lower().endswith('.csv'):\n",
					"            # Try reading the first few lines directly\n",
					"            try:\n",
					"                text_df = spark.read.text(file_path).limit(5)\n",
					"                count = text_df.count()\n",
					"                \n",
					"                # If no rows or only header\n",
					"                if count == 0:\n",
					"                    return True\n",
					"                if count == 1:\n",
					"                    # Check if it's just a header line\n",
					"                    first_row = text_df.first()[0]\n",
					"                    if len(first_row.strip()) < 10:\n",
					"                        return True\n",
					"                return False\n",
					"            except:\n",
					"                # Fall back to CSV reader with header option\n",
					"                try:\n",
					"                    csv_df = spark.read.option(\"header\", \"true\").csv(file_path).limit(5)\n",
					"                    return csv_df.count() == 0\n",
					"                except:\n",
					"                    # If both approaches fail, assume it's not an empty file\n",
					"                    return False\n",
					"                    \n",
					"        # For Excel files, check differently\n",
					"        elif file_path.lower().endswith(('.xlsx', '.xls')):\n",
					"            try:\n",
					"                # Just check if we can read any rows\n",
					"                excel_df = spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").load(file_path).limit(5)\n",
					"                return excel_df.count() == 0\n",
					"            except:\n",
					"                # If read fails, don't assume it's empty\n",
					"                return False\n",
					"                \n",
					"        # Default approach for other file types\n",
					"        try:\n",
					"            # Use a basic text read as fallback\n",
					"            test_df = spark.read.text(file_path).limit(5)\n",
					"            return test_df.count() == 0\n",
					"        except Exception as e:\n",
					"            print(f\"Error checking if file is empty: {str(e)}\")\n",
					"            return False\n",
					"    except Exception as e:\n",
					"        print(f\"Error in is_empty_file check: {str(e)}\")\n",
					"        # Default to false if we can't determine\n",
					"        return False"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def unzip_file(file_path, extract_to, storage_account):\n",
					"    \"\"\"Unzip a file to the specified directory with improved error handling\"\"\"\n",
					"    try:\n",
					"        print(f\"Attempting to unzip: {file_path}\")\n",
					"        \n",
					"        # Create a temporary local directory\n",
					"        with tempfile.TemporaryDirectory() as tmpdirname:\n",
					"            local_zip_path = os.path.join(tmpdirname, os.path.basename(file_path))\n",
					"            \n",
					"            # Download the zip file to the local temporary directory\n",
					"            print(f\"Downloading zip file from {file_path} to {local_zip_path}\")\n",
					"            mssparkutils.fs.cp(file_path, f\"file://{local_zip_path}\")\n",
					"            \n",
					"            # Check if zip file is password protected before trying to extract\n",
					"            try:\n",
					"                zip_file = zipfile.ZipFile(local_zip_path)\n",
					"                # Try to read the first file to see if it's password protected\n",
					"                for zip_info in zip_file.infolist():\n",
					"                    if zip_info.flag_bits & 0x1:\n",
					"                        print(f\"ZIP file is encrypted/password protected: {file_path}\")\n",
					"                        return False, \"password_protected\"\n",
					"                    \n",
					"                    # Try to read a little bit of data to check for password\n",
					"                    try:\n",
					"                        zip_file.open(zip_info.filename).read(1)\n",
					"                    except RuntimeError as e:\n",
					"                        if 'password required' in str(e).lower() or 'bad password' in str(e).lower():\n",
					"                            print(f\"Password required for ZIP file: {file_path}\")\n",
					"                            return False, \"password_protected\"\n",
					"                        raise\n",
					"                \n",
					"                # If we got here, try to extract\n",
					"                print(f\"Extracting ZIP file to {extract_to}\")\n",
					"                zip_file.extractall(path=extract_to)\n",
					"                zip_file.close()\n",
					"                \n",
					"            except zipfile.BadZipFile as e:\n",
					"                print(f\"Bad ZIP file: {file_path} - {str(e)}\")\n",
					"                return False, \"bad_zip_file\"\n",
					"            except RuntimeError as e:\n",
					"                error_msg = str(e).lower()\n",
					"                if 'password required' in error_msg or 'encrypted' in error_msg or 'bad password' in error_msg:\n",
					"                    print(f\"Password protected ZIP file detected: {file_path}\")\n",
					"                    return False, \"password_protected\"\n",
					"                raise\n",
					"            \n",
					"        # If extraction succeeded, upload the extracted files back to ADLS\n",
					"        print(f\"Uploading extracted files to Azure Data Lake\")\n",
					"        for root, dirs, files in os.walk(extract_to):\n",
					"            for file in files:\n",
					"                local_file_path = os.path.join(root, file)\n",
					"                relative_path = os.path.relpath(local_file_path, extract_to)\n",
					"                remote_dir = os.path.dirname(file_path)\n",
					"                remote_file_path = f\"{remote_dir}/{relative_path}\"\n",
					"                \n",
					"                print(f\"Uploading: {local_file_path} to {remote_file_path}\")\n",
					"                mssparkutils.fs.cp(f\"file://{local_file_path}\", remote_file_path)\n",
					"        \n",
					"        print(f\"Successfully unzipped file: {file_path}\")\n",
					"        return True, None\n",
					"        \n",
					"    except RuntimeError as e:\n",
					"        error_msg = str(e).lower()\n",
					"        if 'password required' in error_msg or 'encrypted' in error_msg or 'bad password' in error_msg:\n",
					"            print(f\"Password protected ZIP file detected: {file_path}\")\n",
					"            return False, \"password_protected\"\n",
					"        else:\n",
					"            print(f\"Runtime error unzipping file: {str(e)}\")\n",
					"            return False, str(e)\n",
					"    except Exception as e:\n",
					"        print(f\"Error unzipping file: {file_path} - {str(e)}\")\n",
					"        return False, str(e)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def move_to_quarantine(file_path, storage_account, moved_files, reason=None):\n",
					"    \"\"\"Move a file to the quarantine folder and update the moved_files dictionary\"\"\"\n",
					"    try:\n",
					"        # Make sure quarantine directory exists\n",
					"        quarantine_dir = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/quarantine\"\n",
					"        if not mssparkutils.fs.exists(quarantine_dir):\n",
					"            print(f\"Creating quarantine directory: {quarantine_dir}\")\n",
					"            mssparkutils.fs.mkdirs(quarantine_dir)\n",
					"        \n",
					"        # Create a unique filename to avoid conflicts\n",
					"        file_name = os.path.basename(file_path)\n",
					"        timestamp = time.strftime(\"%Y%m%d%H%M%S\")\n",
					"        \n",
					"        # Add reason to filename if provided\n",
					"        reason_tag = f\"_{reason}\" if reason else \"\"\n",
					"        quarantine_path = f\"{quarantine_dir}/{timestamp}{reason_tag}_{file_name}\"\n",
					"        \n",
					"        print(f\"Moving file to quarantine: {file_path} -> {quarantine_path}\")\n",
					"        \n",
					"        # Copy file to quarantine\n",
					"        mssparkutils.fs.cp(file_path, quarantine_path, True)\n",
					"        print(f\"Successfully copied file to quarantine\")\n",
					"        \n",
					"        # Update tracking dictionary\n",
					"        moved_files['quarantine'].append(quarantine_path)\n",
					"        return True, quarantine_path\n",
					"    except Exception as e:\n",
					"        print(f\"Error moving file to quarantine: {str(e)}\")\n",
					"        import traceback\n",
					"        print(f\"Traceback: {traceback.format_exc()}\")\n",
					"        return False, str(e)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def process_metadata_file(file_path, file_name, storage_account):\n",
					"    \"\"\"Process metadata file\"\"\"\n",
					"    try:\n",
					"        # Debug info\n",
					"        print(f\"  process_metadata_file received: path={file_path}, name={file_name}\")\n",
					"        # Make sure metadata directory exists\n",
					"        metadata_dir = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/metadata\"\n",
					"        if not mssparkutils.fs.exists(metadata_dir):\n",
					"            print(f\"Creating metadata directory: {metadata_dir}\")\n",
					"            mssparkutils.fs.mkdirs(metadata_dir)\n",
					"        \n",
					"        # Create a unique name by including part of the original file path\n",
					"        unique_name = file_path.replace(f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net/\", \"\").replace(\"/\", \"_\")\n",
					"        destination_path = f\"{metadata_dir}/{unique_name}\"\n",
					"        \n",
					"        print(f\"Moving metadata file: {file_path} -> {destination_path}\")\n",
					"        \n",
					"        # Copy file to metadata directory\n",
					"        mssparkutils.fs.cp(file_path, destination_path, True)\n",
					"        print(f\"Successfully copied metadata file\")\n",
					"        \n",
					"        print(f\"Moved metadata file to {destination_path}\")\n",
					"        return True, destination_path\n",
					"    except Exception as e:\n",
					"        print(f\"Error moving metadata file {file_path}: {str(e)}\")\n",
					"        import traceback\n",
					"        print(f\"Traceback: {traceback.format_exc()}\")\n",
					"        return False, None"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def process_empty_file(file_path, storage_account, moved_files):\n",
					"    \"\"\"Move an empty file to the empty folder\"\"\"\n",
					"    try:\n",
					"        # Make sure empty directory exists\n",
					"        empty_dir = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/empty\"\n",
					"        if not mssparkutils.fs.exists(empty_dir):\n",
					"            print(f\"Creating empty files directory: {empty_dir}\")\n",
					"            mssparkutils.fs.mkdirs(empty_dir)\n",
					"        \n",
					"        # Create a unique filename\n",
					"        file_name = os.path.basename(file_path)\n",
					"        timestamp = time.strftime(\"%Y%m%d%H%M%S\")\n",
					"        empty_path = f\"{empty_dir}/{timestamp}_{file_name}\"\n",
					"        \n",
					"        print(f\"Moving empty file: {file_path} -> {empty_path}\")\n",
					"        \n",
					"        # Copy file to empty directory\n",
					"        mssparkutils.fs.cp(file_path, empty_path, True)\n",
					"        print(f\"Successfully copied empty file\")\n",
					"        \n",
					"        # Update tracking dictionary (add 'empty' category if it doesn't exist)\n",
					"        if 'empty' not in moved_files:\n",
					"            moved_files['empty'] = []\n",
					"        moved_files['empty'].append(empty_path)\n",
					"        \n",
					"        return True, empty_path\n",
					"    except Exception as e:\n",
					"        print(f\"Error moving empty file {file_path}: {str(e)}\")\n",
					"        import traceback\n",
					"        print(f\"Traceback: {traceback.format_exc()}\")\n",
					"        return False, None"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def process_file(source_path, date_folder, la_folder, file_name, storage_account):\n",
					"    \"\"\"Process CSV or Excel file with improved naming and atomic operations\"\"\"\n",
					"    try:\n",
					"        # Create the folder name in the format YYYYMMDD_LA-Name\n",
					"        folder_key = f\"{date_folder}_{la_folder}\"\n",
					"        file_type = get_file_type(source_path)\n",
					"        if not file_type:\n",
					"            return False, None\n",
					"\n",
					"        # Ensure the destination directory exists\n",
					"        dest_dir = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/files\"\n",
					"        if not mssparkutils.fs.exists(dest_dir):\n",
					"            print(f\"Creating destination directory: {dest_dir}\")\n",
					"            mssparkutils.fs.mkdirs(dest_dir)\n",
					"        \n",
					"        # Prepare destination path based on file type\n",
					"        if file_type == 'excel':\n",
					"            dest_path = f\"{dest_dir}/{folder_key}.xlsx\"\n",
					"        elif file_type == 'csv':\n",
					"            dest_path = f\"{dest_dir}/{folder_key}.csv\"\n",
					"        else:\n",
					"            return False, None\n",
					"            \n",
					"        print(f\"Moving {file_type} file to: {dest_path}\")\n",
					"        \n",
					"        # ATOMIC OPERATION: First copy, verify, then delete original\n",
					"        # Step 1: Copy the file\n",
					"        mssparkutils.fs.cp(source_path, dest_path, True)\n",
					"        \n",
					"        # Step 2: Verify the copy succeeded\n",
					"        if not mssparkutils.fs.exists(dest_path):\n",
					"            print(f\"ERROR: Copy failed - destination file doesn't exist: {dest_path}\")\n",
					"            return False, None\n",
					"            \n",
					"        # Step 3: Only now delete the original\n",
					"        try:\n",
					"            mssparkutils.fs.rm(source_path)\n",
					"            print(f\"Successfully deleted original file after copying\")\n",
					"        except Exception as del_e:\n",
					"            print(f\"Warning: Could not delete original file: {str(del_e)}\")\n",
					"            # Continue since copy succeeded\n",
					"            \n",
					"        return True, dest_path\n",
					"            \n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error processing file {source_path}: {str(e)}\")\n",
					"        print(f\"Error processing file {source_path}: {str(e)}\")\n",
					"        import traceback\n",
					"        print(f\"Traceback: {traceback.format_exc()}\")\n",
					"        return False, None"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def find_la_data_in_path(file_path):\n",
					"    \"\"\"Find LA_Data in path and extract date and LA folders with improved detection\"\"\"\n",
					"    parts = file_path.split('/')\n",
					"    print(f\"Path parts: {parts}\")\n",
					"    \n",
					"    # Try to find LA_Data in the path\n",
					"    la_index = -1\n",
					"    for i, part in enumerate(parts):\n",
					"        if part.lower() == 'la_data':\n",
					"            la_index = i\n",
					"            break\n",
					"    \n",
					"    if la_index == -1:\n",
					"        # Try more flexible matching (in case of case differences or formatting issues)\n",
					"        for i, part in enumerate(parts):\n",
					"            if 'la' in part.lower() and 'data' in part.lower():\n",
					"                print(f\"Found likely LA_Data folder with name: {part}\")\n",
					"                la_index = i\n",
					"                break\n",
					"    \n",
					"    if la_index == -1:\n",
					"        print(\"Could not find LA_Data or similar folder in path\")\n",
					"        return None, None\n",
					"        \n",
					"    print(f\"Found LA_Data at index {la_index}\")\n",
					"    \n",
					"    # Get date folder (before LA_Data)\n",
					"    date_folder = None\n",
					"    if la_index > 0:\n",
					"        date_folder = parts[la_index - 1]\n",
					"        print(f\"Date folder: {date_folder}\")\n",
					"    \n",
					"    # Get LA folder (after LA_Data)\n",
					"    la_folder = None\n",
					"    if len(parts) > la_index + 1:\n",
					"        la_folder = parts[la_index + 1]\n",
					"        print(f\"LA folder: {la_folder}\")\n",
					"    \n",
					"    return date_folder, la_folder"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def get_folder_parts(file_path):\n",
					"    \"\"\"Extract folder information for naming with simplified and more robust logic\"\"\"\n",
					"    # First try the standard path detection\n",
					"    parts = file_path.split('/')\n",
					"    print(f\"Path parts: {parts}\")\n",
					"    \n",
					"    # Initialize with defaults\n",
					"    date_folder = None\n",
					"    la_folder = None\n",
					"    confidence = \"low\"\n",
					"    \n",
					"    # First look for date pattern (YYYYMMDD) in path parts\n",
					"    date_pattern = re.compile(r'^\\d{8}$')\n",
					"    date_indices = [i for i, part in enumerate(parts) if date_pattern.match(part)]\n",
					"    \n",
					"    if date_indices:\n",
					"        # Use the first date pattern found\n",
					"        date_idx = date_indices[0]\n",
					"        date_folder = parts[date_idx]\n",
					"        \n",
					"        # Try to find LA folder after the date folder\n",
					"        if date_idx + 1 < len(parts) and not parts[date_idx + 1].endswith(('.csv', '.xlsx', '.xls')):\n",
					"            la_folder = parts[date_idx + 1]\n",
					"            confidence = \"medium\"\n",
					"    \n",
					"    # If still not found, look for LA_Data folder\n",
					"    if not date_folder or not la_folder:\n",
					"        for i, part in enumerate(parts):\n",
					"            if part.lower() == 'la_data' or ('la' in part.lower() and 'data' in part.lower()):\n",
					"                # Date folder is typically before LA_Data\n",
					"                if i > 0:\n",
					"                    date_folder = parts[i-1]\n",
					"                # LA folder is typically after LA_Data\n",
					"                if i + 1 < len(parts):\n",
					"                    la_folder = parts[i+1]\n",
					"                confidence = \"medium\"\n",
					"                break\n",
					"    \n",
					"    # Fallback to using parent folder and current date if still not found\n",
					"    if not date_folder:\n",
					"        date_folder = time.strftime(\"%Y%m%d\")\n",
					"    \n",
					"    if not la_folder and len(parts) > 1:\n",
					"        # Use the parent folder name as LA name\n",
					"        la_folder = parts[-2]  # Parent folder\n",
					"    elif not la_folder:\n",
					"        la_folder = \"unknown_LA\"\n",
					"    \n",
					"    # Clean up LA folder name if it contains the filename\n",
					"    if la_folder and '_' in la_folder:\n",
					"        # If LA folder contains file extension, clean it up\n",
					"        if any(ext in la_folder.lower() for ext in ['.csv', '.xlsx', '.xls']):\n",
					"            la_folder = la_folder.split('_')[0]\n",
					"    \n",
					"    # Mark high confidence if both parts match expected patterns\n",
					"    if date_pattern.match(str(date_folder)) and la_folder and not any(ext in la_folder.lower() for ext in ['.csv', '.xlsx', '.xls']):\n",
					"        confidence = \"high\"\n",
					"    \n",
					"    print(f\"Extracted: date_folder={date_folder}, la_folder={la_folder}, confidence={confidence}\")\n",
					"    return date_folder, la_folder, confidence"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def process_folder(path, storage_account, moved_files, depth=0):\n",
					"    \"\"\"Process a folder recursively and return all files with improved handling of ZIP files and depth tracking\"\"\"\n",
					"    all_files = []\n",
					"    \n",
					"    # Add depth indicator for debugging\n",
					"    indent = \"  \" * depth\n",
					"    try:\n",
					"        print(f\"{indent}Scanning directory (depth {depth}): {path}\")\n",
					"        files = mssparkutils.fs.ls(path)\n",
					"        print(f\"{indent}Found {len(files)} items in {path}\")\n",
					"        \n",
					"        for file_info in files:\n",
					"            if file_info.isDir:\n",
					"                print(f\"{indent}Processing subdirectory: {file_info.path}\")\n",
					"                # Recursively process subdirectories with increased depth\n",
					"                sub_files = process_folder(file_info.path, storage_account, moved_files, depth + 1)\n",
					"                all_files.extend(sub_files)\n",
					"                print(f\"{indent}Found {len(sub_files)} files in subdirectory {file_info.path}\")\n",
					"            else:\n",
					"                # Handle ZIP files specially\n",
					"                if is_zip_file(file_info.path):\n",
					"                    print(f\"{indent}Found ZIP file: {file_info.path}\")\n",
					"                    extract_to = tempfile.mkdtemp()  # Create a temporary directory\n",
					"                    \n",
					"                    try:\n",
					"                        success, result = unzip_file(file_info.path, extract_to, storage_account)\n",
					"                        \n",
					"                        if success:\n",
					"                            print(f\"{indent}Successfully unzipped {file_info.path}\")\n",
					"                            # Process extracted files in the local filesystem\n",
					"                            extracted_files = []\n",
					"                            for root, dirs, files in os.walk(extract_to):\n",
					"                                for file in files:\n",
					"                                    extracted_path = os.path.join(root, file)\n",
					"                                    if should_process_file(extracted_path):\n",
					"                                        # Create appropriate path in Azure\n",
					"                                        relative_path = os.path.relpath(extracted_path, extract_to)\n",
					"                                        parent_dir = os.path.dirname(file_info.path)\n",
					"                                        azure_path = f\"{parent_dir}/{relative_path}\"\n",
					"                                        \n",
					"                                        # Copy file to Azure\n",
					"                                        print(f\"{indent}Copying extracted file to Azure: {azure_path}\")\n",
					"                                        mssparkutils.fs.cp(f\"file://{extracted_path}\", azure_path)\n",
					"                                        \n",
					"                                        # Add to files list\n",
					"                                        extracted_files.append(azure_path)\n",
					"                            \n",
					"                            all_files.extend(extracted_files)\n",
					"                            print(f\"{indent}Added {len(extracted_files)} extracted files to processing list\")\n",
					"                        else:\n",
					"                            if result == \"password_protected\":\n",
					"                                print(f\"{indent}Zip file is password protected, moving to quarantine: {file_info.path}\")\n",
					"                                success, quarantine_path = move_to_quarantine(file_info.path, storage_account, moved_files, \"password_protected\")\n",
					"                                if success:\n",
					"                                    print(f\"{indent}Successfully moved password-protected ZIP to quarantine: {quarantine_path}\")\n",
					"                                else:\n",
					"                                    print(f\"{indent}Failed to move password-protected ZIP to quarantine: {quarantine_path}\")\n",
					"                            else:\n",
					"                                print(f\"{indent}Error unzipping file: {result}\")\n",
					"                    except Exception as e:\n",
					"                        print(f\"{indent}Error processing ZIP file {file_info.path}: {str(e)}\")\n",
					"                    finally:\n",
					"                        # Clean up the temporary directory\n",
					"                        try:\n",
					"                            shutil.rmtree(extract_to)\n",
					"                        except Exception as cleanup_error:\n",
					"                            print(f\"{indent}Error cleaning up temporary directory: {str(cleanup_error)}\")\n",
					"                \n",
					"                # Handle non-ZIP files\n",
					"                elif 'File Structure Definitions.xlsx' not in file_info.path:\n",
					"                    print(f\"{indent}Found file: {file_info.path}\")\n",
					"                    all_files.append(file_info.path)\n",
					"    except Exception as e:\n",
					"        print(f\"{indent}Error accessing path {path}: {str(e)}\")\n",
					"    \n",
					"    return all_files"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def create_file_index(source_path, storage_account):\n",
					"    \"\"\"Create a JSON index of all files in the source path\"\"\"\n",
					"    print(f\"Creating index of files in {source_path}\")\n",
					"    \n",
					"    file_index = {\n",
					"        \"created_at\": time.strftime(\"%Y%m%d%H%M%S\"),\n",
					"        \"files\": []\n",
					"    }\n",
					"    \n",
					"    # Process the folder recursively - simplified version that doesn't process ZIP files\n",
					"    def process_folder_for_index(path, depth=0):\n",
					"        indent = \"  \" * depth\n",
					"        try:\n",
					"            print(f\"{indent}Scanning directory (depth {depth}): {path}\")\n",
					"            files = mssparkutils.fs.ls(path)\n",
					"            \n",
					"            for file_info in files:\n",
					"                if file_info.isDir:\n",
					"                    process_folder_for_index(file_info.path, depth + 1)\n",
					"                else:\n",
					"                    print(f\"{indent}Found file: {file_info.path}\")\n",
					"                    \n",
					"                    # Extract date_folder and la_folder\n",
					"                    date_folder, la_folder, confidence = get_folder_parts(file_info.path)\n",
					"                    \n",
					"                    # Add file to index\n",
					"                    file_index[\"files\"].append({\n",
					"                        \"path\": file_info.path,\n",
					"                        \"file_name\": os.path.basename(file_info.path),\n",
					"                        \"date_folder\": date_folder,\n",
					"                        \"la_folder\": la_folder,\n",
					"                        \"confidence\": confidence,\n",
					"                        \"file_type\": get_file_type(file_info.path),\n",
					"                        \"is_empty\": is_empty_file(file_info.path),\n",
					"                        \"is_metadata\": is_metadata_file(file_info.path),\n",
					"                        \"should_process\": should_process_file(file_info.path) and 'File Structure Definitions.xlsx' not in file_info.path,\n",
					"                        \"processed\": False\n",
					"                    })\n",
					"        except Exception as e:\n",
					"            print(f\"{indent}Error accessing path {path}: {str(e)}\")\n",
					"    \n",
					"    # Start the recursive process\n",
					"    process_folder_for_index(source_path)\n",
					"    \n",
					"    # Write the index to a JSON file\n",
					"    # Write the index to a JSON file\n",
					"    index_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/index/file_index.json\"\n",
					"    \n",
					"    # Ensure the index directory exists\n",
					"    index_dir = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/index\"\n",
					"    if not mssparkutils.fs.exists(index_dir):\n",
					"        print(f\"Creating index directory: {index_dir}\")\n",
					"        mssparkutils.fs.mkdirs(index_dir)\n",
					"    \n",
					"    # Convert to a proper DataFrame using a list of Row objects\n",
					"    from pyspark.sql import Row\n",
					"    index_rows = []\n",
					"    \n",
					"    # Add each file as a separate row in the DataFrame\n",
					"    for file_data in file_index[\"files\"]:\n",
					"        # Convert the individual file data to a Row\n",
					"        file_row = Row(\n",
					"            path=file_data[\"path\"],\n",
					"            file_name=file_data[\"file_name\"],\n",
					"            date_folder=file_data[\"date_folder\"],\n",
					"            la_folder=file_data[\"la_folder\"],\n",
					"            confidence=file_data[\"confidence\"],\n",
					"            file_type=file_data[\"file_type\"],\n",
					"            is_empty=file_data[\"is_empty\"],\n",
					"            is_metadata=file_data[\"is_metadata\"],\n",
					"            should_process=file_data[\"should_process\"],\n",
					"            processed=file_data[\"processed\"]\n",
					"        )\n",
					"        index_rows.append(file_row)\n",
					"    \n",
					"    # Create DataFrame from the rows\n",
					"    index_df = spark.createDataFrame(index_rows)\n",
					"    \n",
					"    # Write the DataFrame as a Parquet file (more robust than text)\n",
					"    index_df.write.mode(\"overwrite\").parquet(index_path)\n",
					"    \n",
					"    print(f\"Created index with {len(file_index['files'])} files at {index_path}\")\n",
					"    return file_index"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def process_individual_file(file_info, storage_account, moved_files):\n",
					"    \"\"\"Process a single file based on its index information\"\"\"\n",
					"    try:\n",
					"        # Extract info from the file_info dictionary\n",
					"        file_path = file_info[\"path\"]\n",
					"        file_name = file_info[\"file_name\"]  \n",
					"        date_folder = file_info[\"date_folder\"]\n",
					"        la_folder = file_info[\"la_folder\"]\n",
					"        confidence = file_info[\"confidence\"]\n",
					"        \n",
					"        print(f\"\\nProcessing file: {file_path}\")\n",
					"        \n",
					"        # Check if file still exists\n",
					"        if not mssparkutils.fs.exists(file_path):\n",
					"            print(f\"  File no longer exists, might have been processed already: {file_path}\")\n",
					"            return False\n",
					"        \n",
					"        # Check if file still exists\n",
					"        if not mssparkutils.fs.exists(file_path):\n",
					"            print(f\"  File no longer exists, might have been processed already: {file_path}\")\n",
					"            return False\n",
					"        \n",
					"        # Check if file is empty\n",
					"        if file_info[\"is_empty\"]:\n",
					"            print(f\"  File is empty, moving to empty files folder\")\n",
					"            success, empty_path = process_empty_file(file_path, storage_account, moved_files)\n",
					"            if success:\n",
					"                print(f\"  Successfully processed empty file to: {empty_path}\")\n",
					"                return True\n",
					"            else:\n",
					"                moved_files['failed'].append(f\"{file_path} (empty file move failed)\")\n",
					"                print(f\"  Failed to process empty file\")\n",
					"                return False\n",
					"        \n",
					"        # Check if it's a metadata file\n",
					"        if file_info[\"is_metadata\"]:\n",
					"            print(f\"  Identified as metadata file\")\n",
					"            success, new_path = process_metadata_file(file_path, file_name, storage_account)\n",
					"            if success:\n",
					"                moved_files['metadata_success'].append(new_path)\n",
					"                print(f\"  Successfully processed metadata file to: {new_path}\")\n",
					"                return True\n",
					"            else:\n",
					"                moved_files['failed'].append(f\"{file_path} (metadata move failed)\")\n",
					"                print(f\"  Failed to process metadata file\")\n",
					"                return False\n",
					"        \n",
					"        # Check if it's a supported file type\n",
					"        if not file_info[\"should_process\"]:\n",
					"            print(f\"  Skipping unsupported file format: {file_path}\")\n",
					"            return False\n",
					"        else:\n",
					"            print(f\"  Supported file format: {file_info['file_type']}\")\n",
					"        \n",
					"        # Check if we should move to quarantine for manual inspection\n",
					"        should_quarantine = False\n",
					"        quarantine_reason = \"\"\n",
					"        \n",
					"        if not date_folder or not la_folder:\n",
					"            should_quarantine = True\n",
					"            quarantine_reason = \"missing_folder_parts\"\n",
					"        elif confidence == \"very_low\":\n",
					"            should_quarantine = True\n",
					"            quarantine_reason = f\"invalid_la_code_format_{la_folder}\"\n",
					"        elif confidence == \"low\" and not re.match(r'^\\d{8}$', date_folder):\n",
					"            should_quarantine = True\n",
					"            quarantine_reason = f\"low_confidence_structure_{date_folder}_{la_folder}\"\n",
					"        \n",
					"        if should_quarantine:\n",
					"            print(f\"  Moving file to quarantine due to: {quarantine_reason}\")\n",
					"            success, quarantine_path = move_to_quarantine(file_path, storage_account, moved_files, quarantine_reason)\n",
					"            if success:\n",
					"                print(f\"  Successfully moved to quarantine: {quarantine_path}\")\n",
					"                return True\n",
					"            else:\n",
					"                print(f\"  Failed to move to quarantine\")\n",
					"                moved_files['failed'].append(f\"{file_path} (quarantine failed - {quarantine_reason})\")\n",
					"                return False\n",
					"        \n",
					"        # Process the file if it passed validation\n",
					"        print(f\"  Valid folder structure, processing file...\")\n",
					"        success, new_path = process_file(file_path, date_folder, la_folder, file_name, storage_account)\n",
					"        if success:\n",
					"            moved_files['data_success'].append(new_path)\n",
					"            print(f\"  Successfully processed to: {new_path}\")\n",
					"            return True\n",
					"        else:\n",
					"            moved_files['failed'].append(f\"{file_path} (processing failed)\")\n",
					"            print(f\"  Failed to process file\")\n",
					"            return False\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error processing {file_path}: {str(e)}\")\n",
					"        print(f\"  Error processing {file_path}: {str(e)}\")\n",
					"        import traceback\n",
					"        print(f\"  Traceback: {traceback.format_exc()}\")\n",
					"        moved_files['failed'].append(f\"{file_path} (processing error)\")\n",
					"        return False"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def process_file_group(file_group, date_folder, la_folder, storage_account, moved_files):\n",
					"    \"\"\"Process a group of files with the same date and LA folder with better coordination\"\"\"\n",
					"    try:\n",
					"        print(f\"\\nProcessing file group: date={date_folder}, LA={la_folder}, files={len(file_group)}\")\n",
					"        \n",
					"        # Create the folder name in the format YYYYMMDD_LA-Name\n",
					"        folder_key = f\"{date_folder}_{la_folder}\"\n",
					"        \n",
					"        # Ensure the destination directory exists\n",
					"        dest_dir = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/files\"\n",
					"        if not mssparkutils.fs.exists(dest_dir):\n",
					"            print(f\"Creating destination directory: {dest_dir}\")\n",
					"            mssparkutils.fs.mkdirs(dest_dir)\n",
					"        \n",
					"        # Check which files still exist and get their types\n",
					"        valid_files = []\n",
					"        for info in file_group:\n",
					"            path = info[\"path\"]\n",
					"            if mssparkutils.fs.exists(path):\n",
					"                valid_files.append(info)\n",
					"            else:\n",
					"                print(f\"  File doesn't exist, skipping from group: {path}\")\n",
					"        \n",
					"        if not valid_files:\n",
					"            print(\"  No valid files remain in this group\")\n",
					"            return False, None\n",
					"            \n",
					"        # Group files by type for easier processing\n",
					"        csv_files = [info for info in valid_files if info[\"file_type\"] == \"csv\"]\n",
					"        excel_files = [info for info in valid_files if info[\"file_type\"] == \"excel\"]\n",
					"        \n",
					"        # Process CSV files if present\n",
					"        if csv_files:\n",
					"            csv_dest_path = f\"{dest_dir}/{folder_key}.csv\"\n",
					"            print(f\"  Processing {len(csv_files)} CSV files to: {csv_dest_path}\")\n",
					"            \n",
					"            try:\n",
					"                # Read and merge all CSV files\n",
					"                if len(csv_files) == 1:\n",
					"                    # Just copy the single file\n",
					"                    path = csv_files[0][\"path\"]\n",
					"                    mssparkutils.fs.cp(path, csv_dest_path, True)\n",
					"                    print(f\"  Copied single CSV file to {csv_dest_path}\")\n",
					"                    \n",
					"                    # Try to delete original\n",
					"                    try:\n",
					"                        mssparkutils.fs.rm(path)\n",
					"                    except Exception as e:\n",
					"                        print(f\"  Warning: Could not delete original file: {str(e)}\")\n",
					"                        \n",
					"                    for path in [csv_files[0][\"path\"]]:\n",
					"                        moved_files['data_success'].append(csv_dest_path)\n",
					"                else:\n",
					"                    # Merge multiple files\n",
					"                    dfs = []\n",
					"                    for info in csv_files:\n",
					"                        try:\n",
					"                            df = spark.read.option(\"header\", \"true\").csv(info[\"path\"])\n",
					"                            dfs.append(df)\n",
					"                        except Exception as e:\n",
					"                            print(f\"  Error reading CSV file {info['path']}: {str(e)}\")\n",
					"                            moved_files['failed'].append(f\"{info['path']} (CSV read failed)\")\n",
					"                            \n",
					"                    if dfs:\n",
					"                        # Merge the dataframes\n",
					"                        merged_df = dfs[0]\n",
					"                        for df in dfs[1:]:\n",
					"                            merged_df = merged_df.unionByName(df, allowMissingColumns=True)\n",
					"                        \n",
					"                        # Write the merged dataframe\n",
					"                        merged_df.write.mode(\"overwrite\").option(\"header\", \"true\").csv(csv_dest_path)\n",
					"                        print(f\"  Successfully merged {len(dfs)} CSV files to {csv_dest_path}\")\n",
					"                        \n",
					"                        # Try to delete originals\n",
					"                        for info in csv_files:\n",
					"                            try:\n",
					"                                if mssparkutils.fs.exists(info[\"path\"]):\n",
					"                                    mssparkutils.fs.rm(info[\"path\"])\n",
					"                            except Exception as e:\n",
					"                                print(f\"  Warning: Could not delete original file: {str(e)}\")\n",
					"                                \n",
					"                        # Update success tracking\n",
					"                        for info in csv_files:\n",
					"                            moved_files['data_success'].append(csv_dest_path)\n",
					"            except Exception as e:\n",
					"                print(f\"  Error processing CSV group: {str(e)}\")\n",
					"                import traceback\n",
					"                print(f\"  Traceback: {traceback.format_exc()}\")\n",
					"                for info in csv_files:\n",
					"                    moved_files['failed'].append(f\"{info['path']} (CSV group processing failed)\")\n",
					"        \n",
					"        # Process Excel files (just take the first one as you can't easily merge Excel files)\n",
					"        if excel_files:\n",
					"            excel_dest_path = f\"{dest_dir}/{folder_key}.xlsx\"\n",
					"            print(f\"  Processing Excel files, using first of {len(excel_files)} to: {excel_dest_path}\")\n",
					"            \n",
					"            try:\n",
					"                # Just use the first Excel file\n",
					"                path = excel_files[0][\"path\"]\n",
					"                mssparkutils.fs.cp(path, excel_dest_path, True)\n",
					"                print(f\"  Copied first Excel file to {excel_dest_path}\")\n",
					"                \n",
					"                # Try to delete original\n",
					"                try:\n",
					"                    mssparkutils.fs.rm(path)\n",
					"                except Exception as e:\n",
					"                    print(f\"  Warning: Could not delete original file: {str(e)}\")\n",
					"                \n",
					"                # Update success tracking for first file\n",
					"                moved_files['data_success'].append(excel_dest_path)\n",
					"                \n",
					"                # Process additional Excel files individually\n",
					"                if len(excel_files) > 1:\n",
					"                    print(f\"  Processing remaining {len(excel_files)-1} Excel files individually\")\n",
					"                    for i in range(1, len(excel_files)):\n",
					"                        process_individual_file(excel_files[i], storage_account, moved_files)\n",
					"            except Exception as e:\n",
					"                print(f\"  Error processing Excel files: {str(e)}\")\n",
					"                import traceback\n",
					"                print(f\"  Traceback: {traceback.format_exc()}\")\n",
					"                for info in excel_files:\n",
					"                    moved_files['failed'].append(f\"{info['path']} (Excel processing failed)\")\n",
					"                \n",
					"        return True, None\n",
					"        \n",
					"    except Exception as e:\n",
					"        print(f\"Error processing file group: {str(e)}\")\n",
					"        import traceback\n",
					"        print(f\"Traceback: {traceback.format_exc()}\")\n",
					"        return False, None"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def print_detailed_summary(moved_files):\n",
					"    \"\"\"Print detailed summary of moved files\"\"\"\n",
					"    print(\"\\nSummary of Moved Files:\")\n",
					"    print(f\"Data Files Successfully Moved: {len(moved_files['data_success'])}\")\n",
					"    for file in moved_files['data_success']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Metadata Files Successfully Moved: {len(moved_files['metadata_success'])}\")\n",
					"    for file in moved_files['metadata_success']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Failed Files: {len(moved_files['failed'])}\")\n",
					"    for file in moved_files['failed']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Quarantined Files: {len(moved_files['quarantine'])}\")\n",
					"    for file in moved_files['quarantine']:\n",
					"        print(f\"  - {file}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def main():\n",
					"    storage_account = \"baubaisadfsastg\"\n",
					"    source_path = f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net\"\n",
					"    index_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/index/file_index.json\"\n",
					"    log_file_path = f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net/processed_files_log.json\"\n",
					"    \n",
					"    moved_files = {\n",
					"        'data_success': [],\n",
					"        'metadata_success': [],\n",
					"        'empty': [],\n",
					"        'failed': [],\n",
					"        'quarantine': []\n",
					"    }\n",
					"    \n",
					"    # Verify source path exists\n",
					"    if not mssparkutils.fs.exists(source_path):\n",
					"        logging.error(f\"Source path does not exist: {source_path}\")\n",
					"        print(f\"ERROR: Source path does not exist: {source_path}\")\n",
					"        return\n",
					"    else:\n",
					"        logging.info(f\"Source path exists: {source_path}\")\n",
					"        print(f\"Source path exists: {source_path}\")\n",
					"    \n",
					"    # Ensure destination directories exist\n",
					"    dest_dirs = [\n",
					"        f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/files\",\n",
					"        f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/metadata\",\n",
					"        f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/quarantine\",\n",
					"        f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/empty\",\n",
					"        f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/index\"\n",
					"    ]\n",
					"    \n",
					"    for dir_path in dest_dirs:\n",
					"        if not mssparkutils.fs.exists(dir_path):\n",
					"            print(f\"Creating destination directory: {dir_path}\")\n",
					"            mssparkutils.fs.mkdirs(dir_path)\n",
					"    \n",
					"    # Create/update the file index\n",
					"    try: \n",
					"        if mssparkutils.fs.exists(index_path):\n",
					"            # Read existing index from parquet file\n",
					"            index_df = spark.read.parquet(index_path)\n",
					"\n",
					"            # Convert back to Python dictionary format\n",
					"            file_index = {\n",
					"                \"created_at\": time.strftime(\"%Y%m%d%H%M%S\"),\n",
					"                \"files\": []\n",
					"            }\n",
					"            \n",
					"            for row in index_df.collect():\n",
					"                file_dict = row.asDict()\n",
					"                file_index[\"files\"].append(file_dict)\n",
					"            print(f\"Read existing index with {len(file_index['files'])} files\")\n",
					"        else:\n",
					"            file_index = create_file_index(source_path, storage_account)\n",
					"    except Exception as e:\n",
					"        print(f\"Error reading index, creating new one: {str(e)}\")\n",
					"        file_index = create_file_index(source_path, storage_account)\n",
					"    \n",
					"    print(f\"Working with index containing {len(file_index['files'])} files\")\n",
					"    \n",
					"    # Read the log of processed files\n",
					"    try:\n",
					"        processed_files_log = spark.read.json(log_file_path).select(\"file\").rdd.flatMap(lambda x: x).collect()\n",
					"        logging.info(f\"Read processed files log with {len(processed_files_log)} entries\")\n",
					"        print(f\"\\nProcessed files log contains {len(processed_files_log)} entries\")\n",
					"    except Exception as e:\n",
					"        logging.warning(f\"Could not read processed files log: {str(e)}\")\n",
					"        print(f\"\\nCould not read processed files log: {str(e)}\")\n",
					"        processed_files_log = []\n",
					"    \n",
					"    # Filter out files that have already been processed\n",
					"    new_files = []\n",
					"    for file_info in file_index[\"files\"]:\n",
					"        if file_info[\"path\"] not in processed_files_log:\n",
					"            new_files.append(file_info)\n",
					"    \n",
					"    print(f\"\\nNew files to process: {len(new_files)}\")\n",
					"    \n",
					"    # Group files by date and LA folder\n",
					"    file_groups = {}\n",
					"    individual_files = []\n",
					"    \n",
					"    for file_info in new_files:\n",
					"        # Files that should be processed individually\n",
					"        if file_info[\"is_empty\"] or file_info[\"is_metadata\"] or file_info[\"confidence\"] == \"very_low\" or not file_info[\"should_process\"]:\n",
					"            individual_files.append(file_info)\n",
					"            continue\n",
					"            \n",
					"        # Group by date and LA folder\n",
					"        group_key = (file_info[\"date_folder\"], file_info[\"la_folder\"])\n",
					"        if group_key not in file_groups:\n",
					"            file_groups[group_key] = []\n",
					"        file_groups[group_key].append(file_info)\n",
					"    \n",
					"    print(f\"Grouped into {len(file_groups)} file groups and {len(individual_files)} individual files\")\n",
					"    \n",
					"    # Process individual files first\n",
					"    for file_info in individual_files:\n",
					"        try:\n",
					"            if not isinstance(file_info, dict):\n",
					"                print(f\"ERROR: file_info is not a dictionary: {type(file_info)}\")\n",
					"                continue\n",
					"            \n",
					"            if \"path\" not in file_info:\n",
					"                print(f\"ERROR: file_info does not have a 'path' key: {file_info}\")\n",
					"                continue\n",
					"            \n",
					"            process_individual_file(file_info, storage_account, moved_files)\n",
					"        except Exception as e:\n",
					"            print(f\"Error processing individual file: {str(e)}\")\n",
					"            print(f\"File info: {file_info}\")\n",
					"            import traceback\n",
					"            print(f\"Traceback: {traceback.format_exc()}\")\n",
					"            if isinstance(file_info, dict) and \"path\" in file_info:\n",
					"                moved_files['failed'].append(f\"{file_info['path']} (processing error: {str(e)})\")\n",
					"            else:\n",
					"                moved_files['failed'].append(f\"Unknown file (processing error)\")\n",
					"    \n",
					"    # Process file groups\n",
					"    for (date_folder, la_folder), file_group in file_groups.items():\n",
					"        try:\n",
					"            # Only process groups with more than one file\n",
					"            if len(file_group) > 1:\n",
					"                success, path = process_file_group(file_group, date_folder, la_folder, storage_account, moved_files)\n",
					"                if not success:\n",
					"                    # If group processing failed, try individual processing\n",
					"                    print(f\"Group processing failed, trying individual processing\")\n",
					"                    for file_info in file_group:\n",
					"                        process_individual_file(file_info, storage_account, moved_files)\n",
					"            else:\n",
					"                # For single file \"groups\", just process individually\n",
					"                process_individual_file(file_group[0], storage_account, moved_files)\n",
					"        except Exception as e:\n",
					"            print(f\"Error processing file group {date_folder}_{la_folder}: {str(e)}\")\n",
					"            import traceback\n",
					"            print(f\"Traceback: {traceback.format_exc()}\")\n",
					"            for file_info in file_group:\n",
					"                moved_files['failed'].append(f\"{file_info['path']} (group processing error)\")\n",
					"\n",
					" \n",
					"            # Check if file still exists (might have been moved by a previous operation)\n",
					"            if not mssparkutils.fs.exists(file_path):\n",
					"                print(f\"  File no longer exists, might have been processed already: {file_path}\")\n",
					"                continue\n",
					"            \n",
					"            # Add the empty file check right here\n",
					"            if is_empty_file(file_path):\n",
					"                print(f\"  File is empty, moving to empty files folder\")\n",
					"                success, empty_path = process_empty_file(file_path, storage_account, moved_files)\n",
					"                if success:\n",
					"                    print(f\"  Successfully moved empty file to: {empty_path}\")\n",
					"                else:\n",
					"                    moved_files['failed'].append(f\"{file_path} (empty file move failed)\")\n",
					"                    print(f\"  Failed to move empty file\")\n",
					"                continue\n",
					"            \n",
					"            if is_metadata_file(file_path):\n",
					"                print(f\"  Identified as metadata file\")\n",
					"                success, new_path = process_metadata_file(file_path, file_name, storage_account)\n",
					"                if success:\n",
					"                    moved_files['metadata_success'].append(new_path)\n",
					"                    print(f\"  Successfully processed metadata file to: {new_path}\")\n",
					"                else:\n",
					"                    moved_files['failed'].append(f\"{file_path} (metadata move failed)\")\n",
					"                    print(f\"  Failed to process metadata file\")\n",
					"                continue\n",
					"            \n",
					"            if not should_process_file(file_path):\n",
					"                print(f\"  Skipping unsupported file format: {file_path}\")\n",
					"                continue\n",
					"            else:\n",
					"                print(f\"  Supported file format: {get_file_type(file_path)}\")\n",
					"            \n",
					"            # Try to identify the folder structure\n",
					"            date_folder, third_folder, confidence = get_folder_parts(file_path)\n",
					"            print(f\"  Folder structure analysis: date_folder={date_folder}, third_folder={third_folder}, confidence={confidence}\")\n",
					"            \n",
					"            # Check if we should move to quarantine for manual inspection\n",
					"            should_quarantine = False\n",
					"            quarantine_reason = \"\"\n",
					"            \n",
					"            if not date_folder or not third_folder:\n",
					"                should_quarantine = True\n",
					"                quarantine_reason = \"missing_folder_parts\"\n",
					"            elif confidence == \"low\" and not re.match(r'^\\d{8}$', date_folder):\n",
					"                should_quarantine = True\n",
					"                quarantine_reason = f\"low_confidence_structure_{date_folder}_{third_folder}\"\n",
					"            \n",
					"            if should_quarantine:\n",
					"                print(f\"  Moving file to quarantine due to: {quarantine_reason}\")\n",
					"                success, quarantine_path = move_to_quarantine(file_path, storage_account, moved_files, quarantine_reason)\n",
					"                if success:\n",
					"                    print(f\"  Successfully moved to quarantine: {quarantine_path}\")\n",
					"                else:\n",
					"                    print(f\"  Failed to move to quarantine\")\n",
					"                    moved_files['failed'].append(f\"{file_path} (quarantine failed - {quarantine_reason})\")\n",
					"                continue\n",
					"            \n",
					"            # Process the file if it passed validation\n",
					"            print(f\"  Valid folder structure, processing file...\")\n",
					"            success, new_path = process_file(file_path, date_folder, third_folder, file_name, storage_account)\n",
					"            if success:\n",
					"                moved_files['data_success'].append(new_path)\n",
					"                print(f\"  Successfully processed to: {new_path}\")\n",
					"                \n",
					"                # Delete original file after successful processing if needed\n",
					"                try:\n",
					"                    mssparkutils.fs.rm(file_path)\n",
					"                    print(f\"  Original file deleted after successful processing\")\n",
					"                except Exception as del_e:\n",
					"                    print(f\"  Warning: Could not delete original file: {str(del_e)}\")\n",
					"            else:\n",
					"                moved_files['failed'].append(f\"{file_path} (processing failed)\")\n",
					"                print(f\"  Failed to process file\")\n",
					"                \n",
					"        except Exception as e:\n",
					"            logging.error(f\"Error processing {file_path}: {str(e)}\")\n",
					"            print(f\"  Error processing {file_path}: {str(e)}\")\n",
					"            import traceback\n",
					"            print(f\"  Traceback: {traceback.format_exc()}\")\n",
					"            moved_files['failed'].append(f\"{file_path} (processing error)\")\n",
					"            continue\n",
					"    \n",
					"    print_detailed_summary(moved_files)\n",
					"    \n",
					"    # Update the log of processed files\n",
					"    new_processed_files = [file_info[\"path\"] for file_info in new_files]\n",
					"    new_processed_files_log = spark.createDataFrame([(file,) for file in new_processed_files], [\"file\"])\n",
					"    if processed_files_log:\n",
					"        existing_log_df = spark.createDataFrame([(file,) for file in processed_files_log], [\"file\"])\n",
					"        updated_log_df = existing_log_df.union(new_processed_files_log).distinct()\n",
					"    else:\n",
					"        updated_log_df = new_processed_files_log\n",
					"    updated_log_df.write.mode(\"overwrite\").json(log_file_path)\n",
					"    logging.info(\"Updated processed files log\")\n",
					"    \n",
					"    print(\"\\nSummary totals:\")\n",
					"    print(f\"Files processed: {len(new_files)}\")\n",
					"    print(f\"Data files successfully moved: {len(moved_files['data_success'])}\")\n",
					"    print(f\"Metadata files successfully moved: {len(moved_files['metadata_success'])}\")\n",
					"    print(f\"Empty files moved: {len(moved_files.get('empty', []))}\")\n",
					"    print(f\"Files quarantined: {len(moved_files['quarantine'])}\")\n",
					"    print(f\"Files failed: {len(moved_files['failed'])}\")\n",
					"\n",
					"if __name__ == \"__main__\":\n",
					"    main()"
				],
				"execution_count": null
			}
		]
	}
}