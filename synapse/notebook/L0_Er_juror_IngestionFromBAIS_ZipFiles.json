{
	"name": "L0_er_juror_ingestion",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "88c35165-b5dd-47a6-82c4-bf12a883ec67"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ER_Juror Data Ingestion"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"\n",
					"### Process Flow\n",
					"This documentation provides a clear understanding of the process flow and the steps involved in the data ingestion process.\n",
					"\n",
					"1. **Import Libraries**: Import necessary libraries for Spark, file handling, logging, and zip file handling.\n",
					"2. **Initialize Spark Session**: Create a Spark session with the required packages.\n",
					"3. **Define Helper Functions**:\n",
					"    - `is_metadata_file`: Check if a file is a metadata file.\n",
					"    - `should_process_file`: Check if a file should be processed (CSV or Excel).\n",
					"    - `get_file_type`: Determine the file type (CSV or Excel).\n",
					"    - `is_zip_file`: Check if a file is a zip file.\n",
					"    - `unzip_file`: Unzip a file to the specified directory.\n",
					"    - `move_to_quarantine`: Move a file to the quarantine folder.\n",
					"    - `process_folder`: Recursively process a folder and return all files, handling zip files and password-protected files.\n",
					"    - `get_folder_parts`: Extract folder information for naming.\n",
					"    - `process_metadata_file`: Process metadata files.\n",
					"    - `process_file`: Process data files.\n",
					"    - `print_detailed_summary`: Print a detailed summary of moved files.\n",
					"4. **Main Function**:\n",
					"    - Define storage account and paths.\n",
					"    - Initialize a dictionary to track moved files.\n",
					"    - Scan the source path for files.\n",
					"    - Read the log of processed files.\n",
					"    - Filter out files that have already been processed.\n",
					"    - Process new files:\n",
					"        - Check if the file is a metadata file and process accordingly.\n",
					"        - Check if the file should be processed (CSV or Excel).\n",
					"        - Extract folder information and process the file.\n",
					"    - Print a detailed summary of moved files.\n",
					"    - Update the log of processed files.\n",
					"\n",
					"This documentation provides a clear understanding of the process flow and the steps involved in the data ingestion process, including handling zip files and password-protected files.\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 1. Import Libaries"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import logging\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"import time\n",
					"from notebookutils import mssparkutils\n",
					"import os\n",
					"import zipfile\n",
					"import shutil\n",
					"import tempfile"
				],
				"execution_count": 64
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 2. Initialize Spark Session"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Configure logging\n",
					"logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
					"\n",
					"# Initialize Spark session with the required packages\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"JurorIngestion\") \\\n",
					"    .config(\"spark.jars.packages\", \"com.crealytics:spark-excel_2.12:0.13.5,org.apache.xmlbeans:xmlbeans:3.1.0,org.apache.poi:poi-ooxml-schemas:4.1.2,org.apache.poi:poi-ooxml:4.1.2,org.apache.poi:poi:4.1.2\") \\\n",
					"    .getOrCreate()"
				],
				"execution_count": 65
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 3. Define Helper Functions"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def is_metadata_file(file_path):\n",
					"    \"\"\"Check if file is metadata related\"\"\"\n",
					"    metadata_indicators = [\n",
					"        'metadata.txt',\n",
					"        'ReadMe.txt'\n",
					"    ]\n",
					"    return any(indicator in file_path.lower() for indicator in metadata_indicators)\n",
					"\n",
					"def should_process_file(file_path):\n",
					"    \"\"\"Check if file should be processed (CSV or Excel) - case insensitive\"\"\"\n",
					"    extensions = ['.csv', '.xlsx', '.xls']\n",
					"    return any(file_path.lower().endswith(ext) for ext in extensions)\n",
					"\n",
					"def get_file_type(file_path):\n",
					"    \"\"\"Determine if file is CSV or Excel\"\"\"\n",
					"    if file_path.lower().endswith(('.xlsx', '.xls')):\n",
					"        return 'excel'\n",
					"    elif file_path.lower().endswith('.csv'):\n",
					"        return 'csv'\n",
					"    return None\n",
					"\n",
					"def is_zip_file(file_path):\n",
					"    \"\"\"Check if file is a zip file\"\"\"\n",
					"    return file_path.lower().endswith('.zip')\n",
					"\n",
					"def unzip_file(file_path, extract_to, storage_account):\n",
					"    \"\"\"Unzip a file to the specified directory with improved error handling\"\"\"\n",
					"    try:\n",
					"        print(f\"Attempting to unzip: {file_path}\")\n",
					"        \n",
					"        # Create a temporary local directory\n",
					"        with tempfile.TemporaryDirectory() as tmpdirname:\n",
					"            local_zip_path = os.path.join(tmpdirname, os.path.basename(file_path))\n",
					"            \n",
					"            # Download the zip file to the local temporary directory\n",
					"            print(f\"Downloading zip file from {file_path} to {local_zip_path}\")\n",
					"            mssparkutils.fs.cp(file_path, f\"file://{local_zip_path}\")\n",
					"            \n",
					"            # Check if zip file is password protected before trying to extract\n",
					"            try:\n",
					"                zip_file = zipfile.ZipFile(local_zip_path)\n",
					"                # Try to read the first file to see if it's password protected\n",
					"                for zip_info in zip_file.infolist():\n",
					"                    if zip_info.flag_bits & 0x1:\n",
					"                        print(f\"ZIP file is encrypted/password protected: {file_path}\")\n",
					"                        return False, \"password_protected\"\n",
					"                    \n",
					"                    # Try to read a little bit of data to check for password\n",
					"                    try:\n",
					"                        zip_file.open(zip_info.filename).read(1)\n",
					"                    except RuntimeError as e:\n",
					"                        if 'password required' in str(e).lower() or 'bad password' in str(e).lower():\n",
					"                            print(f\"Password required for ZIP file: {file_path}\")\n",
					"                            return False, \"password_protected\"\n",
					"                        raise\n",
					"                \n",
					"                # If we got here, try to extract\n",
					"                print(f\"Extracting ZIP file to {extract_to}\")\n",
					"                zip_file.extractall(path=extract_to)\n",
					"                zip_file.close()\n",
					"                \n",
					"            except zipfile.BadZipFile as e:\n",
					"                print(f\"Bad ZIP file: {file_path} - {str(e)}\")\n",
					"                return False, \"bad_zip_file\"\n",
					"            except RuntimeError as e:\n",
					"                error_msg = str(e).lower()\n",
					"                if 'password required' in error_msg or 'encrypted' in error_msg or 'bad password' in error_msg:\n",
					"                    print(f\"Password protected ZIP file detected: {file_path}\")\n",
					"                    return False, \"password_protected\"\n",
					"                raise\n",
					"            \n",
					"        # If extraction succeeded, upload the extracted files back to ADLS\n",
					"        print(f\"Uploading extracted files to Azure Data Lake\")\n",
					"        for root, dirs, files in os.walk(extract_to):\n",
					"            for file in files:\n",
					"                local_file_path = os.path.join(root, file)\n",
					"                relative_path = os.path.relpath(local_file_path, extract_to)\n",
					"                remote_dir = os.path.dirname(file_path)\n",
					"                remote_file_path = f\"{remote_dir}/{relative_path}\"\n",
					"                \n",
					"                print(f\"Uploading: {local_file_path} to {remote_file_path}\")\n",
					"                mssparkutils.fs.cp(f\"file://{local_file_path}\", remote_file_path)\n",
					"        \n",
					"        print(f\"Successfully unzipped file: {file_path}\")\n",
					"        return True, None\n",
					"        \n",
					"    except RuntimeError as e:\n",
					"        error_msg = str(e).lower()\n",
					"        if 'password required' in error_msg or 'encrypted' in error_msg or 'bad password' in error_msg:\n",
					"            print(f\"Password protected ZIP file detected: {file_path}\")\n",
					"            return False, \"password_protected\"\n",
					"        else:\n",
					"            print(f\"Runtime error unzipping file: {str(e)}\")\n",
					"            return False, str(e)\n",
					"    except Exception as e:\n",
					"        print(f\"Error unzipping file: {file_path} - {str(e)}\")\n",
					"        return False, str(e)\n",
					"\n",
					"def move_to_quarantine(file_path, storage_account, moved_files):\n",
					"    \"\"\"Move a file to the quarantine folder and update the moved_files dictionary\"\"\"\n",
					"    try:\n",
					"        quarantine_dir = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/quarantine\"\n",
					"        \n",
					"        # Create quarantine directory if it doesn't exist\n",
					"        if not mssparkutils.fs.exists(quarantine_dir):\n",
					"            print(f\"Creating quarantine directory: {quarantine_dir}\")\n",
					"            mssparkutils.fs.mkdirs(quarantine_dir)\n",
					"        \n",
					"        # Create a unique filename to avoid conflicts\n",
					"        file_name = os.path.basename(file_path)\n",
					"        timestamp = time.strftime(\"%Y%m%d%H%M%S\")\n",
					"        quarantine_path = f\"{quarantine_dir}/{timestamp}_{file_name}\"\n",
					"        \n",
					"        print(f\"Moving file to quarantine: {file_path} -> {quarantine_path}\")\n",
					"        \n",
					"        # Use overwrite=True to handle potential conflicts\n",
					"        mssparkutils.fs.cp(file_path, quarantine_path, True)\n",
					"        print(f\"Successfully copied file to quarantine\")\n",
					"        \n",
					"        # After successful copy, delete the original\n",
					"        mssparkutils.fs.rm(file_path)\n",
					"        print(f\"Successfully deleted original file after quarantine\")\n",
					"        \n",
					"        moved_files['quarantine'].append(quarantine_path)\n",
					"        return True, quarantine_path\n",
					"    except Exception as e:\n",
					"        print(f\"Error moving file to quarantine: {str(e)}\")\n",
					"        return False, str(e)\n",
					"\n",
					"\n",
					"def process_folder(path, storage_account, moved_files):\n",
					"    \"\"\"Process a folder recursively and return all files with improved handling of ZIP files\"\"\"\n",
					"    all_files = []\n",
					"    try:\n",
					"        print(f\"Scanning directory: {path}\")\n",
					"        files = mssparkutils.fs.ls(path)\n",
					"        print(f\"Found {len(files)} items in {path}\")\n",
					"        \n",
					"        for file_info in files:\n",
					"            if file_info.isDir:\n",
					"                print(f\"Processing subdirectory: {file_info.path}\")\n",
					"                sub_files = process_folder(file_info.path, storage_account, moved_files)\n",
					"                all_files.extend(sub_files)\n",
					"                print(f\"Found {len(sub_files)} files in subdirectory {file_info.path}\")\n",
					"            else:\n",
					"                # Handle ZIP files specially\n",
					"                if is_zip_file(file_info.path):\n",
					"                    print(f\"Found ZIP file: {file_info.path}\")\n",
					"                    extract_to = tempfile.mkdtemp()  # Create a temporary directory\n",
					"                    \n",
					"                    try:\n",
					"                        success, result = unzip_file(file_info.path, extract_to, storage_account)\n",
					"                        \n",
					"                        if success:\n",
					"                            print(f\"Successfully unzipped {file_info.path}\")\n",
					"                            sub_files = process_folder(extract_to, storage_account, moved_files)\n",
					"                            all_files.extend(sub_files)\n",
					"                        else:\n",
					"                            if result == \"password_protected\":\n",
					"                                print(f\"Zip file is password protected, moving to quarantine: {file_info.path}\")\n",
					"                                success, quarantine_path = move_to_quarantine(file_info.path, storage_account, moved_files)\n",
					"                                if success:\n",
					"                                    print(f\"Successfully moved password-protected ZIP to quarantine: {quarantine_path}\")\n",
					"                                else:\n",
					"                                    print(f\"Failed to move password-protected ZIP to quarantine: {quarantine_path}\")\n",
					"                            else:\n",
					"                                print(f\"Error unzipping file: {result}\")\n",
					"                    except Exception as e:\n",
					"                        print(f\"Error processing ZIP file {file_info.path}: {str(e)}\")\n",
					"                    finally:\n",
					"                        # Clean up the temporary directory\n",
					"                        try:\n",
					"                            shutil.rmtree(extract_to)\n",
					"                        except Exception as cleanup_error:\n",
					"                            print(f\"Error cleaning up temporary directory: {str(cleanup_error)}\")\n",
					"                \n",
					"                # Handle non-ZIP files\n",
					"                elif 'File Structure Definitions.xlsx' not in file_info.path:\n",
					"                    print(f\"Found file: {file_info.path}\")\n",
					"                    all_files.append(file_info.path)\n",
					"    except Exception as e:\n",
					"        print(f\"Error accessing path {path}: {str(e)}\")\n",
					"    \n",
					"    return all_files\n",
					"\n",
					"def get_folder_parts(file_path):\n",
					"    \"\"\"Extract folder information for naming with improved parsing and debugging\"\"\"\n",
					"    parts = file_path.split('/')\n",
					"    \n",
					"    logging.info(f\"Analyzing path parts for {file_path}: {parts}\")\n",
					"    \n",
					"    try:\n",
					"        if 'LA_Data' in parts:\n",
					"            la_index = parts.index('LA_Data')\n",
					"            if la_index > 0:\n",
					"                date_folder = parts[la_index - 1]\n",
					"                if len(parts) > la_index + 1:\n",
					"                    # Get LA folder name (third folder)\n",
					"                    third_folder = parts[la_index + 1]\n",
					"                    logging.info(f\"Found folder structure: date_folder={date_folder}, LA folder={third_folder}\")\n",
					"                    return date_folder, third_folder\n",
					"            logging.warning(f\"Invalid folder structure before/after LA_Data for {file_path}\")\n",
					"        else:\n",
					"            logging.warning(f\"'LA_Data' not found in path: {file_path}\")\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error parsing folder structure: {str(e)}\")\n",
					"    return None, None\n",
					"\n",
					"def process_metadata_file(file_path, file_name, storage_account):\n",
					"    \"\"\"Process metadata file\"\"\"\n",
					"    try:\n",
					"        # Create a unique name by including part of the original file path\n",
					"        unique_name = file_path.replace(f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net/\", \"\").replace(\"/\", \"_\")\n",
					"        destination_dir = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/metadata\"\n",
					"        destination_path = f\"{destination_dir}/{unique_name}\"\n",
					"        \n",
					"        # Create the destination directory if it doesn't exist\n",
					"        if not mssparkutils.fs.exists(destination_dir):\n",
					"            mssparkutils.fs.mkdirs(destination_dir)\n",
					"        \n",
					"        mssparkutils.fs.mv(file_path, destination_path)\n",
					"        logging.info(f\"Moved metadata file to {destination_path}\")\n",
					"        return True, destination_path\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error moving metadata file {file_path}: {str(e)}\")\n",
					"        return False, None\n",
					"\n",
					"def process_file(source_path, date_folder, third_folder, file_name, storage_account):\n",
					"    \"\"\"Process CSV or Excel file with corrected folder structure\"\"\"\n",
					"    try:\n",
					"        # Create the folder name in the format YYYYMMDD_LA-Name\n",
					"        folder_name = f\"{date_folder}_{third_folder}\"\n",
					"        file_type = get_file_type(source_path)\n",
					"        \n",
					"        if not file_type:\n",
					"            return False, None\n",
					"        \n",
					"        # Handle Excel files\n",
					"        if file_type == 'excel':\n",
					"            dest_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/files/{folder_name}.xlsx\"\n",
					"            logging.info(f\"Moving Excel file to: {dest_path}\")\n",
					"            mssparkutils.fs.cp(source_path, dest_path, True)\n",
					"            return True, f\"excel/{folder_name}.xlsx\"\n",
					"        \n",
					"        # Handle CSV files\n",
					"        if file_type == 'csv':\n",
					"            dest_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/files/{folder_name}.csv\"\n",
					"            logging.info(f\"Moving CSV file to: {dest_path}\")\n",
					"            mssparkutils.fs.cp(source_path, dest_path, True)\n",
					"            return True, f\"csv/{folder_name}.csv\"\n",
					"        \n",
					"        return False, None\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error processing file {source_path}: {str(e)}\")\n",
					"        return False, None\n",
					"\n",
					"def print_detailed_summary(moved_files):\n",
					"    \"\"\"Print detailed summary of moved files\"\"\"\n",
					"    print(\"\\nSummary of Moved Files:\")\n",
					"    print(f\"Data Files Successfully Moved: {len(moved_files['data_success'])}\")\n",
					"    for file in moved_files['data_success']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Metadata Files Successfully Moved: {len(moved_files['metadata_success'])}\")\n",
					"    for file in moved_files['metadata_success']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Failed Files: {len(moved_files['failed'])}\")\n",
					"    for file in moved_files['failed']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Quarantined Files: {len(moved_files['quarantine'])}\")\n",
					"    for file in moved_files['quarantine']:\n",
					"        print(f\"  - {file}\")\n",
					"\n",
					""
				],
				"execution_count": 66
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 4. Main Function"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def main():\n",
					"    storage_account = \"baubaisadfsastg\"\n",
					"    source_path = f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net\"\n",
					"    log_file_path = f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net/processed_files_log.json\"\n",
					"    \n",
					"    moved_files = {\n",
					"        'data_success': [],\n",
					"        'metadata_success': [],\n",
					"        'failed': [],\n",
					"        'quarantine': []\n",
					"    }\n",
					"    \n",
					"    # Verify source path exists\n",
					"    if not mssparkutils.fs.exists(source_path):\n",
					"        logging.error(f\"Source path does not exist: {source_path}\")\n",
					"        print(f\"ERROR: Source path does not exist: {source_path}\")\n",
					"        return\n",
					"    else:\n",
					"        logging.info(f\"Source path exists: {source_path}\")\n",
					"        print(f\"Source path exists: {source_path}\")\n",
					"    \n",
					"    # List root directory contents\n",
					"    try:\n",
					"        root_files = mssparkutils.fs.ls(source_path)\n",
					"        print(f\"Number of items in root directory: {len(root_files)}\")\n",
					"        for item in root_files:\n",
					"            print(f\"  - {item.path} (Directory: {item.isDir})\")\n",
					"    except Exception as e:\n",
					"        print(f\"Error listing source directory: {str(e)}\")\n",
					"    \n",
					"    # Proceed with scanning\n",
					"    logging.info(f\"Scanning source path: {source_path}\")\n",
					"    files = process_folder(source_path, storage_account, moved_files)\n",
					"    logging.info(f\"Found {len(files)} files to process\")\n",
					"    \n",
					"    # Print all found files\n",
					"    print(\"\\nFiles found during scanning:\")\n",
					"    if files:\n",
					"        for file in files:\n",
					"            print(f\"  - {file}\")\n",
					"    else:\n",
					"        print(\"  No files found during scanning\")\n",
					"    \n",
					"    # Read the log of processed files\n",
					"    try:\n",
					"        processed_files_log = spark.read.json(log_file_path).select(\"file\").rdd.flatMap(lambda x: x).collect()\n",
					"        logging.info(f\"Read processed files log with {len(processed_files_log)} entries\")\n",
					"        print(f\"\\nProcessed files log contains {len(processed_files_log)} entries\")\n",
					"    except Exception as e:\n",
					"        logging.warning(f\"Could not read processed files log: {str(e)}\")\n",
					"        print(f\"\\nCould not read processed files log: {str(e)}\")\n",
					"        processed_files_log = []\n",
					"    \n",
					"    # Filter out files that have already been processed\n",
					"    new_files = [file for file in files if file not in processed_files_log]\n",
					"    logging.info(f\"New files to process: {len(new_files)}\")\n",
					"    print(f\"\\nFiles already processed: {len(files) - len(new_files)}\")\n",
					"    print(f\"New files to process: {len(new_files)}\")\n",
					"    \n",
					"    # Print new files\n",
					"    if new_files:\n",
					"        print(\"\\nNew files to be processed:\")\n",
					"        for file in new_files:\n",
					"            print(f\"  - {file}\")\n",
					"    else:\n",
					"        print(\"\\nNo new files to process\")\n",
					"    \n",
					"    # Test for folder structure issues\n",
					"    if new_files:\n",
					"        print(\"\\nTesting folder structure for each file:\")\n",
					"        for file_path in new_files:\n",
					"            parts = file_path.split('/')\n",
					"            print(f\"  File: {file_path}\")\n",
					"            print(f\"  Path parts: {parts}\")\n",
					"            \n",
					"            try:\n",
					"                if 'LA_Data' in parts:\n",
					"                    la_index = parts.index('LA_Data')\n",
					"                    print(f\"  Found 'LA_Data' at index {la_index}\")\n",
					"                    \n",
					"                    if la_index > 0:\n",
					"                        date_folder = parts[la_index - 1]\n",
					"                        print(f\"  Date folder: {date_folder}\")\n",
					"                        \n",
					"                        if len(parts) > la_index + 1:\n",
					"                            third_folder = parts[la_index + 1]\n",
					"                            print(f\"  LA folder: {third_folder}\")\n",
					"                        else:\n",
					"                            print(\"  Missing LA folder after LA_Data\")\n",
					"                    else:\n",
					"                        print(\"  No folder before LA_Data\")\n",
					"                else:\n",
					"                    print(\"  'LA_Data' not found in path\")\n",
					"            except Exception as e:\n",
					"                print(f\"  Error analyzing path: {str(e)}\")\n",
					"            print(\"\")\n",
					"    \n",
					"    # Process the files as normal\n",
					"    for file_path in new_files:\n",
					"        try:\n",
					"            file_name = file_path.split('/')[-1]\n",
					"            print(f\"\\nProcessing file: {file_path}\")\n",
					"            \n",
					"            if is_metadata_file(file_path):\n",
					"                print(f\"  Identified as metadata file\")\n",
					"                success, new_path = process_metadata_file(file_path, file_name, storage_account)\n",
					"                if success:\n",
					"                    moved_files['metadata_success'].append(new_path)\n",
					"                    print(f\"  Successfully processed metadata file to: {new_path}\")\n",
					"                else:\n",
					"                    moved_files['failed'].append(f\"{file_path} (metadata move failed)\")\n",
					"                    print(f\"  Failed to process metadata file\")\n",
					"                continue\n",
					"            \n",
					"            if not should_process_file(file_path):\n",
					"                print(f\"  Skipping unsupported file format\")\n",
					"                continue\n",
					"            else:\n",
					"                print(f\"  Supported file format: {get_file_type(file_path)}\")\n",
					"            \n",
					"            date_folder, third_folder = get_folder_parts(file_path)\n",
					"            print(f\"  Folder structure analysis: date_folder={date_folder}, third_folder={third_folder}\")\n",
					"            \n",
					"            if date_folder and third_folder:\n",
					"                print(f\"  Valid folder structure, processing file...\")\n",
					"                success, new_path = process_file(file_path, date_folder, third_folder, \n",
					"                                             file_name, storage_account)\n",
					"                if success:\n",
					"                    moved_files['data_success'].append(new_path)\n",
					"                    print(f\"  Successfully processed to: {new_path}\")\n",
					"                else:\n",
					"                    moved_files['failed'].append(f\"{file_path} (processing failed)\")\n",
					"                    print(f\"  Failed to process file\")\n",
					"            else:\n",
					"                print(f\"  Invalid folder structure for file\")\n",
					"                moved_files['failed'].append(f\"{file_path} (invalid folder structure)\")\n",
					"                \n",
					"        except Exception as e:\n",
					"            logging.error(f\"Error processing {file_path}: {str(e)}\")\n",
					"            print(f\"  Error processing {file_path}: {str(e)}\")\n",
					"            moved_files['failed'].append(f\"{file_path} (processing error)\")\n",
					"            continue\n",
					"    \n",
					"    print_detailed_summary(moved_files)\n",
					"    \n",
					"    # Update the log of processed files\n",
					"    new_processed_files_log = spark.createDataFrame([(file,) for file in new_files], [\"file\"])\n",
					"    if processed_files_log:\n",
					"        existing_log_df = spark.createDataFrame([(file,) for file in processed_files_log], [\"file\"])\n",
					"        updated_log_df = existing_log_df.union(new_processed_files_log).distinct()\n",
					"    else:\n",
					"        updated_log_df = new_processed_files_log\n",
					"    updated_log_df.write.mode(\"overwrite\").json(log_file_path)\n",
					"    logging.info(\"Updated processed files log\")\n",
					"\n",
					"if __name__ == \"__main__\":\n",
					"    main()"
				],
				"execution_count": 67
			}
		]
	}
}