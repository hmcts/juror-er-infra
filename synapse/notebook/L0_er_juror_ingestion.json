{
	"name": "L0_er_juror_ingestion",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8b23ebb9-fe92-4d4e-84a7-04bedf0e7e7e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ER_Juror Data Ingestion"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"\n",
					"### Process Flow\n",
					"This documentation provides a clear understanding of the process flow and the steps involved in the data ingestion process.\n",
					"\n",
					"1. **Import Libraries**: Import necessary libraries for Spark, file handling, logging, and zip file handling.\n",
					"2. **Initialize Spark Session**: Create a Spark session with the required packages.\n",
					"3. **Define Helper Functions**:\n",
					"    - `is_metadata_file`: Check if a file is a metadata file.\n",
					"    - `should_process_file`: Check if a file should be processed (CSV or Excel).\n",
					"    - `get_file_type`: Determine the file type (CSV or Excel).\n",
					"    - `is_zip_file`: Check if a file is a zip file.\n",
					"    - `unzip_file`: Unzip a file to the specified directory.\n",
					"    - `move_to_quarantine`: Move a file to the quarantine folder.\n",
					"    - `process_folder`: Recursively process a folder and return all files, handling zip files and password-protected files.\n",
					"    - `get_folder_parts`: Extract folder information for naming.\n",
					"    - `process_metadata_file`: Process metadata files.\n",
					"    - `process_file`: Process data files.\n",
					"    - `print_detailed_summary`: Print a detailed summary of moved files.\n",
					"4. **Main Function**:\n",
					"    - Define storage account and paths.\n",
					"    - Initialize a dictionary to track moved files.\n",
					"    - Scan the source path for files.\n",
					"    - Read the log of processed files.\n",
					"    - Filter out files that have already been processed.\n",
					"    - Process new files:\n",
					"        - Check if the file is a metadata file and process accordingly.\n",
					"        - Check if the file should be processed (CSV or Excel).\n",
					"        - Extract folder information and process the file.\n",
					"    - Print a detailed summary of moved files.\n",
					"    - Update the log of processed files.\n",
					"\n",
					"This documentation provides a clear understanding of the process flow and the steps involved in the data ingestion process, including handling zip files and password-protected files.\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 1. Import Libaries"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import logging\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"import time\n",
					"from notebookutils import mssparkutils\n",
					"import os\n",
					"import zipfile\n",
					"import shutil"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 2. Initialize Spark Session"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Initialize Spark session with the required packages\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"JurorIngestion\") \\\n",
					"    .config(\"spark.jars.packages\", \"com.crealytics:spark-excel_2.12:0.13.5,org.apache.xmlbeans:xmlbeans:3.1.0,org.apache.poi:poi-ooxml-schemas:4.1.2,org.apache.poi:poi-ooxml:4.1.2,org.apache.poi:poi:4.1.2\") \\\n",
					"    .getOrCreate()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 3. Define Helper Functions"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def is_metadata_file(file_path):\n",
					"    \"\"\"Check if file is metadata related\"\"\"\n",
					"    metadata_indicators = [\n",
					"        'metadata.txt',\n",
					"        'ReadMe.txt'\n",
					"    ]\n",
					"    return any(indicator in file_path.lower() for indicator in metadata_indicators)\n",
					"\n",
					"def should_process_file(file_path):\n",
					"    \"\"\"Check if file should be processed (CSV or Excel) - case insensitive\"\"\"\n",
					"    extensions = ['.csv', '.xlsx', '.xls']\n",
					"    return any(file_path.lower().endswith(ext) for ext in extensions)\n",
					"\n",
					"def get_file_type(file_path):\n",
					"    \"\"\"Determine if file is CSV or Excel\"\"\"\n",
					"    if file_path.lower().endswith(('.xlsx', '.xls')):\n",
					"        return 'excel'\n",
					"    elif file_path.lower().endswith('.csv'):\n",
					"        return 'csv'\n",
					"    return None\n",
					"\n",
					"def is_zip_file(file_path):\n",
					"    \"\"\"Check if file is a zip file\"\"\"\n",
					"    return file_path.lower().endswith('.zip')\n",
					"\n",
					"def unzip_file(file_path, extract_to):\n",
					"    \"\"\"Unzip a file to the specified directory\"\"\"\n",
					"    try:\n",
					"        with zipfile.ZipFile(file_path, 'r') as zip_ref:\n",
					"            zip_ref.extractall(extract_to)\n",
					"        return True\n",
					"    except RuntimeError as e:\n",
					"        if 'password required' in str(e).lower():\n",
					"            return False, 'password_protected'\n",
					"        else:\n",
					"            return False, str(e)\n",
					"    except Exception as e:\n",
					"        return False, str(e)\n",
					"\n",
					"def move_to_quarantine(file_path, storage_account):\n",
					"    \"\"\"Move a file to the quarantine folder\"\"\"\n",
					"    try:\n",
					"        quarantine_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/quarantine/{os.path.basename(file_path)}\"\n",
					"        mssparkutils.fs.mv(file_path, quarantine_path)\n",
					"        return True, quarantine_path\n",
					"    except Exception as e:\n",
					"        return False, str(e)\n",
					"\n",
					"def process_folder(path, storage_account):\n",
					"    \"\"\"Process a folder recursively and return all files\"\"\"\n",
					"    all_files = []\n",
					"    try:\n",
					"        files = mssparkutils.fs.ls(path)\n",
					"        for file_info in files:\n",
					"            if file_info.isDir:\n",
					"                sub_files = process_folder(file_info.path, storage_account)\n",
					"                all_files.extend(sub_files)\n",
					"            else:\n",
					"                if is_zip_file(file_info.path):\n",
					"                    extract_to = f\"{path}/unzipped_{os.path.splitext(file_info.name)[0]}\"\n",
					"                    success, result = unzip_file(file_info.path, extract_to)\n",
					"                    if success:\n",
					"                        sub_files = process_folder(extract_to, storage_account)\n",
					"                        all_files.extend(sub_files)\n",
					"                        shutil.rmtree(extract_to)  # Clean up extracted files\n",
					"                    elif result == 'password_protected':\n",
					"                        move_to_quarantine(file_info.path, storage_account)\n",
					"                    else:\n",
					"                        print(f\"Error unzipping file {file_info.path}: {result}\")\n",
					"                elif 'File Structure Definitions.xlsx' not in file_info.path:\n",
					"                    all_files.append(file_info.path)\n",
					"    except Exception as e:\n",
					"        print(f\"Error accessing path {path}: {str(e)}\")\n",
					"    return all_files\n",
					"\n",
					"def get_folder_parts(file_path):\n",
					"    \"\"\"Extract folder information for naming with improved parsing\"\"\"\n",
					"    parts = file_path.split('/')\n",
					"    \n",
					"    try:\n",
					"        la_index = parts.index('LA_Data')\n",
					"        if la_index > 0:\n",
					"            date_folder = parts[la_index - 1]\n",
					"            if len(parts) > la_index + 1:\n",
					"                # Get LA folder name (third folder)\n",
					"                third_folder = parts[la_index + 1]\n",
					"                return date_folder, third_folder\n",
					"    except ValueError:\n",
					"        pass\n",
					"    return None, None\n",
					"\n",
					"def process_metadata_file(file_path, file_name, storage_account):\n",
					"    \"\"\"Process metadata file\"\"\"\n",
					"    try:\n",
					"        new_path = f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net/metadata/{file_name}\"\n",
					"        mssparkutils.fs.mv(file_path, new_path)\n",
					"        return True, new_path\n",
					"    except Exception as e:\n",
					"        print(f\"Error moving metadata file {file_path}: {str(e)}\")\n",
					"        return False, None\n",
					"\n",
					"def process_file(file_path, date_folder, third_folder, file_name, storage_account):\n",
					"    \"\"\"Process data file\"\"\"\n",
					"    try:\n",
					"        file_type = get_file_type(file_path)\n",
					"        if file_type == 'csv':\n",
					"            df = spark.read.option(\"header\", \"true\").csv(file_path)\n",
					"        elif file_type == 'excel':\n",
					"            df = spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").load(file_path)\n",
					"        else:\n",
					"            print(f\"Unsupported file type for {file_path}\")\n",
					"            return False, None\n",
					"        \n",
					"        new_path = f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net/processed/{date_folder}/{third_folder}/{file_name}\"\n",
					"        df.write.mode(\"overwrite\").parquet(new_path)\n",
					"        return True, new_path\n",
					"    except Exception as e:\n",
					"        print(f\"Error processing file {file_path}: {str(e)}\")\n",
					"        return False, None\n",
					"\n",
					"def print_detailed_summary(moved_files):\n",
					"    \"\"\"Print detailed summary of moved files\"\"\"\n",
					"    print(\"\\nSummary of Moved Files:\")\n",
					"    print(f\"Data Files Successfully Moved: {len(moved_files['data_success'])}\")\n",
					"    for file in moved_files['data_success']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Metadata Files Successfully Moved: {len(moved_files['metadata_success'])}\")\n",
					"    for file in moved_files['metadata_success']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Failed Files: {len(moved_files['failed'])}\")\n",
					"    for file in moved_files['failed']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Quarantined Files: {len(moved_files['quarantine'])}\")\n",
					"    for file in moved_files['quarantine']:\n",
					"        print(f\"  - {file}\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 4. Main Function"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def main():\n",
					"    storage_account = \"baubaisadfsastg\"\n",
					"    source_path = f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net\"\n",
					"    log_file_path = f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net/processed_files_log.json\"\n",
					"    \n",
					"    moved_files = {\n",
					"        'data_success': [],\n",
					"        'metadata_success': [],\n",
					"        'failed': [],\n",
					"        'quarantine': []\n",
					"    }\n",
					"    \n",
					"    print(f\"Scanning source path: {source_path}\")\n",
					"    files = process_folder(source_path, storage_account)\n",
					"    print(f\"Found {len(files)} files to process\")\n",
					"    \n",
					"    # Read the log of processed files\n",
					"    try:\n",
					"        processed_files_log = spark.read.json(log_file_path).select(\"file\").rdd.flatMap(lambda x: x).collect()\n",
					"    except Exception as e:\n",
					"        print(f\"Could not read processed files log: {str(e)}\")\n",
					"        processed_files_log = []\n",
					"    \n",
					"    # Filter out files that have already been processed\n",
					"    new_files = [file for file in files if file not in processed_files_log]\n",
					"    print(f\"New files to process: {len(new_files)}\")\n",
					"    \n",
					"    for file_path in new_files:\n",
					"        try:\n",
					"            file_name = file_path.split('/')[-1]\n",
					"            \n",
					"            if is_metadata_file(file_path):\n",
					"                success, new_path = process_metadata_file(file_path, file_name, storage_account)\n",
					"                if success:\n",
					"                    moved_files['metadata_success'].append(new_path)\n",
					"                else:\n",
					"                    moved_files['failed'].append(f\"{file_path} (metadata move failed)\")\n",
					"                continue\n",
					"            \n",
					"            if not should_process_file(file_path):\n",
					"                continue\n",
					"            \n",
					"            date_folder, third_folder = get_folder_parts(file_path)\n",
					"            if date_folder and third_folder:\n",
					"                success, new_path = process_file(file_path, date_folder, third_folder, \n",
					"                                                 file_name, storage_account)\n",
					"                if success:\n",
					"                    moved_files['data_success'].append(new_path)\n",
					"                else:\n",
					"                    moved_files['failed'].append(f\"{file_path} (processing failed)\")\n",
					"            else:\n",
					"                moved_files['failed'].append(f\"{file_path} (invalid folder structure)\")\n",
					"                \n",
					"        except Exception as e:\n",
					"            print(f\"Error processing {file_path}: {str(e)}\")\n",
					"            moved_files['failed'].append(f\"{file_path} (processing error)\")\n",
					"            continue\n",
					"    \n",
					"    print_detailed_summary(moved_files)\n",
					"    \n",
					"    # Update the log of processed files\n",
					"    new_processed_files_log = spark.createDataFrame([(file,) for file in new_files], [\"file\"])\n",
					"    if processed_files_log:\n",
					"        existing_log_df = spark.createDataFrame([(file,) for file in processed_files_log], [\"file\"])\n",
					"        updated_log_df = existing_log_df.union(new_processed_files_log).distinct()\n",
					"    else:\n",
					"        updated_log_df = new_processed_files_log\n",
					"    updated_log_df.write.mode(\"overwrite\").json(log_file_path)\n",
					"\n",
					"if __name__ == \"__main__\":\n",
					"    main()"
				],
				"execution_count": null
			}
		]
	}
}