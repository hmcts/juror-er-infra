{
	"name": "L1_Testing_OutputFiles",
	"properties": {
		"folder": {
			"name": "crime/testing"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkprod",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ce2ea1a8-fa22-484b-ad4c-5a1528289371"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5ca62022-6aa2-4cee-aaa7-e7536c8d566c/resourceGroups/baubais-data-factory-rg-prod/providers/Microsoft.Synapse/workspaces/baubais-synapse-prod/bigDataPools/sparkprod",
				"name": "sparkprod",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkprod",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"import logging"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"delta_df = spark.read.format(\"delta\").load( f\"abfss://dl-juror-eric-voters-temp@baubaisadfsaprod.dfs.core.windows.net/voters_deduplicated_delta\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import count\n",
					"\n",
					"final_count = delta_df.groupBy('creation_date') \\\n",
					"    .agg(count('creation_date')) \\\n",
					"    .orderBy('creation_date')\n",
					"\n",
					"display(final_count)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"editable": false,
					"run_control": {
						"frozen": true
					}
				},
				"source": [
					"# Initialize Spark Session if not already initialized\n",
					"spark = SparkSession.builder.appName(\"ParquetReader\").getOrCreate()\n",
					"\n",
					"# Define storage paths\n",
					"storage_account = \"baubaisadfsaprod\"\n",
					"base_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/transformation\"\n",
					"\n",
					"# Function to analyze parquet file\n",
					"def analyze_parquet(file_path):\n",
					"    \"\"\"Analyze a parquet file and print useful information\"\"\"\n",
					"    print(f\"Reading parquet file from: {file_path}\")\n",
					"    \n",
					"    # Read the parquet file\n",
					"    df = spark.read.parquet(file_path)\n",
					"    \n",
					"    # Get basic information\n",
					"    print(\"\\nBasic Information:\")\n",
					"    print(f\"Number of rows: {df.count()}\")\n",
					"    print(f\"Number of columns: {len(df.columns)}\")\n",
					"    \n",
					"    # Print schema\n",
					"    print(\"\\nSchema:\")\n",
					"    df.printSchema()\n",
					"    \n",
					"    # Show sample data\n",
					"    print(\"\\nSample Data (5 rows):\")\n",
					"    df.show(5, truncate=False)\n",
					"    \n",
					"    # Get summary statistics for all columns\n",
					"    print(\"\\nSummary Statistics:\")\n",
					"    df.summary().show()\n",
					"    \n",
					"    # Return the dataframe for further analysis if needed\n",
					"    return df\n",
					"\n",
					"# Example usage for specific file\n",
					"file_path = f\"{base_path}/20241213_229-Colchester.parquet\"\n",
					"df = analyze_parquet(file_path)\n",
					"\n",
					"# Optional: Save sample to CSV for easier viewing\n",
					"\n",
					"df.count()"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(df.limit(20))"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import count\n",
					"\n",
					"final_count = df.groupBy('New Marker') \\\n",
					"    .agg(count('New Marker')) \n",
					"    #.orderBy('rec_num')\n",
					"\n",
					"display(final_count)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import count\n",
					"\n",
					"final_count = df.groupBy('Flags/Markers') \\\n",
					"    .agg(count('Flags/Markers')) \n",
					"    #.orderBy('rec_num')\n",
					"\n",
					"display(final_count)"
				],
				"execution_count": null
			}
		]
	}
}