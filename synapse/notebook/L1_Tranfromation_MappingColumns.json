{
	"name": "L1_Tranfromation_MappingColumns",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b65994cc-99fc-49bd-ac1a-5d782f307964"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import logging\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"import json\n",
					"from datetime import datetime\n",
					"import os\n",
					"import shutil"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Configure logging\n",
					"logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
					"\n",
					"def create_spark_session():\n",
					"    \"\"\"Create and return a Spark session\"\"\"\n",
					"    return SparkSession.builder \\\n",
					"        .appName(\"Electoral Data ETL\") \\\n",
					"        .getOrCreate()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def extract_la_code(file_path):\n",
					"    try:\n",
					"        path_parts = file_path.split('/')\n",
					"        for part in path_parts:\n",
					"            if '_' in part and len(part) > 9 and part[:8].isdigit() and part[8] == '_':\n",
					"                la_code = os.path.splitext(part[9:])[0]\n",
					"                logging.info(f\"Extracted LA_Code: {la_code}\")\n",
					"                return la_code\n",
					"        for i, part in enumerate(path_parts):\n",
					"            if part.lower() in ['csv', 'excel'] and i+1 < len(path_parts):\n",
					"                la_code = path_parts[i+1]\n",
					"                logging.info(f\"Extracted LA_Code from folder: {la_code}\")\n",
					"                return la_code\n",
					"        logging.warning(\"Could not extract LA_Code from path\")\n",
					"        return None\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error extracting LA_Code: {str(e)}\")\n",
					"        return None\n",
					"\n",
					"def read_column_mapping(spark, config_path):\n",
					"    \"\"\"Read and parse the column mapping configuration\"\"\"\n",
					"    try:\n",
					"        mapping_df = spark.read.text(config_path)\n",
					"        json_str = mapping_df.agg(concat_ws(\"\", collect_list(\"value\"))).collect()[0][0]\n",
					"        mapping_dict = json.loads(json_str)\n",
					"        return mapping_dict[\"mappings\"]\n",
					"    except Exception as e:\n",
					"        try:\n",
					"            mapping_rdd = spark.sparkContext.wholeTextFiles(config_path)\n",
					"            json_str = mapping_rdd.values().first()\n",
					"            mapping_dict = json.loads(json_str)\n",
					"            return mapping_dict[\"mappings\"]\n",
					"        except Exception as e2:\n",
					"            raise Exception(f\"Failed to read mapping file. Primary error: {str(e)}, Fallback error: {str(e2)}\")\n",
					"\n",
					"def get_reverse_mapping(column_mapping):\n",
					"    \"\"\"Create a reverse mapping for easy lookup\"\"\"\n",
					"    reverse_map = {}\n",
					"    for standard_name, details in column_mapping.items():\n",
					"        for alias in details[\"aliases\"]:\n",
					"            reverse_map[alias.lower()] = standard_name\n",
					"    return reverse_map\n",
					"\n",
					"\n",
					"def split_elector_name(df):\n",
					"    \"\"\"Split the 'Elector Name' field into surname and forename components.\"\"\"\n",
					"    if \"Elector Name\" in df.columns:\n",
					"        logging.info(\"Found 'Elector Name' column, splitting into surname and forename components\")\n",
					"        df = df.withColumn(\"name_parts\", split(col(\"Elector Name\"), \" \"))\n",
					"        df = df.withColumn(\"Elector Surname\", upper(trim(element_at(col(\"name_parts\"), 1))))\n",
					"        df = df.withColumn(\"Elector Forename\", \n",
					"                          when(size(col(\"name_parts\")) > 1,\n",
					"                               upper(trim(concat_ws(\" \", \n",
					"                                                  slice(col(\"name_parts\"), 2, size(col(\"name_parts\"))))))).otherwise(lit(None)))\n",
					"        df = df.drop(\"name_parts\")\n",
					"        logging.info(\"Sample of split names:\")\n",
					"        df.select(\"Elector Name\", \"Elector Surname\", \"Elector Forename\").show(5, truncate=False)\n",
					"    return df\n",
					"\n",
					"def process_name_components(df):\n",
					"    \"\"\"Process name components separately\"\"\"\n",
					"    name_columns = [\"Elector Title\", \"Elector Forename\", \"Elector Surname\", \"Elector Middlename\", \"Suffix\", \"Initials\"]\n",
					"    for col_name in name_columns:\n",
					"        if col_name in df.columns:\n",
					"            df = df.withColumn(col_name, when(col(col_name).isNotNull(), upper(trim(col(col_name)))).otherwise(None))\n",
					"    return df\n",
					"\n",
					"def list_files(spark, folder_path, extensions):\n",
					"    \"\"\"List all files with specific extensions in a folder\"\"\"\n",
					"    try:\n",
					"        pattern = f\"{folder_path}/*\"\n",
					"        logging.info(f\"Looking for files with pattern: {pattern}\")\n",
					"        files = spark._jsc.textFile(pattern, 1).keySet().toArray()\n",
					"        return [f for f in files if any(f.lower().endswith(ext) for ext in extensions)]\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error listing files: {str(e)}\")\n",
					"        return []\n",
					"\n",
					"def process_file(spark, file_path, reverse_mapping, output_path, error_path):\n",
					"    \"\"\"Process individual file with error handling\"\"\"\n",
					"    try:\n",
					"        file_name = os.path.basename(file_path)\n",
					"        if not any(file_name.lower().endswith(ext) for ext in ['.csv', '.xlsx', '.xls']):\n",
					"            logging.info(f\"Skipping unsupported file format: {file_path}\")\n",
					"            return {\"file\": file_name, \"status\": \"skipped\", \"output\": None}\n",
					"        \n",
					"        logging.info(f\"\\nProcessing file: {file_name} from path: {file_path}\")\n",
					"        la_code = extract_la_code(file_path)\n",
					"        creation_date = extract_creation_date(file_path)\n",
					"        df = read_file(spark, file_path)\n",
					"        logging.info(f\"Original columns: {df.columns}\")\n",
					"        logging.info(f\"Row count: {df.count()}\")\n",
					"        df = standardize_column_names(df, reverse_mapping)\n",
					"        logging.info(f\"Mapped columns: {df.columns}\")\n",
					"        df = transform_data(df, creation_date, la_code)\n",
					"        output_file = generate_output_filename(file_path, output_path)\n",
					"        logging.info(f\"Saving to: {output_file}\")\n",
					"        df.coalesce(1).write.mode(\"overwrite\").parquet(output_file)\n",
					"        return {\"file\": file_name, \"status\": \"success\", \"output\": output_file}\n",
					"    except Exception as e:\n",
					"        logging.error(f\"ERROR processing {file_path}: {str(e)}\")\n",
					"        error_report = {\"file\": file_name, \"status\": \"error\", \"error\": str(e)}\n",
					"        save_error_report(spark, error_report, error_path)\n",
					"        return error_report\n",
					"\n",
					"def extract_creation_date(file_path):\n",
					"    try:\n",
					"        path_parts = file_path.split('/')\n",
					"        for part in path_parts:\n",
					"            if len(part) >= 8 and part[:8].isdigit():\n",
					"                return datetime.strptime(part[:8], '%Y%m%d').date()\n",
					"        return None\n",
					"    except ValueError as e:\n",
					"        logging.error(f\"Could not parse date from path: {str(e)}\")\n",
					"        return None\n",
					"\n",
					"def read_file(spark, file_path):\n",
					"    if file_path.lower().endswith('.csv'):\n",
					"        logging.info(\"Reading as CSV file\")\n",
					"        return spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").csv(file_path)\n",
					"    elif file_path.lower().endswith(('.xlsx', '.xls')):\n",
					"        logging.info(\"Reading as Excel file\")\n",
					"        return read_excel_file(spark, file_path)\n",
					"    else:\n",
					"        raise ValueError(f\"Unsupported file format: {file_path}\")\n",
					"\n",
					"def read_excel_file(spark, file_path):\n",
					"    try:\n",
					"        return spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"treatEmptyValuesAsNulls\", \"true\").load(file_path)\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error reading Excel without sheet specification: {str(e)}\")\n",
					"        try:\n",
					"            return spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"treatEmptyValuesAsNulls\", \"true\").option(\"sheetName\", \"Sheet1\").load(file_path)\n",
					"        except Exception as e2:\n",
					"            logging.error(f\"Error reading Excel with Sheet1: {str(e2)}\")\n",
					"            return spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"treatEmptyValuesAsNulls\", \"true\").option(\"sheetIndex\", 0).load(file_path)\n",
					"\n",
					"def standardize_column_names(df, reverse_mapping):\n",
					"    for col in df.columns:\n",
					"        std_name = reverse_mapping.get(col.lower())\n",
					"        if std_name:\n",
					"            df = df.withColumnRenamed(col, std_name)\n",
					"            logging.info(f\"Renamed column: {col} -> {std_name}\")\n",
					"    return df\n",
					"\n",
					"def generate_output_filename(file_path, output_path):\n",
					"    path_parts = file_path.split('/')\n",
					"    base_folder = next((part for part in reversed(path_parts) if '_' in part and not part.endswith(('.csv', '.xlsx', '.xls'))), None)\n",
					"    output_filename = f\"{base_folder}.parquet\" if base_folder else f\"{os.path.splitext(os.path.basename(file_path))[0]}.parquet\"\n",
					"    return f\"{output_path}/{output_filename}\"\n",
					"\n",
					"def save_error_report(spark, error_report, error_path):\n",
					"    error_file = f\"{error_path}/{os.path.splitext(error_report['file'])[0]}_error.json\"\n",
					"    try:\n",
					"        spark.createDataFrame([error_report]).write.mode(\"overwrite\").json(error_file)\n",
					"        logging.info(f\"Error report saved to: {error_file}\")\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Could not save error report: {str(e)}\")\n",
					"\n",
					"def transform_data(df, creation_date, la_code=None):\n",
					"    for col_name in df.columns:\n",
					"        if isinstance(df.schema[col_name].dataType, StringType):\n",
					"            logging.info(f\"Cleaning text column: {col_name}\")\n",
					"            df = df.withColumn(col_name, upper(trim(df[col_name])))\n",
					"    df = split_elector_name(df)\n",
					"    df = process_name_components(df)\n",
					"    if \"Elector Forename\" in df.columns:\n",
					"        df = add_suffix(df)\n",
					"        df = add_middlename(df)\n",
					"        df = add_initials(df)\n",
					"    if creation_date:\n",
					"        logging.info(f\"Adding creation date: {creation_date}\")\n",
					"        df = df.withColumn(\"CreationDate\", lit(creation_date.isoformat()))\n",
					"    df = df.withColumn(\"LA_Code\", lit(la_code) if la_code else lit(None))\n",
					"    return df\n",
					"\n",
					"def add_suffix(df):\n",
					"    if \"Suffix\" in df.columns:\n",
					"        logging.info(\"Adding Suffix to Elector Forename\")\n",
					"        df = df.withColumn(\"Elector Forename\", when(col(\"Suffix\").isNotNull() & (length(trim(col(\"Suffix\"))) > 0), concat(df[\"Elector Forename\"], lit(\" \"), df[\"Suffix\"])).otherwise(df[\"Elector Forename\"]))\n",
					"    return df\n",
					"\n",
					"def add_middlename(df):\n",
					"    if \"Elector Middlename\" in df.columns:\n",
					"        logging.info(\"Adding Middlename to Elector Forename\")\n",
					"        df = df.withColumn(\"Elector Forename\", when(col(\"Elector Middlename\").isNotNull() & (length(trim(col(\"Elector Middlename\"))) > 0), concat(df[\"Elector Forename\"], lit(\" \"), df[\"Elector Middlename\"])).otherwise(df[\"Elector Forename\"]))\n",
					"    return df\n",
					"\n",
					"def add_initials(df):\n",
					"    if \"Initials\" in df.columns:\n",
					"        logging.info(\"Adding Initials to Elector Forename\")\n",
					"        df = df.withColumn(\"Elector Forename\", when(col(\"Initials\").isNotNull() & (length(trim(col(\"Initials\"))) > 0), concat(df[\"Elector Forename\"], lit(\" \"), df[\"Initials\"])).otherwise(df[\"Elector Forename\"]))\n",
					"    return df\n",
					"\n",
					"def main():\n",
					"    spark = create_spark_session()\n",
					"    storage_account = \"baubaisadfsastg\"\n",
					"    csv_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/files\"\n",
					"    excel_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/files\"\n",
					"    config_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/config/schema\"\n",
					"    transform_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/transformation\"\n",
					"    error_folder = f\"{transform_folder}/errors\"\n",
					"    mapping_file = f\"{config_folder}/col_mapping.json\"\n",
					"    try:\n",
					"        column_mapping = read_column_mapping(spark, mapping_file)\n",
					"        reverse_mapping = get_reverse_mapping(column_mapping)\n",
					"    except Exception as e:\n",
					"        logging.fatal(f\"Fatal error reading mapping file: {str(e)}\")\n",
					"        return\n",
					"    from notebookutils import mssparkutils\n",
					"    all_files = []\n",
					"    logging.info(\"Listing files using mssparkutils:\")\n",
					"    all_files.extend(list_files_in_folder(mssparkutils, csv_folder, '.csv'))\n",
					"    all_files.extend(list_files_in_folder(mssparkutils, excel_folder, ['.xlsx', '.xls']))\n",
					"    logging.info(f\"Total files to process: {len(all_files)}\")\n",
					"    results = [process_file(spark, file_path, reverse_mapping, transform_folder, error_folder) for file_path in all_files]\n",
					"    summary_df = spark.createDataFrame(results)\n",
					"    summary_df.write.mode(\"overwrite\").json(f\"{transform_folder}/processing_summary.json\")\n",
					"    logging.info(\"\\nProcessing Summary:\")\n",
					"    logging.info(f\"Total files processed: {len(results)}\")\n",
					"    logging.info(f\"Successful: {len([r for r in results if r['status'] == 'success'])}\")\n",
					"    logging.info(f\"Failed: {len([r for r in results if r['status'] == 'error'])}\")\n",
					"    successful_files = [r for r in results if r['status'] == 'success']\n",
					"    if successful_files:\n",
					"        logging.info(\"\\nExample Transformation Results:\")\n",
					"        sample_file = successful_files[0]['output']\n",
					"        sample_df = spark.read.parquet(sample_file)\n",
					"        logging.info(\"\\nSample of transformed data:\")\n",
					"        sample_df.select(\"Elector Surname\", \"Elector Forename\").show(5, truncate=False)\n",
					"\n",
					"def list_files_in_folder(mssparkutils, folder, extensions):\n",
					"    all_files = []\n",
					"    try:\n",
					"        logging.info(f\"Scanning folder: {folder}\")\n",
					"        subfolders = mssparkutils.fs.ls(folder)\n",
					"        logging.info(f\"Found {len(subfolders)} items in main folder\")\n",
					"        for subfolder_info in subfolders:\n",
					"            if subfolder_info.isDir:\n",
					"                logging.info(f\"Scanning subfolder: {subfolder_info.path}\")\n",
					"                try:\n",
					"                    subfolder_files = mssparkutils.fs.ls(subfolder_info.path)\n",
					"                    for file_info in subfolder_files:\n",
					"                        if not file_info.isDir and any(file_info.path.lower().endswith(ext) for ext in extensions):\n",
					"                            all_files.append(file_info.path)\n",
					"                            logging.info(f\"Added file: {file_info.path}\")\n",
					"                except Exception as e:\n",
					"                    logging.error(f\"Error listing files in subfolder {subfolder_info.path}: {str(e)}\")\n",
					"            elif any(subfolder_info.path.lower().endswith(ext) for ext in extensions):\n",
					"                all_files.append(subfolder_info.path)\n",
					"                logging.info(f\"Added file from main folder: {subfolder_info.path}\")\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error listing files: {str(e)}\")\n",
					"    return all_files\n",
					"\n",
					"if __name__ == \"__main__\":\n",
					"    main()"
				],
				"execution_count": null
			}
		]
	}
}