{
	"name": "L1_Tranfromation_MappingColumns",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f7d4d4b1-a3b8-4e75-9a92-0f419ea0b245"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import logging\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"import json\n",
					"from datetime import datetime\n",
					"import os\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"source": [
					"# Configure logging\n",
					"logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
					"\n",
					"def create_spark_session():\n",
					"    \"\"\"Create and return a Spark session\"\"\"\n",
					"    return SparkSession.builder \\\n",
					"        .appName(\"Electoral Data ETL\") \\\n",
					"        .getOrCreate()"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"source": [
					"def extract_la_code(file_path):\n",
					"    try:\n",
					"        path_parts = file_path.split('/')\n",
					"        for part in path_parts:\n",
					"            if '_' in part and len(part) > 9 and part[:8].isdigit() and part[8] == '_':\n",
					"                la_code = os.path.splitext(part[9:])[0]\n",
					"                logging.info(f\"Extracted LA_Code: {la_code}\")\n",
					"                return la_code\n",
					"        for i, part in enumerate(path_parts):\n",
					"            if part.lower() in ['csv', 'excel'] and i+1 < len(path_parts):\n",
					"                la_code = path_parts[i+1]\n",
					"                logging.info(f\"Extracted LA_Code from folder: {la_code}\")\n",
					"                return la_code\n",
					"        logging.warning(\"Could not extract LA_Code from path\")\n",
					"        return None\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error extracting LA_Code: {str(e)}\")\n",
					"        return None\n",
					"\n",
					"def read_column_mapping(spark, config_path):\n",
					"    \"\"\"Read and parse the column mapping configuration\"\"\"\n",
					"    try:\n",
					"        mapping_df = spark.read.text(config_path)\n",
					"        json_str = mapping_df.agg(concat_ws(\"\", collect_list(\"value\"))).collect()[0][0]\n",
					"        mapping_dict = json.loads(json_str)\n",
					"        return mapping_dict[\"mappings\"]\n",
					"    except Exception as e:\n",
					"        try:\n",
					"            mapping_rdd = spark.sparkContext.wholeTextFiles(config_path)\n",
					"            json_str = mapping_rdd.values().first()\n",
					"            mapping_dict = json.loads(json_str)\n",
					"            return mapping_dict[\"mappings\"]\n",
					"        except Exception as e2:\n",
					"            raise Exception(f\"Failed to read mapping file. Primary error: {str(e)}, Fallback error: {str(e2)}\")\n",
					"\n",
					"def get_reverse_mapping(column_mapping):\n",
					"    \"\"\"Create a reverse mapping for easy lookup\"\"\"\n",
					"    reverse_map = {}\n",
					"    for standard_name, details in column_mapping.items():\n",
					"        for alias in details[\"aliases\"]:\n",
					"            reverse_map[alias.lower()] = standard_name\n",
					"    return reverse_map\n",
					"\n",
					"def split_elector_name(df):\n",
					"    \"\"\"Split the 'Elector Name' field into surname and forename components.\"\"\"\n",
					"    if \"Elector Name\" in df.columns:\n",
					"        logging.info(\"Found 'Elector Name' column, splitting into surname and forename components\")\n",
					"        df = df.withColumn(\"name_parts\", split(col(\"Elector Name\"), \" \"))\n",
					"        df = df.withColumn(\"Elector Surname\", upper(trim(element_at(col(\"name_parts\"), 1))))\n",
					"        df = df.withColumn(\"Elector Forename\", \n",
					"                           when(size(col(\"name_parts\")) > 1,\n",
					"                                upper(trim(concat_ws(\" \", \n",
					"                                                     slice(col(\"name_parts\"), 2, size(col(\"name_parts\"))))))).otherwise(lit(None)))\n",
					"        df = df.drop(\"name_parts\")\n",
					"    return df\n",
					"\n",
					"def process_name_components(df):\n",
					"    \"\"\"Process name components separately\"\"\"\n",
					"    name_columns = [\"Elector Title\", \"Elector Forename\", \"Elector Surname\", \"Elector Middlename\", \"Suffix\", \"Initials\"]\n",
					"    for col_name in name_columns:\n",
					"        if col_name in df.columns:\n",
					"            df = df.withColumn(col_name, when(col(col_name).isNotNull(), upper(trim(col(col_name)))).otherwise(None))\n",
					"    return df\n",
					"\n",
					"def list_files(folder_path, extensions):\n",
					"    \"\"\"List all files with specific extensions in a folder\"\"\"\n",
					"    try:\n",
					"        files = mssparkutils.fs.ls(folder_path)\n",
					"        return [f.path for f in files if any(f.name.lower().endswith(ext) for ext in extensions)]\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error listing files: {str(e)}\")\n",
					"        return []\n",
					"\n",
					"def process_file(spark, file_path, reverse_mapping, output_path, error_path):\n",
					"    \"\"\"Process individual file with error handling\"\"\"\n",
					"    try:\n",
					"        file_name = os.path.basename(file_path)\n",
					"        if not any(file_name.lower().endswith(ext) for ext in ['.csv', '.xlsx', '.xls']):\n",
					"            logging.info(f\"Skipping unsupported file format: {file_path}\")\n",
					"            return {\"file\": file_name, \"status\": \"skipped\", \"output\": None}\n",
					"        \n",
					"        logging.info(f\"\\nProcessing file: {file_name} from path: {file_path}\")\n",
					"        la_code = extract_la_code(file_path)\n",
					"        creation_date = extract_creation_date(file_path)\n",
					"        df = read_file(spark, file_path)\n",
					"        \n",
					"        if df.rdd.isEmpty():\n",
					"            logging.warning(f\"File {file_path} is empty. Skipping processing.\")\n",
					"            return {\"file\": file_name, \"status\": \"skipped\", \"output\": None}\n",
					"        \n",
					"        logging.info(f\"Original columns: {df.columns}\")\n",
					"        logging.info(f\"Row count: {df.count()}\")\n",
					"        df = standardize_column_names(df, reverse_mapping)\n",
					"        logging.info(f\"Mapped columns: {df.columns}\")\n",
					"        df = transform_data(df, creation_date, la_code)\n",
					"        output_file = generate_output_filename(file_path, output_path)\n",
					"        temp_output_path = f\"{output_file}_temp\"\n",
					"        logging.info(f\"Saving to temporary path: {temp_output_path}\")\n",
					"        df.coalesce(1).write.mode(\"overwrite\").parquet(temp_output_path)\n",
					"        \n",
					"        # List the part files in the temporary output path\n",
					"        part_files = mssparkutils.fs.ls(temp_output_path)\n",
					"        part_file = next(f for f in part_files if f.name.startswith(\"part-\") and f.name.endswith(\".parquet\"))\n",
					"        \n",
					"        # Move the part file to the desired output file name\n",
					"        mssparkutils.fs.mv(part_file.path, output_file)\n",
					"        mssparkutils.fs.rm(temp_output_path, recurse=True)\n",
					"        \n",
					"        logging.info(f\"Saved to: {output_file}\")\n",
					"        return {\"file\": file_name, \"status\": \"success\", \"output\": output_file}\n",
					"    except Exception as e:\n",
					"        logging.error(f\"ERROR processing {file_path}: {str(e)}\")\n",
					"        error_report = {\"file\": file_name, \"status\": \"error\", \"error\": str(e)}\n",
					"        save_error_report(spark, error_report, error_path)\n",
					"        return error_report\n",
					"\n",
					"def extract_creation_date(file_path):\n",
					"    try:\n",
					"        path_parts = file_path.split('/')\n",
					"        for part in path_parts:\n",
					"            if len(part) >= 8 and part[:8].isdigit():\n",
					"                return datetime.strptime(part[:8], '%Y%m%d').date()\n",
					"        return None\n",
					"    except ValueError as e:\n",
					"        logging.error(f\"Could not parse date from path: {str(e)}\")\n",
					"        return None\n",
					"\n",
					"def read_file(spark, file_path):\n",
					"    if file_path.lower().endswith('.csv'):\n",
					"        logging.info(\"Reading as CSV file\")\n",
					"        return spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").csv(file_path)\n",
					"    elif file_path.lower().endswith(('.xlsx', '.xls')):\n",
					"        logging.info(\"Reading as Excel file\")\n",
					"        return read_excel_file(spark, file_path)\n",
					"    else:\n",
					"        raise ValueError(f\"Unsupported file format: {file_path}\")\n",
					"\n",
					"def read_excel_file(spark, file_path):\n",
					"    try:\n",
					"        return spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"treatEmptyValuesAsNulls\", \"true\").load(file_path)\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error reading Excel without sheet specification: {str(e)}\")\n",
					"        try:\n",
					"            return spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"treatEmptyValuesAsNulls\", \"true\").option(\"sheetName\", \"Sheet1\").load(file_path)\n",
					"        except Exception as e2:\n",
					"            logging.error(f\"Error reading Excel with Sheet1: {str(e2)}\")\n",
					"            return spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"treatEmptyValuesAsNulls\", \"true\").option(\"sheetIndex\", 0).load(file_path)\n",
					"\n",
					"def standardize_column_names(df, reverse_mapping):\n",
					"    for col in df.columns:\n",
					"        std_name = reverse_mapping.get(col.lower())\n",
					"        if std_name:\n",
					"            df = df.withColumnRenamed(col, std_name)\n",
					"            logging.info(f\"Renamed column: {col} -> {std_name}\")\n",
					"    return df\n",
					"\n",
					"def generate_output_filename(file_path, output_path):\n",
					"    path_parts = file_path.split('/')\n",
					"    base_folder = next((part for part in reversed(path_parts) if '_' in part and not part.endswith(('.csv', '.xlsx', '.xls'))), None)\n",
					"    output_filename = f\"{base_folder}.parquet\" if base_folder else f\"{os.path.splitext(os.path.basename(file_path))[0]}.parquet\"\n",
					"    return f\"{output_path}/{output_filename}\"\n",
					"\n",
					"def save_error_report(spark, error_report, error_path):\n",
					"    error_file = f\"{error_path}/{os.path.splitext(error_report['file'])[0]}_error.json\"\n",
					"    try:\n",
					"        spark.createDataFrame([error_report]).write.mode(\"overwrite\").json(error_file)\n",
					"        logging.info(f\"Error report saved to: {error_file}\")\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Could not save error report: {str(e)}\")\n",
					"\n",
					"def transform_data(df, creation_date, la_code=None):\n",
					"    for col_name in df.columns:\n",
					"        if isinstance(df.schema[col_name].dataType, StringType):\n",
					"            logging.info(f\"Cleaning text column: {col_name}\")\n",
					"            df = df.withColumn(col_name, upper(trim(df[col_name])))\n",
					"    df = split_elector_name(df)\n",
					"    df = process_name_components(df)\n",
					"    if \"Elector Forename\" in df.columns:\n",
					"        df = add_suffix(df)\n",
					"        df = add_middlename(df)\n",
					"        df = add_initials(df)\n",
					"    if creation_date:\n",
					"        logging.info(f\"Adding creation date: {creation_date}\")\n",
					"        df = df.withColumn(\"CreationDate\", lit(creation_date.isoformat()))\n",
					"    df = df.withColumn(\"LA_Code\", lit(la_code) if la_code else lit(None))\n",
					"    return df\n",
					"\n",
					"def add_suffix(df):\n",
					"    if \"Suffix\" in df.columns:\n",
					"        logging.info(\"Adding Suffix to Elector Forename\")\n",
					"        df = df.withColumn(\"Elector Forename\", when(col(\"Suffix\").isNotNull() & (length(trim(col(\"Suffix\"))) > 0), concat(df[\"Elector Forename\"], lit(\" \"), df[\"Suffix\"])).otherwise(df[\"Elector Forename\"]))\n",
					"    return df\n",
					"\n",
					"def add_middlename(df):\n",
					"    if \"Elector Middlename\" in df.columns:\n",
					"        logging.info(\"Adding Middlename to Elector Forename\")\n",
					"        df = df.withColumn(\"Elector Forename\", when(col(\"Elector Middlename\").isNotNull() & (length(trim(col(\"Elector Middlename\"))) > 0), concat(df[\"Elector Forename\"], lit(\" \"), df[\"Elector Middlename\"])).otherwise(df[\"Elector Forename\"]))\n",
					"    return df\n",
					"\n",
					"def add_initials(df):\n",
					"    if \"Initials\" in df.columns:\n",
					"        logging.info(\"Adding Initials to Elector Forename\")\n",
					"        df = df.withColumn(\"Elector Forename\", when(col(\"Initials\").isNotNull() & (length(trim(col(\"Initials\"))) > 0), concat(df[\"Elector Forename\"], lit(\" \"), df[\"Initials\"])).otherwise(df[\"Elector Forename\"]))\n",
					"    return df\n",
					"\n",
					"def process_file(source_path, date_folder, third_folder, file_name, storage_account, mapped_files):\n",
					"    \"\"\"Process CSV or Excel file with corrected folder structure\"\"\"\n",
					"    try:\n",
					"        # Create the folder name in the format YYYYMMDD_LA-Name\n",
					"        folder_name = f\"{date_folder}_{third_folder}\"\n",
					"        file_type = get_file_type(source_path)\n",
					"        \n",
					"        if not file_type:\n",
					"            return False, None\n",
					"        \n",
					"        # Determine the destination path\n",
					"        dest_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/files/{folder_name}.{file_type}\"\n",
					"        \n",
					"        # Check if the file is already mapped\n",
					"        if dest_path in mapped_files:\n",
					"            logging.info(f\"File {dest_path} is already mapped, skipping processing.\")\n",
					"            return False, None\n",
					"        \n",
					"        # Read the file into a DataFrame\n",
					"        if file_type == 'excel':\n",
					"            df = spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").load(source_path)\n",
					"        elif file_type == 'csv':\n",
					"            df = spark.read.option(\"header\", \"true\").csv(source_path)\n",
					"        \n",
					"        # Transform the data\n",
					"        df = transform_data(df, date_folder, third_folder)\n",
					"        \n",
					"        # Save the DataFrame as a Parquet file in the mapping folder\n",
					"        mapping_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/mapping/{folder_name}.parquet\"\n",
					"        df.write.mode(\"overwrite\").parquet(mapping_path)\n",
					"        \n",
					"        logging.info(f\"Saved mapped file to: {mapping_path}\")\n",
					"        return True, mapping_path\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error processing file {source_path}: {str(e)}\")\n",
					"        return False, None\n",
					"\n",
					"def read_mapping(mapping_path):\n",
					"    \"\"\"Read all mapping files in the directory and return a set of mapped files\"\"\"\n",
					"    try:\n",
					"        files = mssparkutils.fs.ls(mapping_path)\n",
					"        mapped_files = set()\n",
					"        for file_info in files:\n",
					"            if file_info.name.endswith('.json'):\n",
					"                mapping_df = spark.read.json(file_info.path)\n",
					"                mapped_files.update(mapping_df.select(\"file\").rdd.flatMap(lambda x: x).collect())\n",
					"        return mapped_files\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error reading mapping files: {str(e)}\")\n",
					"        return set()\n",
					"\n",
					"def process_folder(path, storage_account, moved_files):\n",
					"    \"\"\"Process the 'files' folder and return all files\"\"\"\n",
					"    all_files = []\n",
					"    try:\n",
					"        files = mssparkutils.fs.ls(path)\n",
					"        for file_info in files:\n",
					"            if not file_info.isDir and should_process_file(file_info.path):\n",
					"                logging.info(f\"Found file: {file_info.path}\")\n",
					"                all_files.append(file_info.path)\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error accessing path {path}: {str(e)}\")\n",
					"    return all_files\n",
					"\n",
					"def print_detailed_summary(moved_files):\n",
					"    \"\"\"Print detailed summary of moved files\"\"\"\n",
					"    print(\"\\nSummary of Moved Files:\")\n",
					"    print(f\"Data Files Successfully Moved: {len(moved_files['data_success'])}\")\n",
					"    for file in moved_files['data_success']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Metadata Files Successfully Moved: {len(moved_files['metadata_success'])}\")\n",
					"    for file in moved_files['metadata_success']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Failed Files: {len(moved_files['failed'])}\")\n",
					"    for file in moved_files['failed']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Quarantined Files: {len(moved_files['quarantine'])}\")\n",
					"    for file in moved_files['quarantine']:\n",
					"        print(f\"  - {file}\")\n",
					"\n",
					"def main():\n",
					"    storage_account = \"baubaisadfsastg\"\n",
					"    source_path = f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net\"\n",
					"    log_file_path = f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net/processed_files_log.json\"\n",
					"    mapping_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/mapping/mapping.json\"\n",
					"    \n",
					"    moved_files = {\n",
					"        'data_success': [],\n",
					"        'metadata_success': [],\n",
					"        'failed': [],\n",
					"        'quarantine': []\n",
					"    }\n",
					"    \n",
					"    logging.info(f\"Scanning source path: {source_path}\")\n",
					"    files = process_folder(source_path, storage_account, moved_files)\n",
					"    logging.info(f\"Found {len(files)} files to process\")\n",
					"    \n",
					"    # Read the log of processed files\n",
					"    try:\n",
					"        processed_files_log = spark.read.json(log_file_path).select(\"file\").rdd.flatMap(lambda x: x).collect()\n",
					"        logging.info(f\"Read processed files log with {len(processed_files_log)} entries\")\n",
					"    except Exception as e:\n",
					"        logging.warning(f\"Could not read processed files log: {str(e)}\")\n",
					"        processed_files_log = []\n",
					"    \n",
					"    # Read the mapping of already processed files\n",
					"    mapped_files = read_mapping(mapping_path)\n",
					"    logging.info(f\"Read mapping with {len(mapped_files)} entries\")\n",
					"    \n",
					"    # Filter out files that have already been processed\n",
					"    new_files = [file for file in files if file not in processed_files_log]\n",
					"    logging.info(f\"New files to process: {len(new_files)}\")\n",
					"    \n",
					"    for file_path in new_files:\n",
					"        try:\n",
					"            file_name = file_path.split('/')[-1]\n",
					"            \n",
					"            if is_metadata_file(file_path):\n",
					"                logging.info(f\"Processing metadata file: {file_path}\")\n",
					"                success, new_path = process_metadata_file(file_path, file_name, storage_account)\n",
					"                if success:\n",
					"                    moved_files['metadata_success'].append(new_path)\n",
					"                else:\n",
					"                    moved_files['failed'].append(f\"{file_path} (metadata move failed)\")\n",
					"                continue\n",
					"            \n",
					"            if not should_process_file(file_path):\n",
					"                logging.info(f\"Skipping unsupported file format: {file_path}\")\n",
					"                continue\n",
					"            \n",
					"            date_folder, third_folder = get_folder_parts(file_path)\n",
					"            if date_folder and third_folder:\n",
					"                logging.info(f\"Processing data file: {file_path}\")\n",
					"                success, new_path = process_file(file_path, date_folder, third_folder, \n",
					"                                                 file_name, storage_account, mapped_files)\n",
					"                if success:\n",
					"                    moved_files['data_success'].append(new_path)\n",
					"                else:\n",
					"                    moved_files['failed'].append(f\"{file_path} (processing failed)\")\n",
					"            else:\n",
					"                logging.warning(f\"Invalid folder structure for file: {file_path}\")\n",
					"                moved_files['failed'].append(f\"{file_path} (invalid folder structure)\")\n",
					"                \n",
					"        except Exception as e:\n",
					"            logging.error(f\"Error processing {file_path}: {str(e)}\")\n",
					"            moved_files['failed'].append(f\"{file_path} (processing error)\")\n",
					"            continue\n",
					"    \n",
					"    print_detailed_summary(moved_files)\n",
					"    \n",
					"    # Update the log of processed files\n",
					"    new_processed_files_log = spark.createDataFrame([(file,) for file in new_files], [\"file\"])\n",
					"    if processed_files_log:\n",
					"        existing_log_df = spark.createDataFrame([(file,) for file in processed_files_log], [\"file\"])\n",
					"        updated_log_df = existing_log_df.union(new_processed_files_log).distinct()\n",
					"    else:\n",
					"        updated_log_df = new_processed_files_log\n",
					"    updated_log_df.write.mode(\"overwrite\").json(log_file_path)\n",
					"    logging.info(\"Updated processed files log\")\n",
					"\n",
					"if __name__ == \"__main__\":\n",
					"    main()"
				],
				"execution_count": 34
			}
		]
	}
}