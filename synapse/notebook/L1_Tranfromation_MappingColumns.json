{
	"name": "L1_Tranfromation_MappingColumns",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "565b2114-0c99-430b-9d96-30d302b9f68f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"import json\n",
					"from datetime import datetime\n",
					"import os"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"def create_spark_session():\n",
					"    \"\"\"Create and return a Spark session\"\"\"\n",
					"    return SparkSession.builder \\\n",
					"        .appName(\"Electoral Data ETL\") \\\n",
					"        .getOrCreate()\n",
					""
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"source": [
					"def extract_la_code(file_path):\n",
					"    \n",
					"    try:\n",
					"        # Split the path into parts\n",
					"        path_parts = file_path.split('/')\n",
					"        \n",
					"        # Look for the part that matches the pattern YYYYMMDD_CODE\n",
					"        for part in path_parts:\n",
					"            if '_' in part:\n",
					"                # Check if it starts with date pattern (8 digits followed by underscore)\n",
					"                if len(part) > 9 and part[:8].isdigit() and part[8] == '_':\n",
					"                    # Extract the part after the underscore\n",
					"                    la_code = os.path.splitext(part[9:])[0]\n",
					"                    print(f\"Extracted LA_Code: {la_code}\")\n",
					"                    return la_code\n",
					"        \n",
					"        # If no match found in path parts, try with folder names\n",
					"        for i, part in enumerate(path_parts):\n",
					"            if part.lower() == 'csv' or part.lower() == 'excel':\n",
					"                # Check if there's a next part that could be the LA folder\n",
					"                if i+1 < len(path_parts):\n",
					"                    la_code = path_parts[i+1]\n",
					"                    print(f\"Extracted LA_Code from folder: {la_code}\")\n",
					"                    return la_code\n",
					"        \n",
					"        # If still not found, return None\n",
					"        print(\"Could not extract LA_Code from path\")\n",
					"        return None\n",
					"    except Exception as e:\n",
					"        print(f\"Error extracting LA_Code: {str(e)}\")\n",
					"\n",
					"def read_column_mapping(spark, config_path):\n",
					"    \"\"\"Read and parse the column mapping configuration\"\"\"\n",
					"    try:\n",
					"        mapping_df = spark.read.text(config_path)\n",
					"        json_str = mapping_df.agg(concat_ws(\"\", collect_list(\"value\"))).collect()[0][0]\n",
					"        mapping_dict = json.loads(json_str)\n",
					"        return mapping_dict[\"mappings\"]\n",
					"    except Exception as e:\n",
					"        try:\n",
					"            mapping_rdd = spark.sparkContext.wholeTextFiles(config_path)\n",
					"            json_str = mapping_rdd.values().first()\n",
					"            mapping_dict = json.loads(json_str)\n",
					"            return mapping_dict[\"mappings\"]\n",
					"        except Exception as e2:\n",
					"            raise Exception(f\"Failed to read mapping file. Primary error: {str(e)}, Fallback error: {str(e2)}\")\n",
					"\n",
					"def get_reverse_mapping(column_mapping):\n",
					"    \"\"\"Create a reverse mapping for easy lookup\"\"\"\n",
					"    reverse_map = {}\n",
					"    for standard_name, variations in column_mapping.items():\n",
					"        for variation in variations:\n",
					"            reverse_map[variation.lower()] = standard_name\n",
					"    return reverse_map\n",
					"\n",
					"def split_elector_name(df):\n",
					"    \"\"\"\n",
					"    Split the 'Elector Name' field into surname and forename components.\n",
					"    Format: SURNAME FORENAME [MIDDLE NAMES...] [SUFFIX]\n",
					"    \"\"\"\n",
					"    if \"Elector Name\" in df.columns:\n",
					"        print(\"Found 'Elector Name' column, splitting into surname and forename components\")\n",
					"        \n",
					"        # Split the name using space as delimiter\n",
					"        df = df.withColumn(\"name_parts\", split(col(\"Elector Name\"), \" \"))\n",
					"        \n",
					"        # Extract the first part as surname\n",
					"        df = df.withColumn(\"Elector Surname\", upper(trim(element_at(col(\"name_parts\"), 1))))\n",
					"        \n",
					"        # Take remaining parts as Elector Forename\n",
					"        df = df.withColumn(\"Elector Forename\", \n",
					"                          when(size(col(\"name_parts\")) > 1,\n",
					"                               upper(trim(concat_ws(\" \", \n",
					"                                                  slice(col(\"name_parts\"), 2, size(col(\"name_parts\")))\n",
					"                                                  )))).otherwise(lit(None)))\n",
					"        \n",
					"        # Drop the temporary column\n",
					"        df = df.drop(\"name_parts\")\n",
					"        \n",
					"        # Print debug info\n",
					"        print(\"Sample of split names:\")\n",
					"        df.select(\"Elector Name\", \"Elector Surname\", \"Elector Forename\").show(5, truncate=False)\n",
					"    \n",
					"    return df\n",
					"\n",
					"def process_name_components(df):\n",
					"    \"\"\"Process name components separately\"\"\"\n",
					"    \n",
					"    # Clean and standardize each component if they exist\n",
					"    if \"Elector Title\" in df.columns:\n",
					"        df = df.withColumn(\"Elector Title\", \n",
					"                          when(col(\"Elector Title\").isNotNull(),\n",
					"                               upper(trim(col(\"Elector Title\")))).otherwise(None))\n",
					"    \n",
					"    if \"Elector Forename\" in df.columns:\n",
					"        df = df.withColumn(\"Elector Forename\", \n",
					"                          when(col(\"Elector Forename\").isNotNull(),\n",
					"                               upper(trim(col(\"Elector Forename\")))).otherwise(None))\n",
					"    \n",
					"    if \"Elector Surname\" in df.columns:\n",
					"        df = df.withColumn(\"Elector Surname\", \n",
					"                          when(col(\"Elector Surname\").isNotNull(),\n",
					"                               upper(trim(col(\"Elector Surname\")))).otherwise(None))\n",
					"    \n",
					"    if \"Elector Middlename\" in df.columns:\n",
					"        df = df.withColumn(\"Elector Middlename\", \n",
					"                          when(col(\"Elector Middlename\").isNotNull(),\n",
					"                               upper(trim(col(\"Elector Middlename\")))).otherwise(None))\n",
					"    \n",
					"    if \"Suffix\" in df.columns:\n",
					"        df = df.withColumn(\"Suffix\", \n",
					"                          when(col(\"Suffix\").isNotNull(),\n",
					"                               upper(trim(col(\"Suffix\")))).otherwise(None))\n",
					"    \n",
					"    if \"Initials\" in df.columns:\n",
					"        df = df.withColumn(\"Initials\", \n",
					"                          when(col(\"Initials\").isNotNull(),\n",
					"                               upper(trim(col(\"Initials\")))).otherwise(None))\n",
					"\n",
					"    return df\n",
					"\n",
					"def list_files(spark, folder_path, file_extension):\n",
					"    \"\"\"List all files with specific extension in a folder\"\"\"\n",
					"    try:\n",
					"        # Use glob pattern to match files with the given extension\n",
					"        pattern = f\"{folder_path}/*.{file_extension}\"\n",
					"        print(f\"Looking for files with pattern: {pattern}\")\n",
					"        \n",
					"        # Use spark's textFile method to get the list of files\n",
					"        files = spark._jsc.textFile(pattern, 1).keySet().toArray()\n",
					"        return [f for f in files]\n",
					"    except Exception as e:\n",
					"        print(f\"Error listing files: {str(e)}\")\n",
					"        return []\n",
					"\n",
					"def process_file(spark, file_path, reverse_mapping, output_path, error_path):\n",
					"    \"\"\"Process individual file with error handling\"\"\"\n",
					"    try:\n",
					"        # Extract file name for reporting\n",
					"        file_name = os.path.basename(file_path)\n",
					"        print(f\"\\nProcessing file: {file_name} from path: {file_path}\")\n",
					"        \n",
					"        # Extract LA Code from file path\n",
					"        la_code = extract_la_code(file_path)\n",
					"        \n",
					"        # Extract creation date from path instead of filename\n",
					"        # Look for date pattern in the parent folder\n",
					"        try:\n",
					"            # Parse the path to extract folder structure\n",
					"            path_parts = file_path.split('/')\n",
					"            \n",
					"            # Look for a part that starts with a date pattern (YYYYMMDD)\n",
					"            date_part = None\n",
					"            for part in path_parts:\n",
					"                if len(part) >= 8 and part[:8].isdigit():\n",
					"                    date_part = part[:8]\n",
					"                    break\n",
					"            \n",
					"            # If found, parse it as a date\n",
					"            if date_part:\n",
					"                creation_date = datetime.strptime(date_part, '%Y%m%d').date()\n",
					"                print(f\"Extracted creation date from path: {creation_date}\")\n",
					"            else:\n",
					"                # Default to None if no date found\n",
					"                creation_date = None\n",
					"                print(\"No date found in path\")\n",
					"        except ValueError as e:\n",
					"            print(f\"Could not parse date from path: {str(e)}\")\n",
					"            creation_date = None\n",
					"\n",
					"        # Read the file based on extension\n",
					"        if file_path.lower().endswith('.csv'):\n",
					"            print(\"Reading as CSV file\")\n",
					"            df = spark.read.option(\"header\", \"true\") \\\n",
					"                         .option(\"inferSchema\", \"true\") \\\n",
					"                         .csv(file_path)\n",
					"        elif file_path.lower().endswith(('.xlsx', '.xls')):\n",
					"            print(\"Reading as Excel file\")\n",
					"            # Try multiple sheets if the first one fails\n",
					"            try:\n",
					"                # First try without specifying sheet\n",
					"                df = spark.read.format(\"com.crealytics.spark.excel\") \\\n",
					"                             .option(\"header\", \"true\") \\\n",
					"                             .option(\"inferSchema\", \"true\") \\\n",
					"                             .option(\"treatEmptyValuesAsNulls\", \"true\") \\\n",
					"                             .load(file_path)\n",
					"            except Exception as sheet_error:\n",
					"                print(f\"Error reading Excel without sheet specification: {str(sheet_error)}\")\n",
					"                try:\n",
					"                    # Try with 'Sheet1' explicitly\n",
					"                    df = spark.read.format(\"com.crealytics.spark.excel\") \\\n",
					"                                 .option(\"header\", \"true\") \\\n",
					"                                 .option(\"inferSchema\", \"true\") \\\n",
					"                                 .option(\"treatEmptyValuesAsNulls\", \"true\") \\\n",
					"                                 .option(\"sheetName\", \"Sheet1\") \\\n",
					"                                 .load(file_path)\n",
					"                except Exception as sheet1_error:\n",
					"                    print(f\"Error reading Excel with Sheet1: {str(sheet1_error)}\")\n",
					"                    # Try with sheetIndex=0\n",
					"                    df = spark.read.format(\"com.crealytics.spark.excel\") \\\n",
					"                                 .option(\"header\", \"true\") \\\n",
					"                                 .option(\"inferSchema\", \"true\") \\\n",
					"                                 .option(\"treatEmptyValuesAsNulls\", \"true\") \\\n",
					"                                 .option(\"sheetIndex\", 0) \\\n",
					"                                 .load(file_path)\n",
					"        else:\n",
					"            raise ValueError(f\"Unsupported file format: {file_path}\")\n",
					"\n",
					"        # Show original column names for debugging\n",
					"        print(f\"Original columns: {df.columns}\")\n",
					"        print(f\"Row count: {df.count()}\")\n",
					"\n",
					"        # Standardize column names\n",
					"        for col in df.columns:\n",
					"            std_name = reverse_mapping.get(col.lower())\n",
					"            if std_name:\n",
					"                df = df.withColumnRenamed(col, std_name)\n",
					"                print(f\"Renamed column: {col} -> {std_name}\")\n",
					"\n",
					"        # Show mapped column names\n",
					"        print(f\"Mapped columns: {df.columns}\")\n",
					"\n",
					"        # Apply transformations\n",
					"        df = transform_data(df, creation_date, la_code)\n",
					"\n",
					"        # Create consistent output file name based on original path\n",
					"        # Extract meaningful parts from the path\n",
					"        path_parts = file_path.split('/')\n",
					"        \n",
					"        # Get the base folder name (usually contains the date and LA name)\n",
					"        base_folder = None\n",
					"        for part in reversed(path_parts):\n",
					"            if '_' in part and not part.endswith('.csv') and not part.endswith('.xlsx') and not part.endswith('.xls'):\n",
					"                base_folder = part\n",
					"                break\n",
					"        \n",
					"        if base_folder:\n",
					"            output_filename = f\"{base_folder}.parquet\"\n",
					"        else:\n",
					"            # Fallback to original filename without extension\n",
					"            output_filename = f\"{os.path.splitext(file_name)[0]}.parquet\"\n",
					"        \n",
					"        output_file = f\"{output_path}/{output_filename}\"\n",
					"        print(f\"Saving to: {output_file}\")\n",
					"        df.write.mode(\"overwrite\").parquet(output_file)\n",
					"\n",
					"        return {\n",
					"            \"file\": file_name,\n",
					"            \"status\": \"success\",\n",
					"            \"output\": output_file\n",
					"        }\n",
					"\n",
					"    except Exception as e:\n",
					"        print(f\"ERROR processing {file_path}: {str(e)}\")\n",
					"        import traceback\n",
					"        traceback.print_exc()\n",
					"        \n",
					"        error_report = {\n",
					"            \"file\": file_name,\n",
					"            \"status\": \"error\",\n",
					"            \"error\": str(e)\n",
					"        }\n",
					"        \n",
					"        # Save error report\n",
					"        error_file = f\"{error_path}/{os.path.splitext(file_name)[0]}_error.json\"\n",
					"        try:\n",
					"            spark.createDataFrame([error_report]).write.mode(\"overwrite\").json(error_file)\n",
					"            print(f\"Error report saved to: {error_file}\")\n",
					"        except Exception as e2:\n",
					"            print(f\"Could not save error report: {str(e2)}\")\n",
					"        \n",
					"        return error_report\n",
					"\n",
					"def transform_data(df, creation_date, la_code=None):\n",
					"    \"\"\"Apply all required transformations to the dataframe\"\"\"\n",
					"    \n",
					"    # Clean and capitalize text columns with explicit checks for StringType()\n",
					"    for col_name in df.columns:\n",
					"        col_type = df.schema[col_name].dataType\n",
					"        if isinstance(col_type, StringType):\n",
					"            print(f\"Cleaning text column: {col_name}\")\n",
					"            df = df.withColumn(col_name, upper(trim(df[col_name])))\n",
					"\n",
					"    # Split Elector Name if it exists (must be done before processing name components)\n",
					"    df = split_elector_name(df)\n",
					"    \n",
					"    # Process name components\n",
					"    df = process_name_components(df)\n",
					"\n",
					"    # Apply the required transformations for specific columns\n",
					"    if \"Elector Forename\" in df.columns:\n",
					"        # Add Suffix if exists\n",
					"        if \"Suffix\" in df.columns:\n",
					"            print(\"Adding Suffix to Elector Forename\")\n",
					"            df = df.withColumn(\n",
					"                \"Elector Forename\",\n",
					"                when(col(\"Suffix\").isNotNull() & (length(trim(col(\"Suffix\"))) > 0), \n",
					"                     concat(df[\"Elector Forename\"], lit(\" \"), df[\"Suffix\"]))\n",
					"                .otherwise(df[\"Elector Forename\"])\n",
					"            )\n",
					"\n",
					"        # Add Middle Name if exists\n",
					"        if \"Elector Middlename\" in df.columns:\n",
					"            print(\"Adding Middlename to Elector Forename\")\n",
					"            df = df.withColumn(\n",
					"                \"Elector Forename\",\n",
					"                when(col(\"Elector Middlename\").isNotNull() & (length(trim(col(\"Elector Middlename\"))) > 0),\n",
					"                     concat(df[\"Elector Forename\"], lit(\" \"), df[\"Elector Middlename\"]))\n",
					"                .otherwise(df[\"Elector Forename\"])\n",
					"            )\n",
					"\n",
					"        # Add Initials if exists\n",
					"        if \"Initials\" in df.columns:\n",
					"            print(\"Adding Initials to Elector Forename\")\n",
					"            df = df.withColumn(\n",
					"                \"Elector Forename\",\n",
					"                when(col(\"Initials\").isNotNull() & (length(trim(col(\"Initials\"))) > 0),\n",
					"                     concat(df[\"Elector Forename\"], lit(\" \"), df[\"Initials\"]))\n",
					"                .otherwise(df[\"Elector Forename\"])\n",
					"            )\n",
					"\n",
					"    # Add creation date\n",
					"    if creation_date:\n",
					"        print(f\"Adding creation date: {creation_date}\")\n",
					"        df = df.withColumn(\"CreationDate\", lit(creation_date.isoformat()))\n",
					"    \n",
					"    # Add LA_Code column\n",
					"    if la_code:\n",
					"        print(f\"Adding LA_Code: {la_code}\")\n",
					"        df = df.withColumn(\"LA_Code\", lit(la_code))\n",
					"    else:\n",
					"        print(\"No LA_Code provided, setting as NULL\")\n",
					"        df = df.withColumn(\"LA_Code\", lit(None))\n",
					"\n",
					"    return df\n",
					"\n",
					"def main():\n",
					"    # Initialize Spark\n",
					"    spark = create_spark_session()\n",
					"\n",
					"    # Storage paths from configuration \n",
					"    storage_account = \"baubaisadfsastg\"\n",
					"    csv_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/files\"\n",
					"    excel_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/files\"\n",
					"    config_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/config/schema\"\n",
					"    transform_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/transformation\"\n",
					"    error_folder = f\"{transform_folder}/errors\"\n",
					"\n",
					"    # Read column mapping\n",
					"    mapping_file = f\"{config_folder}/col_mapping.json\"\n",
					"    try:\n",
					"        column_mapping = read_column_mapping(spark, mapping_file)\n",
					"        reverse_mapping = get_reverse_mapping(column_mapping)\n",
					"    except Exception as e:\n",
					"        print(f\"Fatal error reading mapping file: {str(e)}\")\n",
					"        return\n",
					"\n",
					"    # Get files using direct method that was working in the previous script\n",
					"    from notebookutils import mssparkutils\n",
					"    \n",
					"    all_files = []\n",
					"    print(\"Listing files using mssparkutils:\")\n",
					"    \n",
					"    # CSV files\n",
					"    try:\n",
					"        # List the folders inside the CSV directory first\n",
					"        print(f\"Scanning CSV folder: {csv_folder}\")\n",
					"        csv_subfolders = mssparkutils.fs.ls(csv_folder)\n",
					"        print(f\"Found {len(csv_subfolders)} items in CSV main folder\")\n",
					"        \n",
					"        # For each subfolder, look for CSV files\n",
					"        for subfolder_info in csv_subfolders:\n",
					"            if subfolder_info.isDir:\n",
					"                print(f\"Scanning subfolder: {subfolder_info.path}\")\n",
					"                try:\n",
					"                    subfolder_files = mssparkutils.fs.ls(subfolder_info.path)\n",
					"                    for file_info in subfolder_files:\n",
					"                        if not file_info.isDir and file_info.path.lower().endswith('.csv'):\n",
					"                            all_files.append(file_info.path)\n",
					"                            print(f\"Added CSV file: {file_info.path}\")\n",
					"                except Exception as e:\n",
					"                    print(f\"Error listing files in subfolder {subfolder_info.path}: {str(e)}\")\n",
					"            elif subfolder_info.path.lower().endswith('.csv'):\n",
					"                # In case there are CSV files directly in the main folder\n",
					"                all_files.append(subfolder_info.path)\n",
					"                print(f\"Added CSV file from main folder: {subfolder_info.path}\")\n",
					"    except Exception as e:\n",
					"        print(f\"Error listing CSV files: {str(e)}\")\n",
					"    \n",
					"    # Excel files\n",
					"    try:\n",
					"        print(f\"Scanning Excel folder: {excel_folder}\")\n",
					"        # List the folders inside the Excel directory first\n",
					"        excel_subfolders = mssparkutils.fs.ls(excel_folder)\n",
					"        print(f\"Found {len(excel_subfolders)} items in Excel main folder\")\n",
					"        \n",
					"        # For each subfolder, look for Excel files\n",
					"        for subfolder_info in excel_subfolders:\n",
					"            if subfolder_info.isDir:\n",
					"                print(f\"Scanning subfolder: {subfolder_info.path}\")\n",
					"                try:\n",
					"                    subfolder_files = mssparkutils.fs.ls(subfolder_info.path)\n",
					"                    for file_info in subfolder_files:\n",
					"                        if not file_info.isDir and (file_info.path.lower().endswith('.xlsx') or file_info.path.lower().endswith('.xls')):\n",
					"                            all_files.append(file_info.path)\n",
					"                            print(f\"Added Excel file: {file_info.path}\")\n",
					"                except Exception as e:\n",
					"                    print(f\"Error listing files in subfolder {subfolder_info.path}: {str(e)}\")\n",
					"            elif subfolder_info.path.lower().endswith('.xlsx') or subfolder_info.path.lower().endswith('.xls'):\n",
					"                # In case there are Excel files directly in the main folder\n",
					"                all_files.append(subfolder_info.path)\n",
					"                print(f\"Added Excel file from main folder: {subfolder_info.path}\")\n",
					"    except Exception as e:\n",
					"        print(f\"Error listing Excel files: {str(e)}\")\n",
					"    \n",
					"    print(f\"Total files to process: {len(all_files)}\")\n",
					"\n",
					"    # Process all files\n",
					"    results = []\n",
					"    for file_path in all_files:\n",
					"        result = process_file(\n",
					"            spark,\n",
					"            file_path,\n",
					"            reverse_mapping,\n",
					"            transform_folder,\n",
					"            error_folder\n",
					"        )\n",
					"        results.append(result)\n",
					"\n",
					"    # Generate summary report\n",
					"    summary_df = spark.createDataFrame(results)\n",
					"    summary_df.write.mode(\"overwrite\").json(f\"{transform_folder}/processing_summary.json\")\n",
					"\n",
					"    # Print summary\n",
					"    print(\"\\nProcessing Summary:\")\n",
					"    print(f\"Total files processed: {len(results)}\")\n",
					"    print(f\"Successful: {len([r for r in results if r['status'] == 'success'])}\")\n",
					"    print(f\"Failed: {len([r for r in results if r['status'] == 'error'])}\")\n",
					"\n",
					"    # Show some example transformations if any successful files\n",
					"    successful_files = [r for r in results if r['status'] == 'success']\n",
					"    if successful_files:\n",
					"        print(\"\\nExample Transformation Results:\")\n",
					"        sample_file = successful_files[0]['output']\n",
					"        sample_df = spark.read.parquet(sample_file)\n",
					"        print(\"\\nSample of transformed data:\")\n",
					"        sample_df.select(\"Elector Surname\", \"Elector Forename\").show(5, truncate=False)\n",
					"\n",
					"if __name__ == \"__main__\":\n",
					"    main()"
				],
				"execution_count": 23
			}
		]
	}
}