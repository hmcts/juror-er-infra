{
	"name": "L1_Tranfromation_MappingColumns",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "316688be-e304-45e1-8580-c089dc270df7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import upper, trim, concat, coalesce, lit, current_timestamp, col as spark_col, to_date\n",
					"from pyspark.sql.types import *\n",
					"import json\n",
					"from datetime import datetime\n",
					"import os\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"def create_spark_session():\n",
					"    \"\"\"Create and return a Spark session\"\"\"\n",
					"    return SparkSession.builder \\\n",
					"        .appName(\"Electoral Data ETL\") \\\n",
					"        .getOrCreate()\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"def get_spark_type(type_info):\n",
					"    \"\"\"Convert configuration type to Spark type\"\"\"\n",
					"    type_mapping = {\n",
					"        \"string\": StringType(),\n",
					"        \"date\": DateType(),\n",
					"        \"integer\": IntegerType(),\n",
					"        \"long\": LongType(),\n",
					"        \"double\": DoubleType(),\n",
					"        \"boolean\": BooleanType()\n",
					"    }\n",
					"    return type_mapping.get(type_info.get(\"type\", \"string\"), StringType())\n",
					"\n",
					"def read_column_mapping(spark, config_path):\n",
					"    \"\"\"Read and parse the column mapping configuration\"\"\"\n",
					"    try:\n",
					"        # Read the JSON file as a single text file\n",
					"        mapping_df = spark.read.text(config_path)\n",
					"        \n",
					"        # Combine all lines into a single string\n",
					"        json_str = mapping_df.agg(concat_ws(\"\", collect_list(spark_col(\"value\")))).collect()[0][0]\n",
					"        \n",
					"        # Parse the JSON string\n",
					"        mapping_dict = json.loads(json_str)\n",
					"        return mapping_dict[\"mappings\"]\n",
					"    except Exception as e:\n",
					"        print(f\"Error reading mapping file: {str(e)}\")\n",
					"        # Fallback: try reading directly using wholeTextFiles\n",
					"        try:\n",
					"            mapping_rdd = spark.sparkContext.wholeTextFiles(config_path)\n",
					"            json_str = mapping_rdd.values().first()\n",
					"            mapping_dict = json.loads(json_str)\n",
					"            return mapping_dict[\"mappings\"]\n",
					"        except Exception as e2:\n",
					"            raise Exception(f\"Failed to read mapping file. Primary error: {str(e)}, Fallback error: {str(e2)}\")\n",
					"\n",
					"def get_reverse_mapping(column_mapping):\n",
					"    \"\"\"Create a reverse mapping for easy lookup\"\"\"\n",
					"    reverse_map = {}\n",
					"    for standard_name, col_info in column_mapping.items():\n",
					"        for alias in col_info.get(\"aliases\", []):\n",
					"            reverse_map[alias.lower()] = standard_name\n",
					"    return reverse_map\n",
					"\n",
					"def safe_list_files(folder_path, extension):\n",
					"    \"\"\"Safely list files with specific extension using mssparkutils\"\"\"\n",
					"    try:\n",
					"        # Use mssparkutils to list files\n",
					"        all_files = mssparkutils.fs.ls(folder_path)\n",
					"        matching_files = [\n",
					"            file.path \n",
					"            for file in all_files \n",
					"            if file.path.lower().endswith(f'.{extension.lower()}')\n",
					"        ]\n",
					"        return matching_files\n",
					"    except Exception as e:\n",
					"        print(f\"Warning: Error listing files in {folder_path}: {str(e)}\")\n",
					"        return []\n",
					"\n",
					"def get_all_files(csv_folder, excel_folder):\n",
					"    \"\"\"Get all files to process with proper error handling\"\"\"\n",
					"    all_files = []\n",
					"    \n",
					"    # Get CSV files\n",
					"    csv_files = safe_list_files(csv_folder, \"csv\")\n",
					"    all_files.extend(csv_files)\n",
					"    \n",
					"    # Get Excel files\n",
					"    xlsx_files = safe_list_files(excel_folder, \"xlsx\")\n",
					"    xls_files = safe_list_files(excel_folder, \"xls\")\n",
					"    all_files.extend(xlsx_files)\n",
					"    all_files.extend(xls_files)\n",
					"    \n",
					"    print(f\"Found {len(csv_files)} CSV files\")\n",
					"    print(f\"Found {len(xlsx_files)} XLSX files\")\n",
					"    print(f\"Found {len(xls_files)} XLS files\")\n",
					"    \n",
					"    return all_files\n",
					"\n",
					"def apply_column_types(df, column_mapping):\n",
					"    \"\"\"Apply correct data types to columns based on mapping\"\"\"\n",
					"    for col_name, col_info in column_mapping.items():\n",
					"        if col_name in df.columns:\n",
					"            try:\n",
					"                # Handle dates with specific format\n",
					"                if col_info.get(\"type\") == \"date\" and \"format\" in col_info:\n",
					"                    df = df.withColumn(\n",
					"                        col_name,\n",
					"                        to_date(spark_col(col_name), col_info[\"format\"])\n",
					"                    )\n",
					"                # Handle other types\n",
					"                else:\n",
					"                    spark_type = get_spark_type(col_info)\n",
					"                    df = df.withColumn(\n",
					"                        col_name,\n",
					"                        spark_col(col_name).cast(spark_type)\n",
					"                    )\n",
					"            except Exception as e:\n",
					"                print(f\"Warning: Error converting column {col_name}: {str(e)}\")\n",
					"    return df\n",
					"\n",
					"def process_file(spark, file_path, column_mapping, output_path, error_path):\n",
					"    \"\"\"Process individual file with error handling\"\"\"\n",
					"    file_name = os.path.basename(file_path)\n",
					"    try:\n",
					"        # Extract creation date from filename\n",
					"        creation_date = datetime.strptime(file_name[:8], '%Y%m%d').date() if len(file_name) >= 8 else None\n",
					"\n",
					"        print(f\"Reading file: {file_path}\")\n",
					"        # Read the file based on extension\n",
					"        if file_path.lower().endswith('.csv'):\n",
					"            df = spark.read.option(\"header\", \"true\") \\\n",
					"                         .option(\"inferSchema\", \"false\") \\\n",
					"                         .option(\"multiLine\", \"true\") \\\n",
					"                         .option(\"escape\", '\"') \\\n",
					"                         .csv(file_path)\n",
					"        elif file_path.lower().endswith(('.xlsx', '.xls')):\n",
					"            df = spark.read.format(\"com.crealytics.spark.excel\") \\\n",
					"                         .option(\"header\", \"true\") \\\n",
					"                         .option(\"inferSchema\", \"false\") \\\n",
					"                         .option(\"dataAddress\", \"'Sheet1'!A1\") \\\n",
					"                         .option(\"treatEmptyValuesAsNulls\", \"true\") \\\n",
					"                         .load(file_path)\n",
					"        else:\n",
					"            raise ValueError(f\"Unsupported file format: {file_path}\")\n",
					"\n",
					"        # Print schema for debugging\n",
					"        print(f\"Original schema for {file_name}:\")\n",
					"        df.printSchema()\n",
					"\n",
					"        # Verify the dataframe has content\n",
					"        if df.rdd.isEmpty():\n",
					"            raise ValueError(\"File contains no data\")\n",
					"\n",
					"        print(f\"Standardizing column names for {file_name}\")\n",
					"        # Create reverse mapping\n",
					"        reverse_mapping = get_reverse_mapping(column_mapping)\n",
					"        \n",
					"        # Standardize column names\n",
					"        for column_name in df.columns:\n",
					"            std_name = reverse_mapping.get(column_name.lower())\n",
					"            if std_name:\n",
					"                print(f\"Renaming column '{column_name}' to '{std_name}'\")\n",
					"                df = df.withColumnRenamed(column_name, std_name)\n",
					"\n",
					"        print(f\"Applying data types and transformations for {file_name}\")\n",
					"        # Apply correct data types\n",
					"        df = apply_column_types(df, column_mapping)\n",
					"        \n",
					"        # Apply transformations\n",
					"        df = transform_data(df, creation_date)\n",
					"\n",
					"        # Print final schema\n",
					"        print(f\"Final schema for {file_name}:\")\n",
					"        df.printSchema()\n",
					"\n",
					"        # Save as parquet\n",
					"        output_file = f\"{output_path}/{os.path.splitext(file_name)[0]}.parquet\"\n",
					"        print(f\"Saving to: {output_file}\")\n",
					"        df.write.mode(\"overwrite\").parquet(output_file)\n",
					"\n",
					"        record_count = df.count()\n",
					"        print(f\"Successfully processed {file_name}. Record count: {record_count}\")\n",
					"\n",
					"        return {\n",
					"            \"file\": file_name,\n",
					"            \"status\": \"success\",\n",
					"            \"output\": output_file,\n",
					"            \"record_count\": record_count\n",
					"        }\n",
					"\n",
					"    except Exception as e:\n",
					"        print(f\"Error processing {file_name}: {str(e)}\")\n",
					"        error_report = {\n",
					"            \"file\": file_name,\n",
					"            \"status\": \"error\",\n",
					"            \"error\": str(e),\n",
					"            \"timestamp\": datetime.now().isoformat()\n",
					"        }\n",
					"        \n",
					"        # Save error report\n",
					"        error_file = f\"{error_path}/{os.path.splitext(file_name)[0]}_error.json\"\n",
					"        print(f\"Saving error report to: {error_file}\")\n",
					"        spark.createDataFrame([error_report]).write.mode(\"overwrite\").json(error_file)\n",
					"        \n",
					"        return error_report\n",
					"\n",
					"def transform_data(df, creation_date):\n",
					"    \"\"\"Apply all required transformations to the dataframe\"\"\"\n",
					"    \n",
					"    # Clean and capitalize text columns\n",
					"    for column_name in df.columns:\n",
					"        if isinstance(df.schema[column_name].dataType, StringType):\n",
					"            df = df.withColumn(column_name, \n",
					"                             upper(trim(spark_col(column_name))))\n",
					"\n",
					"    # Handle special column combinations\n",
					"    if \"Elector Forename\" in df.columns:\n",
					"        # Add Suffix if exists\n",
					"        if \"Suffix\" in df.columns:\n",
					"            df = df.withColumn(\n",
					"                \"Elector Forename\",\n",
					"                concat(spark_col(\"Elector Forename\"), \n",
					"                      lit(\" \"), \n",
					"                      coalesce(spark_col(\"Suffix\"), lit(\"\")))\n",
					"            )\n",
					"\n",
					"        # Add Middle Name if exists\n",
					"        if \"Elector Middlename\" in df.columns:\n",
					"            df = df.withColumn(\n",
					"                \"Elector Forename\",\n",
					"                concat(spark_col(\"Elector Forename\"), \n",
					"                      lit(\" \"), \n",
					"                      coalesce(spark_col(\"Elector Middlename\"), lit(\"\")))\n",
					"            )\n",
					"\n",
					"        # Add Initials if exists\n",
					"        if \"Initials\" in df.columns:\n",
					"            df = df.withColumn(\n",
					"                \"Elector Forename\",\n",
					"                concat(spark_col(\"Elector Forename\"), \n",
					"                      lit(\" \"), \n",
					"                      coalesce(spark_col(\"Initials\"), lit(\"\")))\n",
					"            )\n",
					"\n",
					"    # Add creation date and processing timestamp\n",
					"    if creation_date:\n",
					"        df = df.withColumn(\"CreationDate\", lit(creation_date.isoformat()))\n",
					"    df = df.withColumn(\"ProcessingTimestamp\", current_timestamp())\n",
					"\n",
					"    return df\n",
					"\n",
					"def main():\n",
					"    # Initialize Spark\n",
					"    spark = create_spark_session()\n",
					"\n",
					"    # Storage paths from configuration\n",
					"    storage_account = \"baubaisadfsastg\"\n",
					"    csv_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/csv\"\n",
					"    excel_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/excel\"\n",
					"    config_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/config/schema\"\n",
					"    transform_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/transformation\"\n",
					"    error_folder = f\"{transform_folder}/errors\"\n",
					"\n",
					"    # Ensure output directories exist\n",
					"    for folder in [transform_folder, error_folder]:\n",
					"        if not mssparkutils.fs.exists(folder):\n",
					"            mssparkutils.fs.mkdirs(folder)\n",
					"\n",
					"    # Read column mapping\n",
					"    mapping_file = f\"{config_folder}/col_mapping.json\"\n",
					"    try:\n",
					"        print(\"Reading column mapping configuration\")\n",
					"        column_mapping = read_column_mapping(spark, mapping_file)\n",
					"        print(\"Successfully loaded column mapping configuration\")\n",
					"    except Exception as e:\n",
					"        print(f\"Fatal error reading mapping file: {str(e)}\")\n",
					"        return\n",
					"\n",
					"    # Get list of files to process\n",
					"    print(\"Scanning for files to process\")\n",
					"    all_files = get_all_files(csv_folder, excel_folder)\n",
					"    if not all_files:\n",
					"        print(\"No files found to process\")\n",
					"        return\n",
					"\n",
					"    # Process all files\n",
					"    results = []\n",
					"    for file_path in all_files:\n",
					"        print(f\"\\nProcessing file: {file_path}\")\n",
					"        result = process_file(\n",
					"            spark,\n",
					"            file_path,\n",
					"            column_mapping,\n",
					"            transform_folder,\n",
					"            error_folder\n",
					"        )\n",
					"        results.append(result)\n",
					"        print(f\"Completed processing {file_path}: {result['status']}\")\n",
					"\n",
					"    # Generate detailed summary report\n",
					"    summary = {\n",
					"        \"execution_timestamp\": datetime.now().isoformat(),\n",
					"        \"total_files\": len(results),\n",
					"        \"successful_files\": len([r for r in results if r['status'] == 'success']),\n",
					"        \"failed_files\": len([r for r in results if r['status'] == 'error']),\n",
					"        \"results\": results\n",
					"    }\n",
					"    \n",
					"    # Save summary report\n",
					"    summary_df = spark.createDataFrame([summary])\n",
					"    summary_df.write.mode(\"overwrite\").json(f\"{transform_folder}/processing_summary.json\")\n",
					"\n",
					"    # Print summary\n",
					"    print(\"\\nProcessing Summary:\")\n",
					"    print(f\"Total files processed: {summary['total_files']}\")\n",
					"    print(f\"Successful: {summary['successful_files']}\")\n",
					"    print(f\"Failed: {summary['failed_files']}\")\n",
					"\n",
					"    # Print failed files if any\n",
					"    failed_files = [r for r in results if r['status'] == 'error']\n",
					"    if failed_files:\n",
					"        print(\"\\nFailed Files:\")\n",
					"        for failure in failed_files:\n",
					"            print(f\"- {failure['file']}: {failure['error']}\")\n",
					"\n",
					"if __name__ == \"__main__\":\n",
					"    main()"
				],
				"execution_count": 3
			}
		]
	}
}