{
	"name": "L1_Tranfromation_MappingColumns",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b7900709-4814-41ea-a6dc-9f18fecb8837"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# L1_er_juror_transformation_mappingcolumns"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Code Explanation\n",
					"\n",
					"The code is designed to process CSV and Excel files from a specified folder in Azure Blob Storage, transform the data, and save the transformed data as Parquet files into a mapping folder. The main steps involved are:\n",
					"\n",
					"1. **Initialize Spark Session**: Set up a Spark session with the required packages for reading Excel files.\n",
					"2. **Define Helper Functions**:\n",
					"   - `get_file_type`: Determine the file type (CSV or Excel).\n",
					"   - `process_folder`: Recursively process the 'files' folder and return all files.\n",
					"   - `get_folder_parts`: Extract folder information for naming.\n",
					"   - `process_file`: Process CSV or Excel files, transform the data, and save as Parquet files.\n",
					"   - `transform_data`: Transform the data by cleaning text columns and splitting names.\n",
					"   - `split_elector_name`: Split the 'Elector Name' field into surname and forename components.\n",
					"   - `process_name_components`: Process name components separately.\n",
					"   - `read_mapping`: Read all mapping files in the directory and return a set of mapped files.\n",
					"   - `print_detailed_summary`: Print a detailed summary of moved files.\n",
					"3. **Main Function**:\n",
					"   - Scan the source path for files to process.\n",
					"   - Read the log of processed files.\n",
					"   - Read the mapping of already processed files.\n",
					"   - Filter out files that have already been processed.\n",
					"   - Process each new file, transform the data, and save as Parquet files.\n",
					"   - Print a detailed summary of moved files.\n",
					"   - Update the log of processed files.\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 1. Initialize Spark Session and Load Libaries"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import logging\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"import json\n",
					"from datetime import datetime\n",
					"import os\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Configure logging\n",
					"logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
					"\n",
					"def create_spark_session():\n",
					"    \"\"\"Create and return a Spark session\"\"\"\n",
					"    return SparkSession.builder \\\n",
					"        .appName(\"Electoral Data ETL\") \\\n",
					"        .getOrCreate()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 3. Read Column Mapping"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def read_column_mapping(spark, config_path):\n",
					"    \"\"\"Read and parse the column mapping configuration\"\"\"\n",
					"    try:\n",
					"        mapping_df = spark.read.text(config_path)\n",
					"        json_str = mapping_df.agg(concat_ws(\"\", collect_list(\"value\"))).collect()[0][0]\n",
					"        mapping_dict = json.loads(json_str)\n",
					"        return mapping_dict[\"mappings\"]\n",
					"    except Exception as e:\n",
					"        try:\n",
					"            mapping_rdd = spark.sparkContext.wholeTextFiles(config_path)\n",
					"            json_str = mapping_rdd.values().first()\n",
					"            mapping_dict = json.loads(json_str)\n",
					"            return mapping_dict[\"mappings\"]\n",
					"        except Exception as e2:\n",
					"            raise Exception(f\"Failed to read mapping file. Primary error: {str(e)}, Fallback error: {str(e2)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 4. Get Reverse Mapping"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def get_reverse_mapping(column_mapping):\n",
					"    \"\"\"Create a reverse mapping for easy lookup\"\"\"\n",
					"    reverse_map = {}\n",
					"    for standard_name, details in column_mapping.items():\n",
					"        for alias in details[\"aliases\"]:\n",
					"            reverse_map[alias.lower()] = standard_name\n",
					"    return reverse_map"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 5. List Folders"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def list_files(folder_path, extensions):\n",
					"    \"\"\"List all files with specific extensions in a folder\"\"\"\n",
					"    try:\n",
					"        files = mssparkutils.fs.ls(folder_path)\n",
					"        return [f.path for f in files if any(f.name.lower().endswith(ext) for ext in extensions)]\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error listing files: {str(e)}\")\n",
					"        return []"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### 6.1 Read CSV Files"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def read_file(spark, file_path):\n",
					"    if file_path.lower().endswith('.csv'):\n",
					"        logging.info(\"Reading as CSV file\")\n",
					"        return spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").csv(file_path)\n",
					"    elif file_path.lower().endswith(('.xlsx', '.xls')):\n",
					"        logging.info(\"Reading as Excel file\")\n",
					"        return read_excel_file(spark, file_path)\n",
					"    else:\n",
					"        raise ValueError(f\"Unsupported file format: {file_path}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### 6.2 Read Excel Files"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def read_excel_file(spark, file_path):\n",
					"    try:\n",
					"        return spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"treatEmptyValuesAsNulls\", \"true\").load(file_path)\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error reading Excel without sheet specification: {str(e)}\")\n",
					"        try:\n",
					"            return spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"treatEmptyValuesAsNulls\", \"true\").option(\"sheetName\", \"Sheet1\").load(file_path)\n",
					"        except Exception as e2:\n",
					"            logging.error(f\"Error reading Excel with Sheet1: {str(e2)}\")\n",
					"            return spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"treatEmptyValuesAsNulls\", \"true\").option(\"sheetIndex\", 0).load(file_path)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def standardize_column_names(df, reverse_mapping):\n",
					"    for col in df.columns:\n",
					"        std_name = reverse_mapping.get(col.lower())\n",
					"        if std_name:\n",
					"            df = df.withColumnRenamed(col, std_name)\n",
					"            logging.info(f\"Renamed column: {col} -> {std_name}\")\n",
					"    return df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def transform_data(df, creation_date, la_code=None):\n",
					"    for col_name in df.columns:\n",
					"        if isinstance(df.schema[col_name].dataType, StringType):\n",
					"            logging.info(f\"Cleaning text column: {col_name}\")\n",
					"            df = df.withColumn(col_name, upper(trim(df[col_name])))\n",
					"    df = split_elector_name(df)\n",
					"    df = process_name_components(df)\n",
					"    if \"Elector Forename\" not in df.columns:\n",
					"        df = df.withColumn(\"Elector Forename\", lit(None).cast(StringType()))\n",
					"    if \"Elector Surname\" not in df.columns:\n",
					"        df = df.withColumn(\"Elector Surname\", lit(None).cast(StringType()))\n",
					"    if creation_date:\n",
					"        df = df.withColumn(\"Creation Date\", lit(creation_date))\n",
					"    if la_code:\n",
					"        df = df.withColumn(\"LA Code\", lit(la_code))\n",
					"    return df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def split_elector_name(df):\n",
					"    \"\"\"Split the 'Elector Name' field into surname and forename components.\"\"\"\n",
					"    if \"Elector Name\" in df.columns:\n",
					"        logging.info(\"Found 'Elector Name' column, splitting into surname and forename components\")\n",
					"        df = df.withColumn(\"name_parts\", split(col(\"Elector Name\"), \" \"))\n",
					"        df = df.withColumn(\"Elector Surname\", upper(trim(element_at(col(\"name_parts\"), 1))))\n",
					"        df = df.withColumn(\"Elector Forename\", \n",
					"                           when(size(col(\"name_parts\")) > 1,\n",
					"                                upper(trim(concat_ws(\" \", \n",
					"                                                     slice(col(\"name_parts\"), 2, size(col(\"name_parts\"))))))).otherwise(lit(None)))\n",
					"        df = df.drop(\"name_parts\")\n",
					"    return df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def process_name_components(df):\n",
					"    \"\"\"Process name components separately\"\"\"\n",
					"    name_columns = [\"Elector Title\", \"Elector Forename\", \"Elector Surname\", \"Elector Middlename\", \"Suffix\", \"Initials\"]\n",
					"    for col_name in name_columns:\n",
					"        if col_name in df.columns:\n",
					"            df = df.withColumn(col_name, when(col(col_name).isNotNull(), upper(trim(col(col_name)))).otherwise(None))\n",
					"    return df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def process_file(source_path, date_folder, third_folder, file_name, storage_account, mapped_files):\n",
					"    \"\"\"Process CSV or Excel file with corrected folder structure\"\"\"\n",
					"    try:\n",
					"        # Create the folder name in the format YYYYMMDD_LA-Name\n",
					"        folder_name = f\"{date_folder}_{third_folder}\"\n",
					"        file_type = get_file_type(source_path)\n",
					"        \n",
					"        if not file_type:\n",
					"            return False, None\n",
					"        \n",
					"        # Determine the destination path\n",
					"        dest_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/files/{folder_name}.{file_type}\"\n",
					"        \n",
					"        # Check if the file is already mapped\n",
					"        if dest_path in mapped_files:\n",
					"            logging.info(f\"File {dest_path} is already mapped, skipping processing.\")\n",
					"            return False, None\n",
					"        \n",
					"        # Read the file into a DataFrame\n",
					"        if file_type == 'excel':\n",
					"            df = spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").load(source_path)\n",
					"        elif file_type == 'csv':\n",
					"            df = spark.read.option(\"header\", \"true\").csv(source_path)\n",
					"        \n",
					"        # Transform the data\n",
					"        df = transform_data(df, date_folder, third_folder)\n",
					"        \n",
					"        # Save the DataFrame as a Parquet file in the mapping folder\n",
					"        mapping_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/mapping/{folder_name}.parquet\"\n",
					"        df.write.mode(\"overwrite\").parquet(mapping_path)\n",
					"        \n",
					"        logging.info(f\"Saved mapped file to: {mapping_path}\")\n",
					"        return True, mapping_path\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error processing file {source_path}: {str(e)}\")\n",
					"        return False, None"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def read_mapping(mapping_path):\n",
					"    \"\"\"Read all mapping files in the directory and return a set of mapped files\"\"\"\n",
					"    try:\n",
					"        files = mssparkutils.fs.ls(mapping_path)\n",
					"        mapped_files = set()\n",
					"        for file_info in files:\n",
					"            if file_info.name.endswith('.json'):\n",
					"                mapping_df = spark.read.json(file_info.path)\n",
					"                mapped_files.update(mapping_df.select(\"file\").rdd.flatMap(lambda x: x).collect())\n",
					"        return mapped_files\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error reading mapping files: {str(e)}\")\n",
					"        return set()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def print_detailed_summary(moved_files):\n",
					"    \"\"\"Print detailed summary of moved files\"\"\"\n",
					"    print(\"\\nSummary of Moved Files:\")\n",
					"    print(f\"Data Files Successfully Moved: {len(moved_files['data_success'])}\")\n",
					"    for file in moved_files['data_success']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Failed Files: {len(moved_files['failed'])}\")\n",
					"    for file in moved_files['failed']:\n",
					"        print(f\"  - {file}\")\n",
					"    print(f\"Quarantined Files: {len(moved_files['quarantine'])}\")\n",
					"    for file in moved_files['quarantine']:\n",
					"        print(f\"  - {file}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def main():\n",
					"    spark = create_spark_session()\n",
					"    storage_account = \"baubaisadfsastg\"\n",
					"    folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/files\"\n",
					"    config_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/config/schema\"\n",
					"    transform_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/transformation\"\n",
					"    error_folder = f\"{transform_folder}/errors\"\n",
					"    log_file_path = f\"{transform_folder}/processed_files_log.json\"\n",
					"    \n",
					"    # Read column mapping\n",
					"    mapping_file = f\"{config_folder}/col_mapping.json\"\n",
					"    try:\n",
					"        column_mapping = read_column_mapping(spark, mapping_file)\n",
					"        reverse_mapping = get_reverse_mapping(column_mapping)\n",
					"    except Exception as e:\n",
					"        logging.fatal(f\"Fatal error reading mapping file: {str(e)}\")\n",
					"        return\n",
					"    \n",
					"    # Read the log of processed files\n",
					"    try:\n",
					"        processed_files_log = spark.read.json(log_file_path).select(\"file\").rdd.flatMap(lambda x: x).collect()\n",
					"    except Exception as e:\n",
					"        logging.warning(f\"Could not read processed files log: {str(e)}\")\n",
					"        processed_files_log = []\n",
					"    \n",
					"    all_files = list_files(folder, ['.csv', '.xlsx', '.xls'])\n",
					"    logging.info(f\"Total files to process: {len(all_files)}\")\n",
					"    \n",
					"    # Filter out files that have already been processed\n",
					"    new_files = [file for file in all_files if file not in processed_files_log]\n",
					"    logging.info(f\"New files to process: {len(new_files)}\")\n",
					"    \n",
					"    results = [process_file(spark, file_path, reverse_mapping, transform_folder, error_folder) for file_path in new_files]\n",
					"    summary_df = spark.createDataFrame(results)\n",
					"    summary_df.write.mode(\"overwrite\").json(f\"{transform_folder}/processing_summary.json\")\n",
					"    logging.info(\"\\nProcessing Summary:\")\n",
					"    logging.info(f\"Total files processed: {len(results)}\")\n",
					"    logging.info(f\"Successful: {len([r for r in results if r['status'] == 'success'])}\")\n",
					"    logging.info(f\"Failed: {len([r for r in results if r['status'] == 'error'])}\")\n",
					"    \n",
					"    successful_files = [r for r in results if r['status'] == 'success']\n",
					"    if successful_files:\n",
					"        # Generate summary report\n",
					"        logging.info(\"\\nSummary Report:\")\n",
					"        logging.info(f\"Total files transformed: {len(successful_files)}\")\n",
					"        logging.info(f\"Total errors: {len([r for r in results if r['status'] == 'error'])}\")\n",
					"        \n",
					"        for file in successful_files:\n",
					"            output_file = file['output']\n",
					"            df = spark.read.parquet(output_file)\n",
					"            logging.info(f\"File: {output_file}, Columns: {len(df.columns)}\")\n",
					"    \n",
					"    # Update the log of processed files\n",
					"    new_processed_files_log = spark.createDataFrame([(file,) for file in new_files], [\"file\"])\n",
					"    if processed_files_log:\n",
					"        existing_log_df = spark.createDataFrame([(file,) for file in processed_files_log], [\"file\"])\n",
					"        updated_log_df = existing_log_df.union(new_processed_files_log).distinct()\n",
					"    else:\n",
					"        updated_log_df = new_processed_files_log\n",
					"    updated_log_df.write.mode(\"overwrite\").json(log_file_path)\n",
					"\n",
					"if __name__ == \"__main__\":\n",
					"    main()"
				],
				"execution_count": null
			}
		]
	}
}