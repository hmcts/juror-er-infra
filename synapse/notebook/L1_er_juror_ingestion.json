{
	"name": "L1_er_juror_ingestion",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d3673f51-a8ea-45ba-930a-f1b2089bc698"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"import time\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def is_metadata_file(file_path):\n",
					"    \"\"\"Check if file is metadata related\"\"\"\n",
					"    metadata_indicators = [\n",
					"        'metadata.txt',\n",
					"        'ReadMe.txt'\n",
					"    ]\n",
					"    return any(indicator in file_path.lower() for indicator in metadata_indicators)\n",
					"\n",
					"def should_process_file(file_path):\n",
					"    \"\"\"Check if file should be processed (CSV or Excel) - case insensitive\"\"\"\n",
					"    extensions = ['.csv', '.xlsx', '.xls', '.CSV', '.XLSX', '.XLS']\n",
					"    return any(file_path.endswith(ext) for ext in extensions)\n",
					"\n",
					"def process_folder(path):\n",
					"    \"\"\"Process a folder recursively and return all files\"\"\"\n",
					"    all_files = []\n",
					"    try:\n",
					"        files = mssparkutils.fs.ls(path)\n",
					"        for file_info in files:\n",
					"            if file_info.isDir:\n",
					"                sub_files = process_folder(file_info.path)\n",
					"                all_files.extend(sub_files)\n",
					"            else:\n",
					"                if 'File Structure Definitions.xlsx' not in file_info.path:\n",
					"                    all_files.append(file_info.path)\n",
					"    except Exception as e:\n",
					"        print(f\"Error accessing path {path}: {str(e)}\")\n",
					"    return all_files\n",
					"\n",
					"def get_folder_parts(file_path):\n",
					"    \"\"\"Extract folder information for naming - dynamic folder detection\"\"\"\n",
					"    parts = file_path.split('/')\n",
					"    \n",
					"    try:\n",
					"        la_index = parts.index('LA_Data')\n",
					"        if la_index > 0:\n",
					"            date_folder = parts[la_index - 1]\n",
					"            if len(parts) > la_index + 1:\n",
					"                third_folder = parts[la_index + 1]\n",
					"                return date_folder, third_folder\n",
					"    except ValueError:\n",
					"        pass\n",
					"    return None, None\n",
					"\n",
					"def clean_file_name(file_name):\n",
					"    \"\"\"Clean file name\"\"\"\n",
					"    if '?' in file_name:\n",
					"        file_name = file_name.split('?')[0]\n",
					"    return file_name.replace(' ', '_').replace('&', 'and')\n",
					"\n",
					"def process_file(source_path, date_folder, third_folder, file_name):\n",
					"    \"\"\"Process CSV or Excel file with folder structure - handle empty and corrupted files\"\"\"\n",
					"    try:\n",
					"        base_dir = f\"{date_folder}_{third_folder}\"\n",
					"        \n",
					"        try:\n",
					"            # Read the file based on its type - case insensitive check\n",
					"            if source_path.lower().endswith('.csv'):\n",
					"                df = spark.read.option(\"header\", \"true\").csv(source_path)\n",
					"            else:  # Excel files\n",
					"                df = spark.read.format(\"com.crealytics.spark.excel\") \\\n",
					"                             .option(\"header\", \"true\") \\\n",
					"                             .option(\"dataAddress\", \"'Sheet1'!A1\") \\\n",
					"                             .load(source_path)\n",
					"            \n",
					"            # Check if DataFrame is empty\n",
					"            row_count = df.count()\n",
					"            if row_count <= 1:  # Only header or empty\n",
					"                print(f\"Empty file detected: {source_path}\")\n",
					"                dest_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/empty/{base_dir}/{clean_file_name(file_name)}\"\n",
					"                print(f\"Moving empty file to: {dest_path}\")\n",
					"                mssparkutils.fs.cp(source_path, dest_path, True)\n",
					"                return True, f\"empty/{base_dir}/{clean_file_name(file_name)}\"\n",
					"            \n",
					"            # Process non-empty file\n",
					"            new_file_name = clean_file_name(file_name)\n",
					"            if new_file_name.lower().endswith(('.xlsx', '.xls')):\n",
					"                new_file_name = f\"{new_file_name.rsplit('.', 1)[0]}.csv\"\n",
					"                \n",
					"            dest_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/csv/{base_dir}/{new_file_name}\"\n",
					"            print(f\"Processing file with {row_count} rows: {source_path} to {dest_path}\")\n",
					"            \n",
					"            df.coalesce(1).write \\\n",
					"              .mode(\"overwrite\") \\\n",
					"              .option(\"header\", \"true\") \\\n",
					"              .csv(dest_path)\n",
					"              \n",
					"            return True, f\"{base_dir}/{new_file_name}\"\n",
					"            \n",
					"        except Exception as e:\n",
					"            print(f\"Corrupted or unreadable file: {source_path}, Error: {str(e)}\")\n",
					"            # Move corrupted files to quarantine\n",
					"            dest_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/quarantine/{base_dir}/{clean_file_name(file_name)}\"\n",
					"            print(f\"Moving corrupted file to quarantine: {dest_path}\")\n",
					"            mssparkutils.fs.cp(source_path, dest_path, True)\n",
					"            return True, f\"quarantine/{base_dir}/{clean_file_name(file_name)}\"\n",
					"            \n",
					"    except Exception as e:\n",
					"        print(f\"Error processing file {source_path}: {str(e)}\")\n",
					"        return False, None\n",
					"\n",
					"def process_metadata_file(source_path, file_name):\n",
					"    \"\"\"Process metadata file\"\"\"\n",
					"    try:\n",
					"        dest_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/metadata/{clean_file_name(file_name)}\"\n",
					"        print(f\"Moving metadata file: {source_path} to {dest_path}\")\n",
					"        mssparkutils.fs.cp(source_path, dest_path, True)\n",
					"        return True, clean_file_name(file_name)\n",
					"    except Exception as e:\n",
					"        print(f\"Error processing metadata file {source_path}: {str(e)}\")\n",
					"        return False, None\n",
					"\n",
					"def print_detailed_summary(moved_files):\n",
					"    \"\"\"Print detailed summary with lists of all files\"\"\"\n",
					"    \n",
					"    def print_section(title, files, symbol=\"✓\"):\n",
					"        print(f\"\\n{title}\")\n",
					"        print(\"-\" * 100)\n",
					"        for idx, file in enumerate(files, 1):\n",
					"            print(f\"{symbol} {idx}. {file}\")\n",
					"        print(f\"\\nTotal {title}: {len(files)}\")\n",
					"    \n",
					"    print(\"\\n=== DETAILED FILE PROCESSING SUMMARY ===\")\n",
					"    \n",
					"    # Regular processed files\n",
					"    normal_files = [f for f in moved_files['data_success'] \n",
					"                   if not any(x in f for x in ['empty/', 'quarantine/'])]\n",
					"    print_section(\"Successfully Processed Files (CSV/Excel)\", normal_files)\n",
					"    \n",
					"    # Empty files\n",
					"    empty_files = [f for f in moved_files['data_success'] if 'empty/' in f]\n",
					"    print_section(\"Empty Files\", empty_files, \"⚠\")\n",
					"    \n",
					"    # Quarantine files (corrupted/unreadable)\n",
					"    quarantine_files = [f for f in moved_files['data_success'] if 'quarantine/' in f]\n",
					"    print_section(\"Quarantined Files (Corrupted/Unreadable)\", quarantine_files, \"⚠\")\n",
					"    \n",
					"    # Metadata files\n",
					"    print_section(\"Metadata Files\", moved_files['metadata_success'])\n",
					"    \n",
					"    # Failed files\n",
					"    print_section(\"Failed Files\", moved_files['failed'], \"✗\")\n",
					"    \n",
					"    # Overall summary\n",
					"    print(\"\\n=== FINAL COUNTS ===\")\n",
					"    print(\"-\" * 100)\n",
					"    print(f\"Successfully Processed Files: {len(normal_files)}\")\n",
					"    print(f\"Empty Files: {len(empty_files)}\")\n",
					"    print(f\"Quarantined Files: {len(quarantine_files)}\")\n",
					"    print(f\"Metadata Files: {len(moved_files['metadata_success'])}\")\n",
					"    print(f\"Failed Files: {len(moved_files['failed'])}\")\n",
					"    total = (len(normal_files) + len(empty_files) + len(quarantine_files) + \n",
					"             len(moved_files['metadata_success']) + len(moved_files['failed']))\n",
					"    print(f\"Total Files Processed: {total}\")\n",
					"\n",
					"# Main processing\n",
					"try:\n",
					"    storage_account = \"baubaisadfsastg\"\n",
					"    source_path = f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net\"\n",
					"    \n",
					"    moved_files = {\n",
					"        'data_success': [],\n",
					"        'metadata_success': [],\n",
					"        'failed': []\n",
					"    }\n",
					"    \n",
					"    print(f\"Scanning source path: {source_path}\")\n",
					"    files = process_folder(source_path)\n",
					"    print(f\"Found {len(files)} files to process\")\n",
					"    \n",
					"    for file_path in files:\n",
					"        try:\n",
					"            file_name = file_path.split('/')[-1]\n",
					"            \n",
					"            if is_metadata_file(file_path):\n",
					"                success, new_path = process_metadata_file(file_path, file_name)\n",
					"                if success:\n",
					"                    moved_files['metadata_success'].append(f\"{file_path} -> {new_path}\")\n",
					"                else:\n",
					"                    moved_files['failed'].append(f\"{file_path} (metadata move failed)\")\n",
					"                continue\n",
					"            \n",
					"            if not should_process_file(file_path):\n",
					"                continue\n",
					"                \n",
					"            date_folder, third_folder = get_folder_parts(file_path)\n",
					"            if date_folder and third_folder:\n",
					"                success, new_path = process_file(file_path, date_folder, third_folder, file_name)\n",
					"                if success:\n",
					"                    moved_files['data_success'].append(f\"{file_path} -> {new_path}\")\n",
					"                else:\n",
					"                    moved_files['failed'].append(f\"{file_path} (processing failed)\")\n",
					"            else:\n",
					"                moved_files['failed'].append(f\"{file_path} (invalid folder structure)\")\n",
					"                \n",
					"        except Exception as e:\n",
					"            print(f\"Error processing {file_path}: {str(e)}\")\n",
					"            moved_files['failed'].append(f\"{file_path} (processing error)\")\n",
					"            continue\n",
					"            \n",
					"except Exception as e:\n",
					"    print(f\"Error in main processing: {str(e)}\")\n",
					"\n",
					"# Print final detailed summary\n",
					"print_detailed_summary(moved_files)"
				],
				"execution_count": null
			}
		]
	}
}