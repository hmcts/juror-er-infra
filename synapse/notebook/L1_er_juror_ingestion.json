{
	"name": "L1_er_juror_ingestion",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0cec9a73-1355-4d19-8bc9-fe2a031ac34e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ER_Juror Data Ingestion"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 1. Import Libaries"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"import time\n",
					"from notebookutils import mssparkutils\n",
					"import os"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"# Initialize Spark session with the required packages\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"JurorIngestion\") \\\n",
					"    .config(\"spark.jars.packages\", \"com.crealytics:spark-excel_2.12:0.13.5,org.apache.xmlbeans:xmlbeans:3.1.0,org.apache.poi:poi-ooxml-schemas:4.1.2,org.apache.poi:poi-ooxml:4.1.2,org.apache.poi:poi:4.1.2\") \\\n",
					"    .getOrCreate()"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def is_metadata_file(file_path):\n",
					"    \"\"\"Check if file is metadata related\"\"\"\n",
					"    metadata_indicators = [\n",
					"        'metadata.txt',\n",
					"        'ReadMe.txt'\n",
					"    ]\n",
					"    return any(indicator in file_path.lower() for indicator in metadata_indicators)\n",
					"\n",
					"def should_process_file(file_path):\n",
					"    \"\"\"Check if file should be processed (CSV or Excel) - case insensitive\"\"\"\n",
					"    extensions = ['.csv', '.xlsx', '.xls']\n",
					"    return any(file_path.lower().endswith(ext) for ext in extensions)\n",
					"\n",
					"def get_file_type(file_path):\n",
					"    \"\"\"Determine if file is CSV or Excel\"\"\"\n",
					"    if file_path.lower().endswith(('.xlsx', '.xls')):\n",
					"        return 'excel'\n",
					"    elif file_path.lower().endswith('.csv'):\n",
					"        return 'csv'\n",
					"    return None\n",
					"\n",
					"def process_folder(path):\n",
					"    \"\"\"Process a folder recursively and return all files\"\"\"\n",
					"    all_files = []\n",
					"    try:\n",
					"        files = mssparkutils.fs.ls(path)\n",
					"        for file_info in files:\n",
					"            if file_info.isDir:\n",
					"                sub_files = process_folder(file_info.path)\n",
					"                all_files.extend(sub_files)\n",
					"            else:\n",
					"                if 'File Structure Definitions.xlsx' not in file_info.path:\n",
					"                    all_files.append(file_info.path)\n",
					"    except Exception as e:\n",
					"        print(f\"Error accessing path {path}: {str(e)}\")\n",
					"    return all_files\n",
					"\n",
					"def get_folder_parts(file_path):\n",
					"    \"\"\"Extract folder information for naming with improved parsing\"\"\"\n",
					"    parts = file_path.split('/')\n",
					"    \n",
					"    try:\n",
					"        la_index = parts.index('LA_Data')\n",
					"        if la_index > 0:\n",
					"            date_folder = parts[la_index - 1]\n",
					"            if len(parts) > la_index + 1:\n",
					"                # Get LA folder name (third folder)\n",
					"                third_folder = parts[la_index + 1]\n",
					"                return date_folder, third_folder\n",
					"    except ValueError:\n",
					"        # Handle case where LA_Data is not in path\n",
					"        if len(parts) >= 3:\n",
					"            return parts[-3], parts[-2]\n",
					"    return None, None\n",
					"\n",
					"def clean_file_name(file_name):\n",
					"    \"\"\"Clean file name with improved handling\"\"\"\n",
					"    # Remove query parameters\n",
					"    if '?' in file_name:\n",
					"        file_name = file_name.split('?')[0]\n",
					"    \n",
					"    # Clean special characters\n",
					"    file_name = (file_name\n",
					"                 .replace(' ', '_')\n",
					"                 .replace('&', 'and')\n",
					"                 .replace('(', '')\n",
					"                 .replace(')', '')\n",
					"                 .replace(',', '')\n",
					"                 .replace('@', '_at_'))\n",
					"    \n",
					"    return file_name\n",
					"\n",
					"def process_file(source_path, date_folder, third_folder, file_name, storage_account):\n",
					"    \"\"\"Process CSV or Excel file with corrected folder structure\"\"\"\n",
					"    try:\n",
					"        # Create the folder name in the format YYYYMMDD_LA-Name\n",
					"        folder_name = f\"{date_folder}_{third_folder}\"\n",
					"        file_type = get_file_type(source_path)\n",
					"        \n",
					"        if not file_type:\n",
					"            return False, None\n",
					"        \n",
					"        # Handle Excel files\n",
					"        if file_type == 'excel':\n",
					"            dest_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/excel/{folder_name}.xlsx\"\n",
					"            print(f\"Moving Excel file to: {dest_path}\")\n",
					"            mssparkutils.fs.cp(source_path, dest_path, True)\n",
					"            return True, f\"excel/{folder_name}.xlsx\"\n",
					"        \n",
					"        # Process CSV files\n",
					"        try:\n",
					"            df = spark.read.option(\"header\", \"true\").csv(source_path)\n",
					"            row_count = df.count()\n",
					"            \n",
					"            if row_count <= 1:  # Empty file\n",
					"                dest_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/empty/{folder_name}.csv\"\n",
					"                print(f\"Moving empty file to: {dest_path}\")\n",
					"                mssparkutils.fs.cp(source_path, dest_path, True)\n",
					"                return True, f\"empty/{folder_name}.csv\"\n",
					"            \n",
					"            # Process non-empty CSV - save directly as folder_name.csv\n",
					"            dest_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/csv/{folder_name}.csv\"\n",
					"            print(f\"Processing CSV file with {row_count} rows to: {dest_path}\")\n",
					"            \n",
					"            # Write as single file with header\n",
					"            df.coalesce(1).write \\\n",
					"              .mode(\"overwrite\") \\\n",
					"              .option(\"header\", \"true\") \\\n",
					"              .option(\"delimiter\", \",\") \\\n",
					"              .csv(dest_path)\n",
					"            \n",
					"            return True, f\"csv/{folder_name}.csv\"\n",
					"            \n",
					"        except Exception as e:\n",
					"            print(f\"Error processing file {source_path}: {str(e)}\")\n",
					"            dest_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/quarantine/{folder_name}.csv\"\n",
					"            print(f\"Moving corrupted file to: {dest_path}\")\n",
					"            mssparkutils.fs.cp(source_path, dest_path, True)\n",
					"            return True, f\"quarantine/{folder_name}.csv\"\n",
					"            \n",
					"    except Exception as e:\n",
					"        print(f\"Error in process_file: {str(e)}\")\n",
					"        return False, None\n",
					"\n",
					"def process_metadata_file(source_path, file_name, storage_account):\n",
					"    \"\"\"Process metadata file with improved organization\"\"\"\n",
					"    try:\n",
					"        clean_name = clean_file_name(file_name)\n",
					"        dest_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/metadata/{clean_name}\"\n",
					"        print(f\"Moving metadata file to: {dest_path}\")\n",
					"        mssparkutils.fs.cp(source_path, dest_path, True)\n",
					"        return True, clean_name\n",
					"    except Exception as e:\n",
					"        print(f\"Error processing metadata file {source_path}: {str(e)}\")\n",
					"        return False, None\n",
					"\n",
					"def print_detailed_summary(moved_files):\n",
					"    \"\"\"Print detailed summary with improved categorization\"\"\"\n",
					"    def print_section(title, files, symbol=\"âœ“\"):\n",
					"        if files:\n",
					"            print(f\"\\n{title}\")\n",
					"            print(\"-\" * 80)\n",
					"            for idx, file in enumerate(files, 1):\n",
					"                print(f\"{symbol} {idx}. {file}\")\n",
					"            print(f\"\\nTotal {title}: {len(files)}\")\n",
					"    \n",
					"    print(\"\\n=== DETAILED FILE PROCESSING SUMMARY ===\")\n",
					"    \n",
					"    # Categorize files\n",
					"    csv_files = [f for f in moved_files['data_success'] if f.startswith('csv/')]\n",
					"    excel_files = [f for f in moved_files['data_success'] if f.startswith('excel/')]\n",
					"    empty_files = [f for f in moved_files['data_success'] if f.startswith('empty/')]\n",
					"    quarantine_files = [f for f in moved_files['data_success'] if f.startswith('quarantine/')]\n",
					"    \n",
					"    # Print sections\n",
					"    print_section(\"Successfully Processed CSV Files\", csv_files)\n",
					"    print_section(\"Successfully Processed Excel Files\", excel_files)\n",
					"    print_section(\"Empty Files\", empty_files, \"âš \")\n",
					"    print_section(\"Quarantined Files\", quarantine_files, \"âš \")\n",
					"    print_section(\"Metadata Files\", moved_files['metadata_success'])\n",
					"    print_section(\"Failed Files\", moved_files['failed'], \"âœ—\")\n",
					"    \n",
					"    # Print summary\n",
					"    print(\"\\n=== FINAL COUNTS ===\")\n",
					"    print(\"-\" * 80)\n",
					"    print(f\"Successfully Processed CSV Files: {len(csv_files)}\")\n",
					"    print(f\"Successfully Processed Excel Files: {len(excel_files)}\")\n",
					"    print(f\"Empty Files: {len(empty_files)}\")\n",
					"    print(f\"Quarantined Files: {len(quarantine_files)}\")\n",
					"    print(f\"Metadata Files: {len(moved_files['metadata_success'])}\")\n",
					"    print(f\"Failed Files: {len(moved_files['failed'])}\")\n",
					"    total = (len(csv_files) + len(excel_files) + len(empty_files) + \n",
					"             len(quarantine_files) + len(moved_files['metadata_success']) + \n",
					"             len(moved_files['failed']))\n",
					"    print(f\"Total Files Processed: {total}\")\n",
					"\n",
					"# Initialize Spark session\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"JurorIngestion\") \\\n",
					"    .config(\"spark.jars.packages\", \"com.crealytics:spark-excel_2.12:0.13.5\") \\\n",
					"    .getOrCreate()\n",
					"\n",
					"# Main processing\n",
					"def main():\n",
					"    storage_account = \"baubaisadfsastg\"\n",
					"    source_path = f\"abfss://juror-ingestion@{storage_account}.dfs.core.windows.net\"\n",
					"    \n",
					"    moved_files = {\n",
					"        'data_success': [],\n",
					"        'metadata_success': [],\n",
					"        'failed': []\n",
					"    }\n",
					"    \n",
					"    print(f\"Scanning source path: {source_path}\")\n",
					"    files = process_folder(source_path)\n",
					"    print(f\"Found {len(files)} files to process\")\n",
					"    \n",
					"    for file_path in files:\n",
					"        try:\n",
					"            file_name = file_path.split('/')[-1]\n",
					"            \n",
					"            if is_metadata_file(file_path):\n",
					"                success, new_path = process_metadata_file(file_path, file_name, storage_account)\n",
					"                if success:\n",
					"                    moved_files['metadata_success'].append(new_path)\n",
					"                else:\n",
					"                    moved_files['failed'].append(f\"{file_path} (metadata move failed)\")\n",
					"                continue\n",
					"            \n",
					"            if not should_process_file(file_path):\n",
					"                continue\n",
					"            \n",
					"            date_folder, third_folder = get_folder_parts(file_path)\n",
					"            if date_folder and third_folder:\n",
					"                success, new_path = process_file(file_path, date_folder, third_folder, \n",
					"                                               file_name, storage_account)\n",
					"                if success:\n",
					"                    moved_files['data_success'].append(new_path)\n",
					"                else:\n",
					"                    moved_files['failed'].append(f\"{file_path} (processing failed)\")\n",
					"            else:\n",
					"                moved_files['failed'].append(f\"{file_path} (invalid folder structure)\")\n",
					"                \n",
					"        except Exception as e:\n",
					"            print(f\"Error processing {file_path}: {str(e)}\")\n",
					"            moved_files['failed'].append(f\"{file_path} (processing error)\")\n",
					"            continue\n",
					"    \n",
					"    print_detailed_summary(moved_files)\n",
					"\n",
					"if __name__ == \"__main__\":\n",
					"    main()"
				],
				"execution_count": 6
			}
		]
	}
}