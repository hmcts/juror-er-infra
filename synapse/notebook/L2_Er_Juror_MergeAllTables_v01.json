{
	"name": "L2_Er_Juror_MergeAllTables_v01",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c111d51f-48e4-4a64-a867-93cb6842682a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession, Window\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"import json\n",
					"from datetime import datetime\n",
					"import os\n",
					"import re"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"source": [
					"def create_spark_session():\n",
					"    \"\"\"Create and return a Spark session\"\"\"\n",
					"    return SparkSession.builder \\\n",
					"        .appName(\"Electoral Data ETL\") \\\n",
					"        .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\n",
					"        .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\") \\\n",
					"        .getOrCreate()"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"source": [
					"def extract_digits(value):\n",
					"    \"\"\"Extract only digits from a string\"\"\"\n",
					"    if value:\n",
					"        return re.sub(r'\\D', '', value)\n",
					"    return None\n",
					"\n",
					"# Register the UDF\n",
					"extract_digits_udf = udf(extract_digits, StringType())"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"source": [
					"def read_with_enforced_schema(spark, files_path, schema_path):\n",
					"    \"\"\"Read parquet files with an enforced schema from a JSON file\"\"\"\n",
					"    try:\n",
					"        # Read the schema from JSON\n",
					"        schema_json = spark.read.text(schema_path).collect()[0][0]\n",
					"        schema_data = json.loads(schema_json)\n",
					"        \n",
					"        # Convert the schema definition to a StructType\n",
					"        from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DoubleType, DateType, BooleanType\n",
					"        \n",
					"        fields = []\n",
					"        for field in schema_data[\"schema\"]:\n",
					"            field_type = {\n",
					"                \"string\": StringType(),\n",
					"                \"integer\": IntegerType(),\n",
					"                \"double\": DoubleType(),\n",
					"                \"date\": DateType(),\n",
					"                \"boolean\": BooleanType()\n",
					"            }.get(field[\"type\"].lower(), StringType())\n",
					"            \n",
					"            fields.append(StructField(field[\"name\"], field_type, field.get(\"nullable\", True)))\n",
					"        \n",
					"        enforced_schema = StructType(fields)\n",
					"        \n",
					"        # Read parquet files with the enforced schema\n",
					"        print(f\"Reading parquet files with enforced schema from: {files_path}\")\n",
					"        df = spark.read.schema(enforced_schema).parquet(files_path)\n",
					"        \n",
					"        return df\n",
					"    \n",
					"    except Exception as e:\n",
					"        print(f\"Error enforcing schema: {str(e)}\")\n",
					"        raise e"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"source": [
					"def process_files_with_schema(spark, transform_folder, schema_path, output_path):\n",
					"    \"\"\"Process each parquet file with an enforced schema\"\"\"\n",
					"    from notebookutils import mssparkutils\n",
					"    \n",
					"    # Get list of parquet files\n",
					"    all_files = []\n",
					"    try:\n",
					"        print(f\"Listing files in: {transform_folder}\")\n",
					"        files = mssparkutils.fs.ls(transform_folder)\n",
					"        for file_info in files:\n",
					"            if not file_info.isDir and file_info.path.endswith(\".parquet\"):\n",
					"                all_files.append(file_info.path)\n",
					"                print(f\"Found parquet file: {file_info.path}\")\n",
					"            elif file_info.isDir:\n",
					"                # Check inside directories for parquet files\n",
					"                try:\n",
					"                    subfiles = mssparkutils.fs.ls(file_info.path)\n",
					"                    for subfile in subfiles:\n",
					"                        if not subfile.isDir and subfile.path.endswith(\".parquet\"):\n",
					"                            all_files.append(subfile.path)\n",
					"                            print(f\"Found parquet file in subfolder: {subfile.path}\")\n",
					"                except Exception as sub_e:\n",
					"                    print(f\"Error listing subfolder {file_info.path}: {str(sub_e)}\")\n",
					"    except Exception as e:\n",
					"        print(f\"Error listing files: {str(e)}\")\n",
					"    \n",
					"    print(f\"Found {len(all_files)} parquet files to process\")\n",
					"    \n",
					"    if len(all_files) == 0:\n",
					"        print(\"WARNING: No parquet files found! Checking if folder path is correct.\")\n",
					"        try:\n",
					"            # Try listing the parent folder\n",
					"            parent_folder = \"/\".join(transform_folder.split(\"/\")[:-1])\n",
					"            print(f\"Checking parent folder: {parent_folder}\")\n",
					"            parent_files = mssparkutils.fs.ls(parent_folder)\n",
					"            for file_info in parent_files:\n",
					"                print(f\"  Found in parent: {file_info.path} (isDir: {file_info.isDir})\")\n",
					"        except Exception as parent_e:\n",
					"            print(f\"Error listing parent folder: {str(parent_e)}\")\n",
					"        \n",
					"        # Try a direct read approach as fallback\n",
					"        print(\"Attempting direct read as fallback...\")\n",
					"        try:\n",
					"            df = spark.read.parquet(transform_folder)\n",
					"            print(f\"Direct read successful, found {df.count()} rows\")\n",
					"            df.printSchema()\n",
					"            df.write.mode(\"overwrite\").parquet(output_path)\n",
					"            return df\n",
					"        except Exception as direct_e:\n",
					"            print(f\"Direct read failed: {str(direct_e)}\")\n",
					"            raise ValueError(\"No parquet files found to process\")\n",
					"    \n",
					"    # Process each file with the enforced schema\n",
					"    success_dfs = []\n",
					"    failed_files = []\n",
					"    \n",
					"    # First try with schema validation\n",
					"    for file_path in all_files:\n",
					"        try:\n",
					"            print(f\"Processing file with schema: {file_path}\")\n",
					"            # First try to read without schema to see what's in the file\n",
					"            sample_df = spark.read.parquet(file_path)\n",
					"            print(f\"Original schema for {file_path}:\")\n",
					"            sample_df.printSchema()\n",
					"            print(f\"Sample data from {file_path}:\")\n",
					"            sample_df.show(5, truncate=False)\n",
					"            \n",
					"            # Try with enforced schema\n",
					"            df = read_with_enforced_schema(spark, file_path, schema_path)\n",
					"            success_dfs.append(df)\n",
					"        except Exception as e:\n",
					"            print(f\"Failed to process {file_path} with schema: {str(e)}\")\n",
					"            failed_files.append({\"file\": file_path, \"error\": str(e)})\n",
					"    \n",
					"    # If all files failed with schema, try without schema validation\n",
					"    if not success_dfs and all_files:\n",
					"        print(\"All files failed with schema validation. Trying without enforced schema...\")\n",
					"        for file_path in all_files:\n",
					"            try:\n",
					"                print(f\"Processing file without schema: {file_path}\")\n",
					"                df = spark.read.parquet(file_path)\n",
					"                success_dfs.append(df)\n",
					"                print(f\"Successfully read {df.count()} rows without schema enforcement\")\n",
					"            except Exception as e:\n",
					"                print(f\"Failed to process {file_path} even without schema: {str(e)}\")\n",
					"    \n",
					"    # Combine successfully processed DataFrames\n",
					"    if success_dfs:\n",
					"        print(f\"Combining {len(success_dfs)} successfully processed DataFrames\")\n",
					"        combined_df = success_dfs[0]\n",
					"        for df in success_dfs[1:]:\n",
					"            try:\n",
					"                combined_df = combined_df.unionByName(df, allowMissingColumns=True)\n",
					"            except Exception as union_e:\n",
					"                print(f\"Error during union: {str(union_e)}\")\n",
					"                print(\"Trying alternative union approach...\")\n",
					"                # Get common columns\n",
					"                common_cols = list(set(combined_df.columns).intersection(set(df.columns)))\n",
					"                df_subset = df.select(*common_cols)\n",
					"                combined_df_subset = combined_df.select(*common_cols)\n",
					"                combined_df = combined_df_subset.union(df_subset)\n",
					"        \n",
					"        # Write combined data\n",
					"        combined_df.write.mode(\"overwrite\").parquet(output_path)\n",
					"        print(f\"Successfully wrote {combined_df.count()} records to {output_path}\")\n",
					"        \n",
					"        # Write report of failed files\n",
					"        if failed_files:\n",
					"            failed_df = spark.createDataFrame(failed_files)\n",
					"            failed_df.write.mode(\"overwrite\").json(f\"{output_path}_failed_files\")\n",
					"            print(f\"Wrote report of {len(failed_files)} failed files to {output_path}_failed_files\")\n",
					"        \n",
					"        return combined_df\n",
					"    else:\n",
					"        # Last resort: try direct reading of the folder\n",
					"        print(\"All individual file processing failed. Trying direct folder read...\")\n",
					"        try:\n",
					"            df = spark.read.option(\"mergeSchema\", \"true\").parquet(transform_folder)\n",
					"            print(f\"Direct folder read successful, found {df.count()} rows\")\n",
					"            df.write.mode(\"overwrite\").parquet(output_path)\n",
					"            return df\n",
					"        except Exception as last_e:\n",
					"            print(f\"Last resort direct read failed: {str(last_e)}\")\n",
					"            raise ValueError(\"No files could be processed successfully\")"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"source": [
					"def merge_and_transform_to_target_schema(spark, transform_folder, output_path):\n",
					"    \"\"\"\n",
					"    Merge all parquet files and transform to target schema\n",
					"    \"\"\"\n",
					"    print(f\"Reading parquet files from: {transform_folder}\")\n",
					"    \n",
					"    # Read all parquet files from the transformation folder\n",
					"    try:\n",
					"        all_data = spark.read.parquet(f\"{transform_folder}/*.parquet\")\n",
					"        print(f\"Successfully read {all_data.count()} records from parquet files\")\n",
					"    except Exception as e:\n",
					"        print(f\"Error reading parquet files: {str(e)}\")\n",
					"        raise e\n",
					"    \n",
					"    # Create a window spec to identify the most recent file for each elector\n",
					"    window_spec = Window.partitionBy(\"Elector Number\").orderBy(desc(\"CreationDate\"))\n",
					"    \n",
					"    # Add row number within each partition to identify most recent records\n",
					"    all_data = all_data.withColumn(\"row_num\", row_number().over(window_spec))\n",
					"    \n",
					"    # Filter to keep only the most recent record for each elector\n",
					"    deduplicated_data = all_data.filter(col(\"row_num\") == 1).drop(\"row_num\")\n",
					"    print(f\"After deduplication: {deduplicated_data.count()} records\")\n",
					"    \n",
					"    # Hash sensitive information\n",
					"    columns_to_hash = [\"Elector Forename\", \"Elector Surname\", \"Elector DOB\", \"Address1\"]\n",
					"    \n",
					"    # Create a list of columns that are not in the hash list\n",
					"    non_hash_columns = [c for c in deduplicated_data.columns if c not in columns_to_hash]\n",
					"    \n",
					"    # Add hash ID\n",
					"    hashed_data = deduplicated_data.withColumn(\n",
					"        \"HASH_ID\", \n",
					"        xxhash64(concat_ws(\",\", *[col(c) for c in non_hash_columns]))\n",
					"    )\n",
					"    \n",
					"    # Transform to target schema\n",
					"    target_data = hashed_data.select(\n",
					"        lit(None).cast(\"string\").alias(\"loc_code\"),\n",
					"        lit(None).cast(\"string\").alias(\"part_no\"),\n",
					"        when(col(\"LA_Code\").isNotNull(), \n",
					"             regexp_replace(col(\"LA_Code\"), \"[^0-9]\", \"\").cast(\"int\"))\n",
					"        .otherwise(lit(None)).alias(\"register_lett\"),\n",
					"        \n",
					"        # Extract Elector Number as poll_number\n",
					"        when(col(\"Elector Number\").isNotNull(), col(\"Elector Number\").cast(\"int\"))\n",
					"        .when(col(\"Elector Number Prefix\").isNotNull() & col(\"Elector Number\").isNotNull(),\n",
					"              concat(col(\"Elector Number Prefix\"), col(\"Elector Number\")).cast(\"int\"))\n",
					"        .otherwise(\n",
					"            when(col(\"LA_Code\").isNotNull(), \n",
					"                 regexp_replace(col(\"LA_Code\"), \"[^0-9]\", \"\").cast(\"int\"))\n",
					"            .otherwise(lit(None))\n",
					"        ).alias(\"poll_number\"),\n",
					"        \n",
					"        col(\"Elector Markers\").alias(\"new_marker\"),\n",
					"        col(\"Elector Title\").alias(\"title\"),\n",
					"        col(\"Elector Surname\").alias(\"lname\"),\n",
					"        col(\"Elector Forename\").alias(\"fname\"),\n",
					"        col(\"Elector DOB\").alias(\"dob\"),\n",
					"        col(\"Flasg/Markers\").alias(\"flags\"),\n",
					"        col(\"Address1\").alias(\"address\"),\n",
					"        col(\"Address2\").alias(\"address2\"),\n",
					"        col(\"Address3\").alias(\"address3\"),\n",
					"        col(\"Address4\").alias(\"address4\"),\n",
					"        col(\"Address5\").alias(\"address5\"),\n",
					"        col(\"Address6\").alias(\"address6\"),\n",
					"        col(\"PostCode\").alias(\"zip\"),\n",
					"        lit(None).cast(\"date\").alias(\"date_selected1\"),\n",
					"        lit(None).cast(\"date\").alias(\"date_selected2\"),\n",
					"        lit(None).cast(\"date\").alias(\"date_selected3\"),\n",
					"        when(col(\"LA_Code\").isNotNull(), \n",
					"             regexp_replace(col(\"LA_Code\"), \"[^0-9]\", \"\").cast(\"int\"))\n",
					"        .otherwise(lit(None)).alias(\"rec_num\"),\n",
					"        lit(None).cast(\"string\").alias(\"perm_disqual\"),\n",
					"        lit(None).cast(\"string\").alias(\"source_id\"),\n",
					"        \n",
					"        # Generate postcode_start from zip\n",
					"        when(col(\"PostCode\").isNotNull(),\n",
					"             split(trim(col(\"PostCode\")), \" \")[0]\n",
					"        ).otherwise(lit(None)).alias(\"postcode_start\"),\n",
					"        \n",
					"        # Include original hash ID and creation date for reference\n",
					"        col(\"HASH_ID\"),\n",
					"        col(\"CreationDate\")\n",
					"    )\n",
					"    \n",
					"    # Write the transformed data to the output path\n",
					"    target_data.write.mode(\"overwrite\").parquet(output_path)\n",
					"    \n",
					"    print(f\"Successfully wrote {target_data.count()} records to {output_path}\")\n",
					"    \n",
					"    return target_data\n",
					"\n",
					"def process_all_files(transform_folder, output_path):\n",
					"    \"\"\"\n",
					"    Main processing function\n",
					"    \"\"\"\n",
					"    spark = create_spark_session()\n",
					"    \n",
					"    # Merge all parquet files and transform to target schema\n",
					"    target_data = merge_and_transform_to_target_schema(spark, transform_folder, output_path)\n",
					"    \n",
					"    # Show sample of transformed data\n",
					"    print(\"\\nSample of transformed data:\")\n",
					"    target_data.show(5)\n",
					"    \n",
					"    # Show schema of transformed data\n",
					"    print(\"\\nSchema of transformed data:\")\n",
					"    target_data.printSchema()\n",
					"    \n",
					"    # Count records\n",
					"    record_count = target_data.count()\n",
					"    print(f\"\\nTotal records in target schema: {record_count}\")\n",
					"    \n",
					"    return record_count\n",
					"\n",
					"# Main execution\n",
					"if __name__ == \"__main__\":\n",
					"    # Paths\n",
					"    storage_account = \"baubaisadfsastg\"\n",
					"    transform_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/transformation\"\n",
					"    schema_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/config/schema/colum_map_schena.json\"\n",
					"    output_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/voters_temp\"\n",
					"    \n",
					"    # Create Spark session\n",
					"    spark = create_spark_session()\n",
					"    \n",
					"    # Process files with enforced schema\n",
					"    df = process_files_with_schema(spark, transform_folder, schema_path, output_path)\n",
					"    \n",
					"    # Process all files\n",
					"    record_count = process_all_files(transform_folder, output_path)\n",
					"    \n",
					"    print(f\"\\nProcessing completed. {record_count} records written to {output_path}\")"
				],
				"execution_count": 33
			}
		]
	}
}