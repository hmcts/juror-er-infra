{
	"name": "L2_Tranfromation",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e678c449-a61a-4775-bf41-6093f5468684"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"import json\n",
					"from datetime import datetime\n",
					"import os"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def create_spark_session():\n",
					"    \"\"\"Create and return a Spark session\"\"\"\n",
					"    return SparkSession.builder \\\n",
					"        .appName(\"Electoral Data ETL\") \\\n",
					"        .getOrCreate()\n",
					"\n",
					"def read_column_mapping(spark, config_path):\n",
					"    \"\"\"Read and parse the column mapping configuration\"\"\"\n",
					"    try:\n",
					"        # Read the JSON file as a single text file\n",
					"        mapping_df = spark.read.text(config_path)\n",
					"        \n",
					"        # Combine all lines into a single string\n",
					"        json_str = mapping_df.agg(concat_ws(\"\", collect_list(\"value\"))).collect()[0][0]\n",
					"        \n",
					"        # Parse the JSON string\n",
					"        mapping_dict = json.loads(json_str)\n",
					"        return mapping_dict[\"mappings\"]\n",
					"    except Exception as e:\n",
					"        print(f\"Error reading mapping file: {str(e)}\")\n",
					"        # Fallback: try reading directly using wholeTextFiles\n",
					"        try:\n",
					"            mapping_rdd = spark.sparkContext.wholeTextFiles(config_path)\n",
					"            json_str = mapping_rdd.values().first()\n",
					"            mapping_dict = json.loads(json_str)\n",
					"            return mapping_dict[\"mappings\"]\n",
					"        except Exception as e2:\n",
					"            raise Exception(f\"Failed to read mapping file. Primary error: {str(e)}, Fallback error: {str(e2)}\")\n",
					"\n",
					"def get_reverse_mapping(column_mapping):\n",
					"    \"\"\"Create a reverse mapping for easy lookup\"\"\"\n",
					"    reverse_map = {}\n",
					"    for standard_name, variations in column_mapping.items():\n",
					"        for variation in variations:\n",
					"            reverse_map[variation.lower()] = standard_name\n",
					"    return reverse_map\n",
					"\n",
					"def list_files(spark, folder_path, file_extension):\n",
					"    \"\"\"List all files with specific extension in a folder\"\"\"\n",
					"    return spark.sparkContext.wholeTextFiles(f\"{folder_path}/*.{file_extension}\").keys().collect()\n",
					"\n",
					"def process_file(spark, file_path, reverse_mapping, output_path, error_path):\n",
					"    \"\"\"Process individual file with error handling\"\"\"\n",
					"    try:\n",
					"        # Extract creation date from filename\n",
					"        file_name = os.path.basename(file_path)\n",
					"        creation_date = datetime.strptime(file_name[:8], '%Y%m%d').date() if len(file_name) >= 8 else None\n",
					"\n",
					"        # Read the file based on extension\n",
					"        if file_path.lower().endswith('.csv'):\n",
					"            df = spark.read.option(\"header\", \"true\") \\\n",
					"                         .option(\"inferSchema\", \"true\") \\\n",
					"                         .csv(file_path)\n",
					"        elif file_path.lower().endswith(('.xlsx', '.xls')):\n",
					"            df = spark.read.format(\"com.crealytics.spark.excel\") \\\n",
					"                         .option(\"header\", \"true\") \\\n",
					"                         .option(\"inferSchema\", \"true\") \\\n",
					"                         .load(file_path)\n",
					"        else:\n",
					"            raise ValueError(f\"Unsupported file format: {file_path}\")\n",
					"\n",
					"        # Standardize column names\n",
					"        for col in df.columns:\n",
					"            std_name = reverse_mapping.get(col.lower())\n",
					"            if std_name:\n",
					"                df = df.withColumnRenamed(col, std_name)\n",
					"\n",
					"        # Apply transformations\n",
					"        df = transform_data(df, creation_date)\n",
					"\n",
					"        # Save as parquet\n",
					"        output_file = f\"{output_path}/{os.path.splitext(file_name)[0]}.parquet\"\n",
					"        df.write.mode(\"overwrite\").parquet(output_file)\n",
					"\n",
					"        return {\n",
					"            \"file\": file_name,\n",
					"            \"status\": \"success\",\n",
					"            \"output\": output_file\n",
					"        }\n",
					"\n",
					"    except Exception as e:\n",
					"        error_report = {\n",
					"            \"file\": file_name,\n",
					"            \"status\": \"error\",\n",
					"            \"error\": str(e)\n",
					"        }\n",
					"        \n",
					"        # Save error report\n",
					"        error_file = f\"{error_path}/{os.path.splitext(file_name)[0]}_error.json\"\n",
					"        spark.createDataFrame([error_report]).write.mode(\"overwrite\").json(error_file)\n",
					"        \n",
					"        return error_report\n",
					"\n",
					"def transform_data(df, creation_date):\n",
					"    \"\"\"Apply all required transformations to the dataframe\"\"\"\n",
					"    \n",
					"    # Clean and capitalize text columns\n",
					"    for col in df.columns:\n",
					"        if df.schema[col].dataType == StringType():\n",
					"            df = df.withColumn(col, upper(trim(col(col))))\n",
					"\n",
					"    # Handle special column combinations\n",
					"    if \"Elector Forename\" in df.columns:\n",
					"        # Add Suffix if exists\n",
					"        if \"Suffix\" in df.columns:\n",
					"            df = df.withColumn(\n",
					"                \"Elector Forename\",\n",
					"                concat(col(\"Elector Forename\"), lit(\" \"), coalesce(col(\"Suffix\"), lit(\"\")))\n",
					"            )\n",
					"\n",
					"        # Add Middle Name if exists\n",
					"        if \"Elector Middlename\" in df.columns:\n",
					"            df = df.withColumn(\n",
					"                \"Elector Forename\",\n",
					"                concat(col(\"Elector Forename\"), lit(\" \"), coalesce(col(\"Elector Middlename\"), lit(\"\")))\n",
					"            )\n",
					"\n",
					"        # Add Initials if exists\n",
					"        if \"Initials\" in df.columns:\n",
					"            df = df.withColumn(\n",
					"                \"Elector Forename\",\n",
					"                concat(col(\"Elector Forename\"), lit(\" \"), coalesce(col(\"Initials\"), lit(\"\")))\n",
					"            )\n",
					"\n",
					"    # Add creation date\n",
					"    if creation_date:\n",
					"        df = df.withColumn(\"CreationDate\", lit(creation_date.isoformat()))\n",
					"\n",
					"    return df\n",
					"\n",
					"def main():\n",
					"    # Initialize Spark\n",
					"    spark = create_spark_session()\n",
					"\n",
					"    # Storage paths from configuration\n",
					"    storage_account = \"abfss://juror-etl@baubaisadfsastg.dfs.core.windows.net\"\n",
					"    csv_folder = f\"{storage_account}/csv\"\n",
					"    excel_folder = f\"{storage_account}/csv\"\n",
					"    config_folder = f\"{storage_account}/config/schema\"\n",
					"    transform_folder = f\"{storage_account}/transformation\"\n",
					"    error_folder = f\"{transform_folder}/errors\"\n",
					"\n",
					"    # Read column mapping\n",
					"    mapping_file = f\"{config_folder}/col_mapping.json\"\n",
					"    try:\n",
					"        column_mapping = read_column_mapping(spark, mapping_file)\n",
					"        reverse_mapping = get_reverse_mapping(column_mapping)\n",
					"    except Exception as e:\n",
					"        print(f\"Fatal error reading mapping file: {str(e)}\")\n",
					"        return\n",
					"\n",
					"    # Get list of files to process\n",
					"    csv_files = list_files(spark, csv_folder, \"csv\")\n",
					"    excel_files = list_files(spark, excel_folder, \"xlsx\") + list_files(spark, excel_folder, \"xls\")\n",
					"    all_files = csv_files + excel_files\n",
					"\n",
					"    # Process all files\n",
					"    results = []\n",
					"    for file_path in all_files:\n",
					"        result = process_file(\n",
					"            spark,\n",
					"            file_path,\n",
					"            reverse_mapping,\n",
					"            transform_folder,\n",
					"            error_folder\n",
					"        )\n",
					"        results.append(result)\n",
					"\n",
					"    # Generate summary report\n",
					"    summary_df = spark.createDataFrame(results)\n",
					"    summary_df.write.mode(\"overwrite\").json(f\"{transform_folder}/processing_summary.json\")\n",
					"\n",
					"    # Print summary\n",
					"    print(\"\\nProcessing Summary:\")\n",
					"    print(f\"Total files processed: {len(results)}\")\n",
					"    print(f\"Successful: {len([r for r in results if r['status'] == 'success'])}\")\n",
					"    print(f\"Failed: {len([r for r in results if r['status'] == 'error'])}\")\n",
					"\n",
					"if __name__ == \"__main__\":\n",
					"    main()"
				],
				"execution_count": null
			}
		]
	}
}