{
	"name": "L3_Er_Juror_DataLake_ErickSchema",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2d58fc14-a109-43f6-a0c7-98276ad1eda1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"from notebookutils import mssparkutils\n",
					"import logging\n",
					"from datetime import datetime"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"# Configure logging\n",
					"logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
					"logger = logging.getLogger()\n",
					"\n",
					"# Initialize Spark session with Delta Lake support\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"Voters Data Lake Export\") \\\n",
					"    .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\n",
					"    .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\") \\\n",
					"    .getOrCreate()"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"def export_voters_to_datalake():\n",
					"    \"\"\"\n",
					"    Exports voters_deduplicated data to a Delta table in the data lake.\n",
					"    If the table exists, it overwrites the data and schema.\n",
					"    \"\"\"\n",
					"    try:\n",
					"        # Initialize storage paths\n",
					"        storage_account = \"baubaisadfsastg\"\n",
					"        source_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/voters_deduplicated\"\n",
					"        \n",
					"        # Define Delta table path\n",
					"        delta_table_path = f\"abfss://dl-juror-eric-voters-temp@{storage_account}.dfs.core.windows.net/voters_deduplicated_delta\"\n",
					"        delta_table_name = \"db_whs.voters_deduplicated\"  # Delta table in the db_whs database\n",
					"        \n",
					"        # Read source data\n",
					"        logger.info(f\"Reading voter data from {source_path}\")\n",
					"        voters_df = spark.read.parquet(source_path)\n",
					"        record_count = voters_df.count()\n",
					"        logger.info(f\"Loaded {record_count} voter records\")\n",
					"        \n",
					"        # Write data to Delta table with overwrite mode\n",
					"        logger.info(f\"Writing data to Delta table: {delta_table_name}\")\n",
					"        voters_df.write \\\n",
					"            .mode(\"overwrite\") \\\n",
					"            .option(\"overwriteSchema\", \"true\") \\\n",
					"            .format(\"delta\") \\\n",
					"            .saveAsTable(delta_table_name)  # Save as a Delta table in the db_whs database\n",
					"        \n",
					"        # Verify successful write\n",
					"        logger.info(f\"Successfully wrote {record_count} records to Delta table: {delta_table_name}\")\n",
					"        \n",
					"        # Return success\n",
					"        return True, delta_table_name\n",
					"        \n",
					"    except Exception as e:\n",
					"        logger.error(f\"Error in data lake export process: {str(e)}\")\n",
					"        import traceback\n",
					"        logger.error(traceback.format_exc())\n",
					"        return False, None\n",
					"\n",
					"# Execute the export\n",
					"if __name__ == \"__main__\":\n",
					"    success, table_name = export_voters_to_datalake()\n",
					"    if success:\n",
					"        print(f\"Data lake export completed successfully\")\n",
					"        print(f\"Delta table created/overwritten: {table_name}\")\n",
					"        print(f\"Use this table for your downstream processes\")\n",
					"    else:\n",
					"        print(\"Data lake export failed\")"
				],
				"execution_count": 3
			}
		]
	}
}