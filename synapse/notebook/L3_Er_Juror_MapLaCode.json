{
	"name": "L3_Er_Juror_MapLaCode",
	"properties": {
		"folder": {
			"name": "Archive"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a5ad6a5f-b20e-47f4-b1b9-c74606116569"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.window import Window\n",
					"from notebookutils import mssparkutils\n",
					"import logging\n",
					"from datetime import datetime"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Configure logging\n",
					"logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
					"logger = logging.getLogger()\n",
					"\n",
					"# Initialize Spark session\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"Court Location Mapping - Date Organized\") \\\n",
					"    .config(\"spark.sql.shuffle.partitions\", \"200\") \\\n",
					"    .config(\"spark.sql.autoBroadcastJoinThreshold\", \"100MB\") \\\n",
					"    .getOrCreate()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"def map_court_locations_to_datalake():\n",
					"    \"\"\"\n",
					"    Maps the court locations data using date-organized structure in data lake.\n",
					"    Uses inner join and applies proper deduplication.\n",
					"    \"\"\"\n",
					"    try:\n",
					"        # Initialize storage paths\n",
					"        storage_account = \"baubaisadfsastg\"\n",
					"        voters_source_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/voters_deduplicated\"\n",
					"        mapping_csv_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/config/la_code_tbl/tbl_lacodeToRecNum.csv\"\n",
					"        \n",
					"        # Create date-based output path\n",
					"        current_date = datetime.now().strftime(\"%Y-%m-%d\")\n",
					"        base_output_path = f\"abfss://eric-juror-voters-temp@{storage_account}.dfs.core.windows.net\"\n",
					"        date_output_path = f\"{base_output_path}/{current_date}\"\n",
					"        \n",
					"        # Read voters data\n",
					"        logger.info(f\"Reading voters data from {voters_source_path}\")\n",
					"        voters_df = spark.read.parquet(voters_source_path)\n",
					"        original_count = voters_df.count()\n",
					"        logger.info(f\"Loaded {original_count} voter records\")\n",
					"        \n",
					"        # Read the court location mapping CSV\n",
					"        logger.info(f\"Reading court location mapping from {mapping_csv_path}\")\n",
					"        mapping_df = spark.read.option(\"header\", \"true\") \\\n",
					"                             .option(\"inferSchema\", \"true\") \\\n",
					"                             .csv(mapping_csv_path)\n",
					"        \n",
					"        # Print column names for reference\n",
					"        logger.info(f\"Voter dataframe columns: {voters_df.columns}\")\n",
					"        logger.info(f\"Mapping dataframe columns: {mapping_df.columns}\")\n",
					"        \n",
					"        # Ensure data types match for join\n",
					"        voters_df = voters_df.withColumn(\"rec_num\", col(\"rec_num\").cast(\"string\"))\n",
					"        mapping_df = mapping_df.withColumn(\"LOCAL_AUTHORITY_CODE\", col(\"LOCAL_AUTHORITY_CODE\").cast(\"string\"))\n",
					"        \n",
					"        # Rename the LOC_CODE column in mapping_df to avoid ambiguity\n",
					"        mapping_df = mapping_df.withColumnRenamed(\"LOC_CODE\", \"mapping_loc_code\")\n",
					"        \n",
					"        # Broadcast the mapping table since it's likely much smaller\n",
					"        from pyspark.sql.functions import broadcast\n",
					"        \n",
					"        # Perform the join to update loc_code - USING INNER JOIN \n",
					"        logger.info(\"Performing INNER JOIN based on rec_num = LOCAL_AUTHORITY_CODE\")\n",
					"        joined_df = voters_df.alias(\"v\").join(\n",
					"            broadcast(mapping_df.alias(\"m\")),\n",
					"            col(\"v.rec_num\") == col(\"m.LOCAL_AUTHORITY_CODE\"),\n",
					"            \"inner\"  # Only keep records with matches\n",
					"        )\n",
					"        \n",
					"        # Select columns, replacing loc_code with mapping_loc_code\n",
					"        selected_columns = []\n",
					"        for column in voters_df.columns:\n",
					"            if column == \"loc_code\":\n",
					"                selected_columns.append(col(\"m.mapping_loc_code\").alias(\"loc_code\"))\n",
					"            else:\n",
					"                selected_columns.append(col(f\"v.{column}\"))\n",
					"        \n",
					"        # Add processing date as metadata\n",
					"        final_df = joined_df.select(*selected_columns) \\\n",
					"                           .withColumn(\"mapping_date\", lit(current_date))\n",
					"        \n",
					"        # Check for duplicates in the result\n",
					"        hash_id_duplicate_check = final_df.groupBy(\"hash_id\").count().filter(col(\"count\") > 1)\n",
					"        hash_id_duplicate_count = hash_id_duplicate_check.count()\n",
					"        \n",
					"        if hash_id_duplicate_count > 0:\n",
					"            logger.warning(f\"Found {hash_id_duplicate_count} distinct hash_id values with duplicates in result\")\n",
					"            logger.info(\"Applying deduplication based on hash_id\")\n",
					"            \n",
					"            # Apply deduplication to keep only one record per hash_id\n",
					"            window_spec = Window.partitionBy(\"hash_id\").orderBy(desc(\"creation_date\"))\n",
					"            final_df = final_df.withColumn(\"row_num\", row_number().over(window_spec)) \\\n",
					"                            .filter(col(\"row_num\") == 1) \\\n",
					"                            .drop(\"row_num\")\n",
					"        \n",
					"        # Get final record count\n",
					"        final_count = final_df.count()\n",
					"        logger.info(f\"Final record count after mapping: {final_count}\")\n",
					"        logger.info(f\"Records retained from original: {final_count}/{original_count} ({final_count/original_count:.2%})\")\n",
					"        \n",
					"        # Create metadata summary\n",
					"        metadata_df = spark.createDataFrame([\n",
					"            (current_date, \"voters_mapped\", original_count, final_count, \n",
					"             float(final_count)/float(original_count), hash_id_duplicate_count)\n",
					"        ], [\"date\", \"dataset\", \"input_count\", \"output_count\", \"retention_rate\", \"duplicates_removed\"])\n",
					"        \n",
					"        # Ensure base directory exists\n",
					"        if not mssparkutils.fs.exists(base_output_path):\n",
					"            logger.info(f\"Creating base output directory: {base_output_path}\")\n",
					"            mssparkutils.fs.mkdirs(base_output_path)\n",
					"        \n",
					"        # Write the data to date-specific directory\n",
					"        logger.info(f\"Writing mapped data to date-specific path: {date_output_path}\")\n",
					"        final_df.write.mode(\"overwrite\").parquet(date_output_path)\n",
					"        \n",
					"        # Write metadata summary\n",
					"        metadata_path = f\"{base_output_path}/metadata\"\n",
					"        if not mssparkutils.fs.exists(metadata_path):\n",
					"            mssparkutils.fs.mkdirs(metadata_path)\n",
					"        \n",
					"        metadata_df.write.mode(\"append\").parquet(f\"{metadata_path}/mapping_summary\")\n",
					"        \n",
					"        # Create a latest.txt file with the current date for easy identification of latest data\n",
					"        latest_path = f\"{base_output_path}/latest.txt\"\n",
					"        mssparkutils.fs.put(latest_path, current_date, True)\n",
					"        \n",
					"        # Verify successful write to date-specific directory\n",
					"        if mssparkutils.fs.exists(date_output_path):\n",
					"            logger.info(f\"Successfully wrote {final_count} records to {date_output_path}\")\n",
					"            \n",
					"            # Create a _SUCCESS flag file\n",
					"            mssparkutils.fs.put(f\"{date_output_path}/_SUCCESS\", \"\", True)\n",
					"            \n",
					"            # Return success\n",
					"            return True, date_output_path\n",
					"        else:\n",
					"            logger.error(f\"Failed to write data to {date_output_path}\")\n",
					"            return False, None\n",
					"            \n",
					"    except Exception as e:\n",
					"        logger.error(f\"Error in court location mapping process: {str(e)}\")\n",
					"        import traceback\n",
					"        logger.error(traceback.format_exc())\n",
					"        return False, None\n",
					"\n",
					"# Execute the mapping\n",
					"if __name__ == \"__main__\":\n",
					"    success, output_path = map_court_locations_to_datalake()\n",
					"    if success:\n",
					"        print(f\"Court location mapping completed successfully\")\n",
					"        print(f\"Output written to: {output_path}\")\n",
					"        print(f\"Use this path for your PostgreSQL load process\")\n",
					"    else:\n",
					"        print(\"Court location mapping failed\")"
				],
				"execution_count": null
			}
		]
	}
}