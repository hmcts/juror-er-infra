{
	"name": "L3_Er_Juror_MapLaCode",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "955ed8f8-7146-4dee-98c3-7773477cb7bf"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"from notebookutils import mssparkutils\n",
					"import logging\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"# Configure logging\n",
					"logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
					"logger = logging.getLogger()\n",
					"\n",
					"# Initialize Spark session with optimized configuration for joins\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"Court Location Mapping\") \\\n",
					"    .config(\"spark.sql.shuffle.partitions\", \"200\") \\\n",
					"    .config(\"spark.sql.autoBroadcastJoinThreshold\", \"100MB\") \\\n",
					"    .getOrCreate()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def map_court_locations():\n",
					"    \"\"\"\n",
					"    Maps the court locations by updating loc_code in voters_deduplicated\n",
					"    based on matching LOCAL_AUTHORITY_CODE to rec_num\n",
					"    \"\"\"\n",
					"    try:\n",
					"        # Initialize storage paths\n",
					"        storage_account = \"baubaisadfsastg\"\n",
					"        voters_temp_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/voters_deduplicated\"\n",
					"        mapping_csv_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/config/la_code_tbl/tbl_lacodeToRecNum.csv\"\n",
					"        output_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/voters_mapped\"\n",
					"        \n",
					"        # Read voters data\n",
					"        logger.info(f\"Reading voters data from {voters_temp_path}\")\n",
					"        voters_df = spark.read.parquet(voters_temp_path)\n",
					"        original_count = voters_df.count()\n",
					"        logger.info(f\"Loaded {original_count} voter records\")\n",
					"        \n",
					"        # Check if rec_num column exists\n",
					"        if \"rec_num\" not in voters_df.columns:\n",
					"            logger.error(\"rec_num column not found in voters_temp\")\n",
					"            return False\n",
					"            \n",
					"        # Print sample data\n",
					"        logger.info(\"Sample voter records:\")\n",
					"        voters_df.select(\"rec_num\", \"loc_code\").show(5)\n",
					"        \n",
					"        # Read the court location mapping CSV\n",
					"        logger.info(f\"Reading court location mapping from {mapping_csv_path}\")\n",
					"        mapping_df = spark.read.option(\"header\", \"true\") \\\n",
					"                               .option(\"inferSchema\", \"true\") \\\n",
					"                               .csv(mapping_csv_path)\n",
					"        \n",
					"        # Verify required columns exist\n",
					"        required_columns = [\"LOCAL_AUTHORITY_CODE\", \"LOC_CODE\"]\n",
					"        for col_name in required_columns:\n",
					"            if col_name not in mapping_df.columns:\n",
					"                logger.error(f\"Required column {col_name} not found in mapping CSV\")\n",
					"                logger.info(f\"Available columns: {mapping_df.columns}\")\n",
					"                return False\n",
					"        \n",
					"        # Print sample mapping data\n",
					"        logger.info(\"Sample mapping data:\")\n",
					"        mapping_df.select(\"LOCAL_AUTHORITY_CODE\", \"LOC_CODE\").show(5)\n",
					"        \n",
					"        # Ensure data types match for join\n",
					"        voters_df = voters_df.withColumn(\"rec_num\", col(\"rec_num\").cast(\"string\"))\n",
					"        mapping_df = mapping_df.withColumn(\"LOCAL_AUTHORITY_CODE\", col(\"LOCAL_AUTHORITY_CODE\").cast(\"string\"))\n",
					"        \n",
					"        # Broadcast the mapping table since it's likely much smaller\n",
					"        from pyspark.sql.functions import broadcast\n",
					"        \n",
					"        # Perform the join to update loc_code\n",
					"        joined_df = voters_df.alias(\"v\").join(\n",
					"            broadcast(mapping_df.alias(\"m\")),\n",
					"            col(\"v.rec_num\") == col(\"m.LOCAL_AUTHORITY_CODE\"),\n",
					"            \"left_outer\"  # Keep all voter records even if no match found\n",
					"        )\n",
					"        \n",
					"        # Update the loc_code with LOC_CODE from mapping where match exists\n",
					"        updated_df = joined_df.withColumn(\n",
					"            \"updated_loc_code\", \n",
					"            when(col(\"m.LOC_CODE\").isNotNull(), col(\"m.LOC_CODE\"))\n",
					"            .otherwise(col(\"v.loc_code\"))\n",
					"        )\n",
					"        \n",
					"        # Select all original columns but use the updated loc_code\n",
					"        final_columns = []\n",
					"        for column in voters_df.columns:\n",
					"            if column == \"loc_code\":\n",
					"                final_columns.append(col(\"updated_loc_code\").alias(\"loc_code\"))\n",
					"            else:\n",
					"                final_columns.append(col(f\"v.{column}\"))\n",
					"        \n",
					"        final_df = updated_df.select(*final_columns)\n",
					"        \n",
					"        # Count records with updated loc_code\n",
					"        total_records = final_df.count()\n",
					"        updated_records = joined_df.filter(col(\"m.LOC_CODE\").isNotNull()).count()\n",
					"        \n",
					"        logger.info(f\"Mapping statistics:\")\n",
					"        logger.info(f\"- Total records: {total_records}\")\n",
					"        logger.info(f\"- Records with loc_code updated: {updated_records} ({updated_records/total_records:.2%})\")\n",
					"        \n",
					"        # Write the updated data\n",
					"        logger.info(f\"Writing mapped data to {output_path}\")\n",
					"        final_df.write.mode(\"overwrite\").parquet(output_path)\n",
					"        \n",
					"        # Verify successful write\n",
					"        if mssparkutils.fs.exists(output_path):\n",
					"            logger.info(f\"Successfully wrote {total_records} records with updated court location mappings\")\n",
					"            return True\n",
					"        else:\n",
					"            logger.error(\"Failed to write mapped data to destination\")\n",
					"            return False\n",
					"            \n",
					"    except Exception as e:\n",
					"        logger.error(f\"Error in court location mapping process: {str(e)}\")\n",
					"        import traceback\n",
					"        logger.error(traceback.format_exc())\n",
					"        return False\n",
					"\n",
					"# Execute the mapping\n",
					"if __name__ == \"__main__\":\n",
					"    success = map_court_locations()\n",
					"    if success:\n",
					"        print(\"Court location mapping completed successfully\")\n",
					"    else:\n",
					"        print(\"Court location mapping failed\")"
				],
				"execution_count": null
			}
		]
	}
}