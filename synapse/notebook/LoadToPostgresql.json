{
	"name": "LoadToPostgresql",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "71bb4606-0bcb-4ad7-b9ad-08005acd1745"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"from notebookutils import mssparkutils\n",
					"import logging\n",
					"import time\n",
					"import psycopg2\n",
					"\n",
					"# Configure logging\n",
					"logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
					"logger = logging.getLogger()\n",
					"\n",
					"# Initialize Spark session with PostgreSQL JDBC driver\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"Voters PostgreSQL Loader\") \\\n",
					"    .config(\"spark.jars\", \"/opt/spark/jars/postgresql-42.2.18.jar\") \\\n",
					"    .getOrCreate()\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"def load_data_and_call_procedure():\n",
					"    \"\"\"\n",
					"    Loads data into staging_voters and calls the stored procedure\n",
					"    \"\"\"\n",
					"    try:\n",
					"        # Start timing\n",
					"        start_time = time.time()\n",
					"        \n",
					"        # Initialize storage paths\n",
					"        storage_account = \"baubaisadfsastg\"\n",
					"        source_path = f\"abfss://dl-juror-eric-voters-temp@{storage_account}.dfs.core.windows.net/2025-03-24\"\n",
					"        \n",
					"        # PostgreSQL connection details\n",
					"        pg_host = \"juror-api-demo.postgres.database.azure.com\"\n",
					"        pg_database = \"juror\"\n",
					"        pg_user = \"DTS JIT Access Juror DB Admin\"  # User with managed identity\n",
					"        \n",
					"        # Stage table name\n",
					"        staging_table = \"juror_eric.staging_voters\"\n",
					"        \n",
					"        # JDBC connection string\n",
					"        jdbc_url = f\"jdbc:postgresql://{pg_host}:5432/{pg_database}\"\n",
					"        \n",
					"        # JDBC connection properties\n",
					"        jdbc_properties = {\n",
					"            \"user\": pg_user,\n",
					"            \"driver\": \"org.postgresql.Driver\",\n",
					"            \"ssl\": \"true\",\n",
					"            \"sslmode\": \"require\",\n",
					"            \"batchsize\": \"10000\",  # Larger batch size for better performance\n",
					"            \"reWriteBatchedInserts\": \"true\"  # Enable batch optimization\n",
					"        }\n",
					"        \n",
					"        # Read source data\n",
					"        logger.info(f\"Reading data from {source_path}\")\n",
					"        df = spark.read.parquet(source_path)\n",
					"        record_count = df.count()\n",
					"        logger.info(f\"Loaded {record_count} records\")\n",
					"        \n",
					"        # Drop columns that shouldn't be in staging table\n",
					"        if \"hash_id\" in df.columns:\n",
					"            df = df.drop(\"hash_id\")\n",
					"        if \"creation_date\" in df.columns:\n",
					"            df = df.drop(\"creation_date\")\n",
					"        \n",
					"        # Calculate optimal partition count for JDBC write\n",
					"        partition_count = max(20, min(200, record_count // 50000))\n",
					"        logger.info(f\"Using {partition_count} partitions for JDBC write\")\n",
					"        \n",
					"        # Step 1: Truncate the staging table\n",
					"        logger.info(f\"Truncating staging table {staging_table}\")\n",
					"        truncate_staging_table(pg_host, pg_database, pg_user, staging_table)\n",
					"        \n",
					"        # Step 2: Write data to staging table\n",
					"        logger.info(f\"Loading {record_count} records to staging table {staging_table}\")\n",
					"        df.repartition(partition_count).write \\\n",
					"            .format(\"jdbc\") \\\n",
					"            .option(\"url\", jdbc_url) \\\n",
					"            .option(\"dbtable\", staging_table) \\\n",
					"            .option(\"user\", jdbc_properties[\"user\"]) \\\n",
					"            .option(\"driver\", jdbc_properties[\"driver\"]) \\\n",
					"            .option(\"ssl\", jdbc_properties[\"ssl\"]) \\\n",
					"            .option(\"sslmode\", jdbc_properties[\"sslmode\"]) \\\n",
					"            .option(\"batchsize\", jdbc_properties[\"batchsize\"]) \\\n",
					"            .option(\"reWriteBatchedInserts\", jdbc_properties[\"reWriteBatchedInserts\"]) \\\n",
					"            .mode(\"append\") \\\n",
					"            .save()\n",
					"        \n",
					"        logger.info(f\"Successfully loaded {record_count} records to staging table\")\n",
					"        \n",
					"        # Step 3: Call the stored procedure to process data\n",
					"        logger.info(\"Calling stored procedure to process data\")\n",
					"        call_stored_procedure(pg_host, pg_database, pg_user, \"process_voters_data\")\n",
					"        \n",
					"        # Calculate elapsed time\n",
					"        elapsed_time = time.time() - start_time\n",
					"        logger.info(f\"Completed data loading and procedure execution in {elapsed_time:.2f} seconds\")\n",
					"        \n",
					"        return True, record_count, elapsed_time\n",
					"        \n",
					"    except Exception as e:\n",
					"        logger.error(f\"Error in data loading process: {str(e)}\")\n",
					"        import traceback\n",
					"        logger.error(traceback.format_exc())\n",
					"        return False, 0, 0\n",
					"\n",
					"def truncate_staging_table(host, database, user, table_name):\n",
					"    \"\"\"Truncate the staging table before loading new data\"\"\"\n",
					"    try:\n",
					"        conn = psycopg2.connect(\n",
					"            host=host,\n",
					"            database=database,\n",
					"            user=user,\n",
					"            sslmode='require'\n",
					"        )\n",
					"        \n",
					"        conn.autocommit = True\n",
					"        cursor = conn.cursor()\n",
					"        cursor.execute(f\"TRUNCATE TABLE {table_name}\")\n",
					"        cursor.close()\n",
					"        conn.close()\n",
					"        logger.info(f\"Successfully truncated table {table_name}\")\n",
					"        return True\n",
					"    except Exception as e:\n",
					"        logger.error(f\"Error truncating table {table_name}: {str(e)}\")\n",
					"        raise\n",
					"\n",
					"def call_stored_procedure(host, database, user, procedure_name):\n",
					"    \"\"\"Call the stored procedure to process data\"\"\"\n",
					"    try:\n",
					"        conn = psycopg2.connect(\n",
					"            host=host,\n",
					"            database=database,\n",
					"            user=user,\n",
					"            sslmode='require'\n",
					"        )\n",
					"        \n",
					"        cursor = conn.cursor()\n",
					"        \n",
					"        logger.info(f\"Calling stored procedure {procedure_name}()\")\n",
					"        cursor.execute(f\"CALL {procedure_name}()\")\n",
					"        \n",
					"        conn.commit()\n",
					"        cursor.close()\n",
					"        conn.close()\n",
					"        \n",
					"        logger.info(f\"Successfully executed stored procedure {procedure_name}\")\n",
					"        return True\n",
					"    except Exception as e:\n",
					"        logger.error(f\"Error calling stored procedure {procedure_name}: {str(e)}\")\n",
					"        raise\n",
					"\n",
					"# Execute the load\n",
					"if __name__ == \"__main__\":\n",
					"    success, record_count, elapsed_time = load_data_and_call_procedure()\n",
					"    if success:\n",
					"        print(f\"Data loading and procedure execution completed successfully\")\n",
					"        print(f\"Loaded {record_count:,} records in {elapsed_time:.2f} seconds\")\n",
					"        print(f\"Average rate: {record_count/elapsed_time:.2f} records/second\")\n",
					"    else:\n",
					"        print(\"Process failed - check the logs for details\")"
				],
				"execution_count": 2
			}
		]
	}
}