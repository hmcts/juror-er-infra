{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e6892fdb-6cbe-45cc-8534-a5e115178ee7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"\n",
					"\n",
					"# Configure logging\n",
					"logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
					"\n",
					"def create_spark_session():\n",
					"    \"\"\"Create and return a Spark session\"\"\"\n",
					"    return SparkSession.builder \\\n",
					"        .appName(\"Electoral Data ETL\") \\\n",
					"        .getOrCreate()\n",
					"\n",
					"def ensure_folder_exists(folder_path):\n",
					"    \"\"\"Create folder if it doesn't exist\"\"\"\n",
					"    try:\n",
					"        if not mssparkutils.fs.exists(folder_path):\n",
					"            logging.info(f\"Creating folder: {folder_path}\")\n",
					"            mssparkutils.fs.mkdirs(folder_path)\n",
					"            return True\n",
					"        return True\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error creating folder {folder_path}: {str(e)}\")\n",
					"        return False\n",
					"\n",
					"def read_column_mapping(spark, config_path):\n",
					"    \"\"\"Read and parse the column mapping configuration\"\"\"\n",
					"    try:\n",
					"        # Check if file exists\n",
					"        if not mssparkutils.fs.exists(config_path):\n",
					"            raise FileNotFoundError(f\"Column mapping file not found: {config_path}\")\n",
					"            \n",
					"        try:\n",
					"            # Method 1: Using text file reader\n",
					"            mapping_df = spark.read.text(config_path)\n",
					"            json_str = mapping_df.agg(concat_ws(\"\", collect_list(\"value\"))).collect()[0][0]\n",
					"            mapping_dict = json.loads(json_str)\n",
					"            return mapping_dict[\"mappings\"]\n",
					"        except Exception as e:\n",
					"            logging.warning(f\"Error with method 1: {str(e)}\")\n",
					"            \n",
					"            # Method 2: Using wholeTextFiles\n",
					"            mapping_rdd = spark.sparkContext.wholeTextFiles(config_path)\n",
					"            json_str = mapping_rdd.values().first()\n",
					"            mapping_dict = json.loads(json_str)\n",
					"            return mapping_dict[\"mappings\"]\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error reading mapping file: {str(e)}\")\n",
					"        # Return a default mapping to prevent complete failure\n",
					"        return {}\n",
					"\n",
					"def get_reverse_mapping(column_mapping):\n",
					"    \"\"\"Create a reverse mapping for easy lookup\"\"\"\n",
					"    reverse_map = {}\n",
					"    \n",
					"    # Handle empty mapping\n",
					"    if not column_mapping:\n",
					"        return reverse_map\n",
					"        \n",
					"    # For the JSON format in col_mapping.json\n",
					"    if isinstance(next(iter(column_mapping.values())), list):\n",
					"        for standard_name, variations in column_mapping.items():\n",
					"            for alias in variations:\n",
					"                reverse_map[alias.lower()] = standard_name\n",
					"    else:\n",
					"        # For different mapping format with 'aliases' key\n",
					"        for standard_name, details in column_mapping.items():\n",
					"            if isinstance(details, dict) and \"aliases\" in details:\n",
					"                for alias in details[\"aliases\"]:\n",
					"                    reverse_map[alias.lower()] = standard_name\n",
					"            \n",
					"    return reverse_map\n",
					"\n",
					"def get_file_type(file_path):\n",
					"    \"\"\"Determine if file is CSV or Excel\"\"\"\n",
					"    if file_path.lower().endswith(('.xlsx', '.xls')):\n",
					"        return 'excel'\n",
					"    elif file_path.lower().endswith('.csv'):\n",
					"        return 'csv'\n",
					"    return None\n",
					"\n",
					"def list_files(folder_path, extensions):\n",
					"    \"\"\"List all files with specific extensions in a folder\"\"\"\n",
					"    try:\n",
					"        # Check if folder exists\n",
					"        if not mssparkutils.fs.exists(folder_path):\n",
					"            logging.warning(f\"Folder does not exist: {folder_path}\")\n",
					"            return []\n",
					"            \n",
					"        files = mssparkutils.fs.ls(folder_path)\n",
					"        return [f.path for f in files if any(f.name.lower().endswith(ext) for ext in extensions)]\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error listing files in {folder_path}: {str(e)}\")\n",
					"        return []\n",
					"\n",
					"def read_file(spark, file_path):\n",
					"    \"\"\"Read file as DataFrame based on file type\"\"\"\n",
					"    try:\n",
					"        if file_path.lower().endswith('.csv'):\n",
					"            logging.info(f\"Reading as CSV file: {file_path}\")\n",
					"            return spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").csv(file_path)\n",
					"        elif file_path.lower().endswith(('.xlsx', '.xls')):\n",
					"            logging.info(f\"Reading as Excel file: {file_path}\")\n",
					"            return read_excel_file(spark, file_path)\n",
					"        else:\n",
					"            raise ValueError(f\"Unsupported file format: {file_path}\")\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error reading file {file_path}: {str(e)}\")\n",
					"        raise\n",
					"\n",
					"def read_excel_file(spark, file_path):\n",
					"    \"\"\"Read Excel file with multiple fallback mechanisms\"\"\"\n",
					"    errors = []\n",
					"    \n",
					"    # Attempt 1: Basic reading\n",
					"    try:\n",
					"        return spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"treatEmptyValuesAsNulls\", \"true\").load(file_path)\n",
					"    except Exception as e:\n",
					"        errors.append(f\"Basic reading failed: {str(e)}\")\n",
					"    \n",
					"    # Attempt 2: With Sheet1 specification\n",
					"    try:\n",
					"        return spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"treatEmptyValuesAsNulls\", \"true\").option(\"sheetName\", \"Sheet1\").load(file_path)\n",
					"    except Exception as e:\n",
					"        errors.append(f\"Sheet1 reading failed: {str(e)}\")\n",
					"    \n",
					"    # Attempt 3: With sheet index\n",
					"    try:\n",
					"        return spark.read.format(\"com.crealytics.spark.excel\").option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"treatEmptyValuesAsNulls\", \"true\").option(\"sheetIndex\", 0).load(file_path)\n",
					"    except Exception as e:\n",
					"        errors.append(f\"Sheet index reading failed: {str(e)}\")\n",
					"    \n",
					"    # If all attempts failed, raise an informative error\n",
					"    raise Exception(f\"Failed to read Excel file {file_path}. Errors: {'; '.join(errors)}\")\n",
					"\n",
					"def standardize_column_names(df, reverse_mapping):\n",
					"    \"\"\"Standardize column names using the mapping\"\"\"\n",
					"    renamed_columns = []\n",
					"    \n",
					"    for col in df.columns:\n",
					"        std_name = reverse_mapping.get(col.lower())\n",
					"        if std_name:\n",
					"            df = df.withColumnRenamed(col, std_name)\n",
					"            renamed_columns.append(f\"{col} -> {std_name}\")\n",
					"            logging.info(f\"Renamed column: {col} -> {std_name}\")\n",
					"    \n",
					"    if renamed_columns:\n",
					"        logging.info(f\"Renamed {len(renamed_columns)} columns: {', '.join(renamed_columns)}\")\n",
					"    else:\n",
					"        logging.warning(\"No columns were renamed - check your mapping configuration\")\n",
					"        \n",
					"    return df\n",
					"\n",
					"def transform_data(df, creation_date, la_code=None):\n",
					"    \"\"\"Transform data by cleaning text columns and handling names\"\"\"\n",
					"    # Clean text columns\n",
					"    for col_name in df.columns:\n",
					"        if df.schema[col_name].dataType == StringType():\n",
					"            logging.info(f\"Cleaning text column: {col_name}\")\n",
					"            df = df.withColumn(col_name, upper(trim(df[col_name])))\n",
					"    \n",
					"    # Process name fields\n",
					"    df = split_elector_name(df)\n",
					"    df = process_name_components(df)\n",
					"    \n",
					"    # Ensure required columns exist\n",
					"    if \"Elector Forename\" not in df.columns:\n",
					"        df = df.withColumn(\"Elector Forename\", lit(None).cast(StringType()))\n",
					"        logging.info(\"Added missing 'Elector Forename' column\")\n",
					"        \n",
					"    if \"Elector Surname\" not in df.columns:\n",
					"        df = df.withColumn(\"Elector Surname\", lit(None).cast(StringType()))\n",
					"        logging.info(\"Added missing 'Elector Surname' column\")\n",
					"    \n",
					"    # Add metadata\n",
					"    if creation_date:\n",
					"        df = df.withColumn(\"CreationDate\", lit(creation_date))\n",
					"        logging.info(f\"Added CreationDate: {creation_date}\")\n",
					"        \n",
					"    if la_code:\n",
					"        df = df.withColumn(\"LA_Code\", lit(la_code))\n",
					"        logging.info(f\"Added LA_Code: {la_code}\")\n",
					"    \n",
					"    return df\n",
					"\n",
					"def split_elector_name(df):\n",
					"    \"\"\"Split the 'Elector Name' field into surname and forename components.\"\"\"\n",
					"    if \"Elector Name\" in df.columns:\n",
					"        logging.info(\"Found 'Elector Name' column, splitting into surname and forename components\")\n",
					"        \n",
					"        # Split the name into parts\n",
					"        df = df.withColumn(\"name_parts\", split(col(\"Elector Name\"), \" \"))\n",
					"        \n",
					"        # Extract surname (first part)\n",
					"        df = df.withColumn(\"Elector Surname\", \n",
					"                           when(size(col(\"name_parts\")) > 0, \n",
					"                                upper(trim(element_at(col(\"name_parts\"), 1))))\n",
					"                           .otherwise(lit(None)))\n",
					"        \n",
					"        # Extract forename (remaining parts)\n",
					"        df = df.withColumn(\"Elector Forename\", \n",
					"                           when(size(col(\"name_parts\")) > 1,\n",
					"                                upper(trim(concat_ws(\" \", \n",
					"                                                     slice(col(\"name_parts\"), 2, size(col(\"name_parts\")))))))\n",
					"                           .otherwise(lit(None)))\n",
					"        \n",
					"        # Remove temporary column\n",
					"        df = df.drop(\"name_parts\")\n",
					"        \n",
					"        logging.info(\"Successfully split 'Elector Name' into 'Elector Surname' and 'Elector Forename'\")\n",
					"    \n",
					"    return df\n",
					"\n",
					"def process_name_components(df):\n",
					"    \"\"\"Process name components separately\"\"\"\n",
					"    name_columns = [\"Elector Title\", \"Elector Forename\", \"Elector Surname\", \"Elector Middlename\", \"Suffix\", \"Initials\"]\n",
					"    \n",
					"    for col_name in name_columns:\n",
					"        if col_name in df.columns:\n",
					"            df = df.withColumn(col_name, \n",
					"                               when(col(col_name).isNotNull(), \n",
					"                                    upper(trim(col(col_name))))\n",
					"                               .otherwise(None))\n",
					"            logging.info(f\"Processed name component: {col_name}\")\n",
					"    \n",
					"    return df\n",
					"\n",
					"def get_folder_parts(file_path):\n",
					"    \"\"\"Extract folder information for naming with improved parsing\"\"\"\n",
					"    parts = file_path.split('/')\n",
					"    \n",
					"    try:\n",
					"        la_index = parts.index('LA_Data')\n",
					"        if la_index > 0:\n",
					"            date_folder = parts[la_index - 1]\n",
					"            if len(parts) > la_index + 1:\n",
					"                # Get LA folder name (third folder)\n",
					"                third_folder = parts[la_index + 1]\n",
					"                return date_folder, third_folder\n",
					"    except ValueError:\n",
					"        pass\n",
					"        \n",
					"    # Alternative parsing method if LA_Data not found\n",
					"    # Assuming format is something like storage/files/20240215_Birmingham.csv\n",
					"    file_name = parts[-1]\n",
					"    if \"_\" in file_name:\n",
					"        parts = file_name.split(\"_\", 1)\n",
					"        if len(parts) == 2:\n",
					"            date_part = parts[0]\n",
					"            la_part = parts[1].split('.')[0]  # Remove extension\n",
					"            return date_part, la_part\n",
					"            \n",
					"    # If all else fails, use current date and filename\n",
					"    current_date = datetime.now().strftime(\"%Y%m%d\")\n",
					"    filename_without_ext = os.path.splitext(os.path.basename(file_path))[0]\n",
					"    return current_date, filename_without_ext\n",
					"\n",
					"def process_file(spark, source_path, reverse_mapping, transform_folder, error_folder):\n",
					"    \"\"\"Process a source file and transform it to parquet format\"\"\"\n",
					"    result = {\n",
					"        \"file\": source_path,\n",
					"        \"status\": \"error\",\n",
					"        \"message\": \"\",\n",
					"        \"output\": None,\n",
					"        \"timestamp\": datetime.now().isoformat()\n",
					"    }\n",
					"    \n",
					"    try:\n",
					"        # Create required folders if they don't exist\n",
					"        if not ensure_folder_exists(transform_folder):\n",
					"            result[\"message\"] = f\"Could not create transform folder: {transform_folder}\"\n",
					"            return result\n",
					"            \n",
					"        if not ensure_folder_exists(error_folder):\n",
					"            result[\"message\"] = f\"Could not create error folder: {error_folder}\"\n",
					"            return result\n",
					"        \n",
					"        # Get file details\n",
					"        file_name = os.path.basename(source_path)\n",
					"        date_folder, la_code = get_folder_parts(source_path)\n",
					"        \n",
					"        logging.info(f\"Processing file: {file_name}, Date: {date_folder}, LA: {la_code}\")\n",
					"        \n",
					"        # Read the file\n",
					"        try:\n",
					"            df = read_file(spark, source_path)\n",
					"            logging.info(f\"Successfully read file with {df.count()} rows and {len(df.columns)} columns\")\n",
					"        except Exception as e:\n",
					"            result[\"message\"] = f\"Error reading file: {str(e)}\"\n",
					"            return result\n",
					"        \n",
					"        # Standardize column names using mapping\n",
					"        if reverse_mapping:\n",
					"            df = standardize_column_names(df, reverse_mapping)\n",
					"        else:\n",
					"            logging.warning(\"No reverse mapping available - skipping column standardization\")\n",
					"        \n",
					"        # Transform data\n",
					"        try:\n",
					"            df = transform_data(df, date_folder, la_code)\n",
					"            logging.info(f\"Successfully transformed data with {df.count()} rows\")\n",
					"        except Exception as e:\n",
					"            result[\"message\"] = f\"Error transforming data: {str(e)}\"\n",
					"            return result\n",
					"        \n",
					"        # Create a output name using date and LA code\n",
					"        output_name = f\"{date_folder}_{la_code}\"\n",
					"        output_path = f\"{transform_folder}/{output_name}.parquet\"\n",
					"        \n",
					"        # Write transformed data to parquet\n",
					"        try:\n",
					"            df.write.mode(\"overwrite\").parquet(output_path)\n",
					"            logging.info(f\"Successfully wrote parquet file to {output_path}\")\n",
					"            \n",
					"            result[\"status\"] = \"success\"\n",
					"            result[\"message\"] = f\"Successfully processed file {file_name}\"\n",
					"            result[\"output\"] = output_path\n",
					"            return result\n",
					"        except Exception as e:\n",
					"            result[\"message\"] = f\"Error writing output file: {str(e)}\"\n",
					"            return result\n",
					"            \n",
					"    except Exception as e:\n",
					"        result[\"message\"] = f\"Unexpected error: {str(e)}\"\n",
					"        return result\n",
					"\n",
					"def read_processed_files_log(spark, log_file_path):\n",
					"    \"\"\"Read the log of processed files with error handling\"\"\"\n",
					"    try:\n",
					"        if not mssparkutils.fs.exists(log_file_path):\n",
					"            logging.info(f\"Processed files log does not exist yet: {log_file_path}\")\n",
					"            return []\n",
					"            \n",
					"        processed_files_log = spark.read.json(log_file_path).select(\"file\").rdd.flatMap(lambda x: x).collect()\n",
					"        logging.info(f\"Read processed files log with {len(processed_files_log)} entries\")\n",
					"        return processed_files_log\n",
					"    except Exception as e:\n",
					"        logging.warning(f\"Could not read processed files log: {str(e)}\")\n",
					"        return []\n",
					"\n",
					"def update_processed_files_log(spark, log_file_path, processed_files_log, new_files):\n",
					"    \"\"\"Update the log of processed files\"\"\"\n",
					"    try:\n",
					"        # Create destination folder if it doesn't exist\n",
					"        log_folder = os.path.dirname(log_file_path)\n",
					"        if not mssparkutils.fs.exists(log_folder):\n",
					"            mssparkutils.fs.mkdirs(log_folder)\n",
					"            logging.info(f\"Created log folder: {log_folder}\")\n",
					"        \n",
					"        # Create DataFrame for new files\n",
					"        new_processed_files_log = spark.createDataFrame([(file,) for file in new_files], [\"file\"])\n",
					"        \n",
					"        # Merge with existing log if it exists\n",
					"        if processed_files_log:\n",
					"            existing_log_df = spark.createDataFrame([(file,) for file in processed_files_log], [\"file\"])\n",
					"            updated_log_df = existing_log_df.union(new_processed_files_log).distinct()\n",
					"        else:\n",
					"            updated_log_df = new_processed_files_log\n",
					"        \n",
					"        # Write updated log\n",
					"        updated_log_df.write.mode(\"overwrite\").json(log_file_path)\n",
					"        logging.info(f\"Updated processed files log with {len(new_files)} new entries\")\n",
					"        return True\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error updating processed files log: {str(e)}\")\n",
					"        return False\n",
					"\n",
					"def print_summary(results):\n",
					"    \"\"\"Print a summary of processing results\"\"\"\n",
					"    successful = [r for r in results if r[\"status\"] == \"success\"]\n",
					"    failed = [r for r in results if r[\"status\"] == \"error\"]\n",
					"    \n",
					"    print(\"\\n========== PROCESSING SUMMARY ==========\")\n",
					"    print(f\"Total files processed: {len(results)}\")\n",
					"    print(f\"Successfully processed: {len(successful)}\")\n",
					"    print(f\"Failed: {len(failed)}\")\n",
					"    \n",
					"    if successful:\n",
					"        print(\"\\n----- Successfully Processed Files -----\")\n",
					"        for result in successful:\n",
					"            print(f\"  - {result['file']} -> {result['output']}\")\n",
					"    \n",
					"    if failed:\n",
					"        print(\"\\n----- Failed Files -----\")\n",
					"        for result in failed:\n",
					"            print(f\"  - {result['file']}: {result['message']}\")\n",
					"    \n",
					"    print(\"=======================================\\n\")\n",
					"\n",
					"def main():\n",
					"    \"\"\"Main function for the transformation process\"\"\"\n",
					"    # Initialize Spark session\n",
					"    spark = create_spark_session()\n",
					"    \n",
					"    # Define paths\n",
					"    storage_account = \"baubaisadfsastg\"\n",
					"    files_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/files\"\n",
					"    config_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/config/schema\"\n",
					"    transform_folder = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/transformation\"\n",
					"    error_folder = f\"{transform_folder}/errors\"\n",
					"    log_file_path = f\"{transform_folder}/processed_files_log.json\"\n",
					"    \n",
					"    # Ensure required folders exist\n",
					"    for folder in [files_folder, transform_folder, error_folder]:\n",
					"        ensure_folder_exists(folder)\n",
					"    \n",
					"    # Read column mapping\n",
					"    mapping_file = f\"{config_folder}/col_mapping.json\"\n",
					"    try:\n",
					"        column_mapping = read_column_mapping(spark, mapping_file)\n",
					"        if column_mapping:\n",
					"            logging.info(f\"Successfully read column mapping with {len(column_mapping)} mappings\")\n",
					"            reverse_mapping = get_reverse_mapping(column_mapping)\n",
					"            logging.info(f\"Created reverse mapping with {len(reverse_mapping)} entries\")\n",
					"        else:\n",
					"            logging.warning(\"Column mapping is empty - check your configuration file\")\n",
					"            reverse_mapping = {}\n",
					"    except Exception as e:\n",
					"        logging.error(f\"Error reading column mapping: {str(e)}\")\n",
					"        reverse_mapping = {}\n",
					"    \n",
					"    # Read the log of processed files\n",
					"    processed_files_log = read_processed_files_log(spark, log_file_path)\n",
					"    \n",
					"    # List all files in the source folder\n",
					"    all_files = list_files(files_folder, ['.csv', '.xlsx', '.xls'])\n",
					"    logging.info(f\"Found {len(all_files)} files to process\")\n",
					"    \n",
					"    # Filter out files that have already been processed\n",
					"    new_files = [file for file in all_files if file not in processed_files_log]\n",
					"    logging.info(f\"New files to process: {len(new_files)}\")\n",
					"    \n",
					"    # Process each new file\n",
					"    results = []\n",
					"    for file_path in new_files:\n",
					"        logging.info(f\"Processing file: {file_path}\")\n",
					"        result = process_file(spark, file_path, reverse_mapping, transform_folder, error_folder)\n",
					"        results.append(result)\n",
					"    \n",
					"    # Create a summary DataFrame\n",
					"    if results:\n",
					"        summary_df = spark.createDataFrame(results)\n",
					"        summary_df.write.mode(\"overwrite\").json(f\"{transform_folder}/processing_summary.json\")\n",
					"        logging.info(f\"Wrote processing summary to {transform_folder}/processing_summary.json\")\n",
					"    \n",
					"    # Print a summary of results\n",
					"    print_summary(results)\n",
					"    \n",
					"    # Update the log of processed files\n",
					"    if new_files:\n",
					"        update_processed_files_log(spark, log_file_path, processed_files_log, new_files)\n",
					"    \n",
					"    # Return the results for further processing\n",
					"    return results\n",
					"\n",
					"# Execute the main function if this notebook is run directly\n",
					"if __name__ == \"__main__\":\n",
					"    main()"
				],
				"execution_count": 2
			}
		]
	}
}