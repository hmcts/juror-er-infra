{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bc8afe67-09b5-44dc-802f-98d57b244254"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"from notebookutils import mssparkutils\n",
					"import logging\n",
					"import os\n",
					"from datetime import datetime"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"# Configure logging\n",
					"logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
					"logger = logging.getLogger()\n",
					"\n",
					"def create_spark_session():\n",
					"    \"\"\"Create and return a Spark session with Delta Lake support\"\"\"\n",
					"    return SparkSession.builder \\\n",
					"        .appName(\"L3 Data Extraction for Analysis\") \\\n",
					"        .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\n",
					"        .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\") \\\n",
					"        .getOrCreate()\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"\n",
					"\n",
					"def extract_l3_data_to_csv(source_path, output_path, partition_cols=None, filter_expr=None):\n",
					"    \"\"\"\n",
					"    Extract L3 delta data to CSV files\n",
					"    \n",
					"    Args:\n",
					"        source_path: Path to the Delta table\n",
					"        output_path: Path where CSV files will be written\n",
					"        partition_cols: Optional list of columns to partition output by\n",
					"        filter_expr: Optional filter expression to apply\n",
					"    \"\"\"\n",
					"    try:\n",
					"        spark = create_spark_session()\n",
					"        logger.info(f\"Reading Delta data from: {source_path}\")\n",
					"        \n",
					"        # Read the Delta table\n",
					"        df = spark.read.format(\"delta\").load(source_path)\n",
					"        \n",
					"        # Apply filter if provided\n",
					"        if filter_expr:\n",
					"            logger.info(f\"Applying filter: {filter_expr}\")\n",
					"            df = df.filter(filter_expr)\n",
					"            \n",
					"        # Log record count\n",
					"        record_count = df.count()\n",
					"        logger.info(f\"Extracted {record_count} records from Delta table\")\n",
					"        \n",
					"        # Make sure output directory exists\n",
					"        if not mssparkutils.fs.exists(output_path):\n",
					"            logger.info(f\"Creating output directory: {output_path}\")\n",
					"            mssparkutils.fs.mkdirs(output_path)\n",
					"        \n",
					"        # Write to CSV\n",
					"        logger.info(f\"Writing {record_count} records to CSV at: {output_path}\")\n",
					"        \n",
					"        csv_options = {\n",
					"            \"header\": \"true\",\n",
					"            \"delimiter\": \",\",\n",
					"            \"quoteAll\": \"true\",\n",
					"            \"encoding\": \"UTF-8\"\n",
					"        }\n",
					"        \n",
					"        write_operation = df.write.mode(\"overwrite\").options(**csv_options)\n",
					"        \n",
					"        # Apply partitioning if specified\n",
					"        if partition_cols:\n",
					"            logger.info(f\"Partitioning output by: {', '.join(partition_cols)}\")\n",
					"            write_operation = write_operation.partitionBy(partition_cols)\n",
					"        \n",
					"        # Execute the write operation\n",
					"        write_operation.csv(output_path)\n",
					"        \n",
					"        logger.info(f\"Successfully exported data to CSV at: {output_path}\")\n",
					"        return True, record_count\n",
					"        \n",
					"    except Exception as e:\n",
					"        logger.error(f\"Error exporting L3 data to CSV: {str(e)}\")\n",
					"        import traceback\n",
					"        logger.error(traceback.format_exc())\n",
					"        return False, 0\n",
					"\n",
					"def main():\n",
					"    \"\"\"Main function to execute the extraction\"\"\"\n",
					"    logger.info(\"Starting L3 data extraction for analysis\")\n",
					"    \n",
					"    # Storage account and paths\n",
					"    storage_account = \"baubaisadfsastg\"\n",
					"    source_path = f\"abfss://dl-juror-eric-voters-temp@{storage_account}.dfs.core.windows.net/voters_deduplicated_delta\"\n",
					"    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
					"    output_path = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/analysis/l3_data_export_{timestamp}\"\n",
					"    \n",
					"    # Optional filter - uncomment and modify if needed\n",
					"    # filter_expr = \"creation_date >= '2023-01-01'\"\n",
					"    \n",
					"    # Optional partitioning - uncomment and modify if needed\n",
					"    # partition_cols = [\"postcode_start\"]\n",
					"    \n",
					"    # Execute the extraction\n",
					"    success, record_count = extract_l3_data_to_csv(\n",
					"        source_path=source_path,\n",
					"        output_path=output_path,\n",
					"        # partition_cols=partition_cols,\n",
					"        # filter_expr=filter_expr\n",
					"    )\n",
					"    \n",
					"    if success:\n",
					"        logger.info(f\"Successfully exported {record_count} records to {output_path}\")\n",
					"        # Generate a single combined CSV for easier download\n",
					"        generate_single_csv = True\n",
					"        if generate_single_csv:\n",
					"            try:\n",
					"                spark = create_spark_session()\n",
					"                logger.info(\"Reading the exported CSV files to create a single file\")\n",
					"                combined_df = spark.read.option(\"header\", \"true\").csv(output_path)\n",
					"                \n",
					"                # Define path for combined file\n",
					"                combined_path = f\"{output_path}_combined\"\n",
					"                if not mssparkutils.fs.exists(combined_path):\n",
					"                    mssparkutils.fs.mkdirs(combined_path)\n",
					"                \n",
					"                single_file_path = f\"{combined_path}/l3_data_export_{timestamp}.csv\"\n",
					"                logger.info(f\"Writing combined data to: {single_file_path}\")\n",
					"                \n",
					"                # Repartition to a single file and write\n",
					"                combined_df.coalesce(1).write.mode(\"overwrite\").option(\"header\", \"true\").csv(single_file_path)\n",
					"                logger.info(f\"Successfully created combined CSV file at: {single_file_path}\")\n",
					"            except Exception as e:\n",
					"                logger.error(f\"Error creating combined CSV: {str(e)}\")\n",
					"                import traceback\n",
					"                logger.error(traceback.format_exc())\n",
					"    else:\n",
					"        logger.error(\"Failed to export L3 data to CSV\")\n",
					"\n",
					"if __name__ == \"__main__\":\n",
					"    main()"
				],
				"execution_count": 3
			}
		]
	}
}