{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8d391d71-cd06-4fa0-ba38-aaee4b9ce4ab"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"editable": false,
					"run_control": {
						"frozen": true
					}
				},
				"source": [
					"# PostgreSQL connection details\n",
					"import logging\n",
					"import psycopg2\n",
					"import os"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"editable": false,
					"run_control": {
						"frozen": true
					}
				},
				"source": [
					"# Configure logging\n",
					"logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
					"logger = logging.getLogger()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"\n",
					"# PostgreSQL connection details\n",
					"server = \"juror-api-demo.postgres.database.azure.com\"\n",
					"database = \"juror\"\n",
					"table = \"juror_eric.voters_temp\"\n",
					"user = \"baubais-stg-functionapp\"  # Your managed identity username\n",
					"\n",
					"# SparkSession with PostgreSQL JDBC driver\n",
					"spark = SparkSession.builder.appName(\"PostgreSQLManagedIdentity\").getOrCreate()\n",
					"\n",
					"# PostgreSQL JDBC URL for Azure PostgreSQL with managed identity\n",
					"# Note: For managed identity with PostgreSQL, we just provide the username\n",
					"# and authentication is handled at the service level\n",
					"jdbc_url = f\"jdbc:postgresql://{server}:5432/{database}\"\n",
					"\n",
					"try:\n",
					"    # Read data from PostgreSQL\n",
					"    df = spark.read \\\n",
					"        .format(\"jdbc\") \\\n",
					"        .option(\"url\", jdbc_url) \\\n",
					"        .option(\"dbtable\", table) \\\n",
					"        .option(\"user\", user) \\\n",
					"        .option(\"driver\", \"org.postgresql.Driver\") \\\n",
					"        .option(\"ssl\", \"true\") \\\n",
					"        .option(\"sslmode\", \"require\") \\\n",
					"        .load()\n",
					"    \n",
					"    # Perform operations on the DataFrame\n",
					"    print(f\"Successfully connected. Row count: {df.count()}\")\n",
					"    df.show(5)  # Show first 5 rows\n",
					"    \n",
					"except Exception as e:\n",
					"    print(f\"Error: {e}\")\n",
					"    \n",
					"finally:\n",
					"    # Stop the SparkSession when done\n",
					"    spark.stop()"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"editable": false,
					"run_control": {
						"frozen": true
					}
				},
				"source": [
					"try:\n",
					"    df = spark.read.format(\"jdbc\").option(\"url\", url).option(\"dbtable\", table).load()\n",
					"    df.show()\n",
					"except Exception as e:\n",
					"    print(f\"JDBC Error: {e}\")"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"editable": false,
					"run_control": {
						"frozen": true
					}
				},
				"source": [
					"telnet juror-api-demo.postgres.database.azure.com 5432"
				],
				"execution_count": null
			}
		]
	}
}