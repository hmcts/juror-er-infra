{
	"name": "Parquet_To_Csv_Whole",
	"properties": {
		"folder": {
			"name": "crime/testing"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkprod",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "58438c8d-cafd-4414-8ad7-a0b2b06a5ce5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5ca62022-6aa2-4cee-aaa7-e7536c8d566c/resourceGroups/baubais-data-factory-rg-prod/providers/Microsoft.Synapse/workspaces/baubais-synapse-prod/bigDataPools/sparkprod",
				"name": "sparkprod",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkprod",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"editable": true,
					"run_control": {
						"frozen": false
					}
				},
				"source": [
					"import datetime\n",
					"import time\n",
					"import os\n",
					"from notebookutils import mssparkutils\n",
					"from pyspark.sql import SparkSession\n",
					"\n",
					"# Initialize Spark\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"# Configuration\n",
					"storage_account = \"baubaisadfsaprod\"\n",
					"input_dir = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/voters_postgresql\"\n",
					"output_dir = f\"abfss://juror-etl@{storage_account}.dfs.core.windows.net/exports\"\n",
					"\n",
					"# Ensure output directory exists\n",
					"if not mssparkutils.fs.exists(output_dir):\n",
					"    mssparkutils.fs.mkdirs(output_dir)\n",
					"\n",
					"try:\n",
					"    print(f\"üîÑ Processing all partitioned parquet data in {input_dir}\")\n",
					"    \n",
					"    # Read all parquet data from the directory (including partitions)\n",
					"    df = spark.read.parquet(input_dir)\n",
					"    record_count = df.count()\n",
					"    print(f\"   ‚úÖ Read {record_count} records from all partitions\")\n",
					"    \n",
					"    # Generate a single CSV export\n",
					"    timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
					"    temp_output_dir = f\"{output_dir}/temp_{timestamp}\"\n",
					"    \n",
					"    # Write to temporary CSV folder\n",
					"    df.coalesce(1).write \\\n",
					"        .option(\"header\", \"true\") \\\n",
					"        .option(\"quoteAll\", \"true\") \\\n",
					"        .mode(\"overwrite\") \\\n",
					"        .csv(temp_output_dir)\n",
					"    \n",
					"    # Locate and rename the .csv file\n",
					"    files_written = mssparkutils.fs.ls(temp_output_dir)\n",
					"    for f in files_written:\n",
					"        if f.path.endswith(\".csv\") and \"part-\" in f.path:\n",
					"            final_csv_path = f\"{output_dir}/voters_export_{timestamp}.csv\"\n",
					"            mssparkutils.fs.cp(f.path, final_csv_path)\n",
					"            print(f\"   üìÑ Exported to: {final_csv_path}\")\n",
					"            break\n",
					"    \n",
					"    # Clean up temp folder\n",
					"    mssparkutils.fs.rm(temp_output_dir, recurse=True)\n",
					"    \n",
					"except Exception as e:\n",
					"    print(f\"‚ùå Failed to process: {str(e)}\")\n",
					"    import traceback\n",
					"    print(traceback.format_exc())"
				],
				"execution_count": 11
			}
		]
	}
}