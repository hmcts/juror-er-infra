{
	"name": "column_constraint",
	"properties": {
		"folder": {
			"name": "Configuration"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkbaubais",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a4084d65-48c0-45e3-bee7-abbd4863b290"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkbaubais",
				"name": "sparkbaubais",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkbaubais",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# column_constraints.py\n",
					"# This file should be placed in the same directory as your L2 notebook or imported properly\n",
					"\n",
					"from pyspark.sql.functions import col, lit, when, substring, length, regexp_replace, upper, trim\n",
					"from pyspark.sql.types import StringType, TimestampType, IntegerType\n",
					"\n",
					"def define_column_constraints():\n",
					"    \"\"\"\n",
					"    Define PostgreSQL column length constraints for the target schema.\n",
					"    Returns a dictionary with column names as keys and constraints as values.\n",
					"    \"\"\"\n",
					"    return {\n",
					"        \"part_no\": {\"type\": \"string\", \"max_length\": 9},\n",
					"        \"register_lett\": {\"type\": \"int\", \"max_value\": 99999},\n",
					"        \"poll_number\": {\"type\": \"int\", \"max_value\": 99999},\n",
					"        \"new_marker\": {\"type\": \"string\", \"max_length\": 3},\n",
					"        \"title\": {\"type\": \"string\", \"max_length\": 10},\n",
					"        \"lname\": {\"type\": \"string\", \"max_length\": 35},\n",
					"        \"fname\": {\"type\": \"string\", \"max_length\": 35},\n",
					"        \"dob\": {\"type\": \"string\", \"max_length\": 10},\n",
					"        \"flags\": {\"type\": \"string\", \"max_length\": is 2},\n",
					"        \"address\": {\"type\": \"string\", \"max_length\": 35},\n",
					"        \"address2\": {\"type\": \"string\", \"max_length\": 35},\n",
					"        \"address3\": {\"type\": \"string\", \"max_length\": 35},\n",
					"        \"address4\": {\"type\": \"string\", \"max_length\": 35},\n",
					"        \"address5\": {\"type\": \"string\", \"max_length\": 35},\n",
					"        \"address6\": {\"type\": \"string\", \"max_length\": 35},\n",
					"        \"zip\": {\"type\": \"string\", \"max_length\": 8},\n",
					"        \"date_selected1\": {\"type\": \"timestamp\"},\n",
					"        \"date_selected2\": {\"type\": \"timestamp\"},\n",
					"        \"date_selected3\": {\"type\": \"timestamp\"},\n",
					"        \"rec_num\": {\"type\": \"int\", \"max_value\": 999999999},\n",
					"        \"perm_disqual\": {\"type\": \"string\", \"max_length\": 1},\n",
					"        \"source_id\": {\"type\": \"string\", \"max_length\": 10},\n",
					"        \"postcode_start\": {\"type\": \"string\", \"max_length\": 4},\n",
					"        \"hash_id\": {\"type\": \"string\", \"max_length\": 64},\n",
					"        \"creation_date\": {\"type\": \"string\", \"max_length\": 8}\n",
					"    }\n",
					"\n",
					"def apply_column_constraints(df, constraints):\n",
					"    \"\"\"\n",
					"    Apply column constraints to DataFrame to match PostgreSQL requirements.\n",
					"    \n",
					"    Args:\n",
					"        df: Input DataFrame\n",
					"        constraints: Dictionary of column constraints\n",
					"        \n",
					"    Returns:\n",
					"        DataFrame with constraints applied\n",
					"    \"\"\"\n",
					"    # Loop through each column in the constraints\n",
					"    for column_name, constraint in constraints.items():\n",
					"        # Skip if column doesn't exist in DataFrame\n",
					"        if column_name not in df.columns:\n",
					"            print(f\"Warning: Column '{column_name}' not in DataFrame, skipping constraints\")\n",
					"            continue\n",
					"            \n",
					"        # Apply constraints based on type\n",
					"        if constraint[\"type\"] == \"string\" and \"max_length\" in constraint:\n",
					"            max_len = constraint[\"max_length\"]\n",
					"            # For string columns, truncate and clean\n",
					"            df = df.withColumn(\n",
					"                column_name,\n",
					"                when(\n",
					"                    col(column_name).isNotNull() & (length(trim(col(column_name))) > max_len),\n",
					"                    # Truncate to max length\n",
					"                    substring(trim(col(column_name)), 1, max_len)\n",
					"                ).otherwise(\n",
					"                    col(column_name)\n",
					"                )\n",
					"            )\n",
					"            \n",
					"            # Also apply UPPER case where appropriate\n",
					"            if column_name in [\"lname\", \"fname\", \"address\", \"zip\", \"postcode_start\"]:\n",
					"                df = df.withColumn(\n",
					"                    column_name,\n",
					"                    when(col(column_name).isNotNull(), \n",
					"                         upper(trim(regexp_replace(col(column_name), \"\\\\s+\", \" \")))\n",
					"                    ).otherwise(col(column_name))\n",
					"                )\n",
					"                \n",
					"        elif constraint[\"type\"] == \"int\" and \"max_value\" in constraint:\n",
					"            max_val = constraint[\"max_value\"]\n",
					"            # For integer columns, cap at max value\n",
					"            df = df.withColumn(\n",
					"                column_name,\n",
					"                when(\n",
					"                    col(column_name).isNotNull() & (col(column_name).cast(\"int\") > max_val),\n",
					"                    lit(max_val)\n",
					"                ).otherwise(\n",
					"                    col(column_name)\n",
					"                )\n",
					"            )\n",
					"    \n",
					"    return df\n",
					"\n",
					"def handle_required_columns(df):\n",
					"    \"\"\"\n",
					"    Ensure required columns exist with NULL values if missing.\n",
					"    \"\"\"\n",
					"    # List of required columns with their types\n",
					"    required_columns = {\n",
					"        \"part_no\": StringType(),\n",
					"        \"date_selected1\": TimestampType(),\n",
					"        \"date_selected2\": TimestampType(),\n",
					"        \"date_selected3\": TimestampType(),\n",
					"    }\n",
					"    \n",
					"    # Add each required column if missing\n",
					"    for column_name, dtype in required_columns.items():\n",
					"        if column_name not in df.columns:\n",
					"            df = df.withColumn(column_name, lit(None).cast(dtype))\n",
					"    \n",
					"    return df\n",
					"\n",
					"def ensure_correct_datatypes(df):\n",
					"    \"\"\"\n",
					"    Ensure all columns have the correct data types according to PostgreSQL schema.\n",
					"    \"\"\"\n",
					"    # Define expected data types\n",
					"    column_types = {\n",
					"        \"part_no\": StringType(),\n",
					"        \"register_lett\": IntegerType(),\n",
					"        \"poll_number\": IntegerType(),\n",
					"        \"new_marker\": StringType(),\n",
					"        \"title\": StringType(),\n",
					"        \"lname\": StringType(),\n",
					"        \"fname\": StringType(),\n",
					"        \"dob\": StringType(),\n",
					"        \"flags\": StringType(),\n",
					"        \"address\": StringType(),\n",
					"        \"address2\": StringType(),\n",
					"        \"address3\": StringType(),\n",
					"        \"address4\": StringType(),\n",
					"        \"address5\": StringType(),\n",
					"        \"address6\": StringType(),\n",
					"        \"zip\": StringType(),\n",
					"        \"date_selected1\": TimestampType(),\n",
					"        \"date_selected2\": TimestampType(),\n",
					"        \"date_selected3\": TimestampType(),\n",
					"        \"rec_num\": IntegerType(),\n",
					"        \"perm_disqual\": StringType(),\n",
					"        \"source_id\": StringType(),\n",
					"        \"postcode_start\": StringType(),\n",
					"        \"hash_id\": StringType(),\n",
					"        \"creation_date\": StringType()\n",
					"    }\n",
					"    \n",
					"    # Cast each column to expected type\n",
					"    for column_name, data_type in column_types.items():\n",
					"        if column_name in df.columns:\n",
					"            df = df.withColumn(column_name, col(column_name).cast(data_type))\n",
					"    \n",
					"    return df\n",
					"\n",
					"# Function to apply all constraints to a DataFrame in one go\n",
					"def validate_and_transform_all_columns(df):\n",
					"    \"\"\"\n",
					"    Apply all validation, constraints, and transformations to prepare data for PostgreSQL.\n",
					"    \"\"\"\n",
					"    # 1. Apply column length constraints\n",
					"    constraints = define_column_constraints()\n",
					"    df = apply_column_constraints(df, constraints)\n",
					"    \n",
					"    # 2. Ensure required columns exist\n",
					"    df = handle_required_columns(df)\n",
					"    \n",
					"    # 3. Ensure correct data types \n",
					"    df = ensure_correct_datatypes(df)\n",
					"    \n",
					"    # 4. Final check for required columns with NULL values\n",
					"    required_columns = [\"part_no\", \"date_selected1\", \"date_selected2\", \"date_selected3\"]\n",
					"    for col_name in required_columns:\n",
					"        if col_name not in df.columns:\n",
					"            print(f\"Warning: Required column {col_name} still missing after all transformations\")\n",
					"    \n",
					"    return df\n",
					"\n",
					"# How to incorporate this into your main ETL pipeline:\n",
					"\"\"\"\n",
					"# In your main.py or L2 notebook:\n",
					"\n",
					"# 1. Import the functions\n",
					"from column_constraints import validate_and_transform_all_columns\n",
					"\n",
					"# 2. After your transform_to_target_schema function call:\n",
					"transformed_data = transform_to_target_schema(deduplicated_data, column_mapping)\n",
					"\n",
					"# 3. Apply all validations and constraints\n",
					"transformed_data = validate_and_transform_all_columns(transformed_data)\n",
					"\n",
					"# Now continue with the rest of your pipeline\n",
					"\"\"\""
				],
				"execution_count": null
			}
		]
	}
}