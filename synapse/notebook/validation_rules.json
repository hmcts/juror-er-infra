{
	"name": "validation_rules",
	"properties": {
		"folder": {
			"name": "Configuration"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkstg",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fe0561ee-5803-4684-b47b-90ff605ed4c0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/baubais-data-factory-rg-stg/providers/Microsoft.Synapse/workspaces/baubais-synapse-stg/bigDataPools/sparkstg",
				"name": "sparkstg",
				"type": "Spark",
				"endpoint": "https://baubais-synapse-stg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkstg",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# validation_rules\n",
					"\"\"\"\n",
					"Configuration file for data validation rules and transformations.\n",
					"This separates the validation logic from the main ETL pipeline.\n",
					"\"\"\"\n",
					"\n",
					"# Postcode validation settings\n",
					"POSTCODE_SETTINGS = {\n",
					"    # Columns that might contain postcodes\n",
					"    \"possible_columns\": [\"PostCode\", \"zip\"],\n",
					"    \n",
					"    # UK Postcode validation pattern\n",
					"    \"validation_pattern\": r'^[A-Z]{1,2}[0-9][A-Z0-9]? [0-9][A-Z]{2}$',\n",
					"    \n",
					"    # Extraction pattern to standardize format\n",
					"    \"extraction_pattern\": r'([A-Z0-9]{1,4})[ -]*([0-9][A-Z]{2})',\n",
					"    \n",
					"    # Format string for standardized output\n",
					"    \"format_template\": '$1 $2',\n",
					"    \n",
					"    # Pattern to extract the postcode_start (outward code)\n",
					"    \"postcode_start_pattern\": r'^([A-Z]{1,2}[0-9][A-Z0-9]?)',\n",
					"    \n",
					"    # Whether to remove rows with invalid postcodes\n",
					"    \"remove_invalid\": True\n",
					"}\n",
					"\n",
					"# Columns that should explicitly be set to NULL\n",
					"NULL_COLUMNS = [\n",
					"    'part_no',\n",
					"    'date_selected1', \n",
					"    'date_selected2', \n",
					"    'date_selected3'\n",
					"]\n",
					"\n",
					"# Column mappings from source to target\n",
					"COLUMN_MAPPINGS = {\n",
					"    \"Elector Number\": \"register_lett\",  # Also maps to poll_number\n",
					"    \"Elector Markers\": \"new_marker\",\n",
					"    \"Elector Title\": \"title\",\n",
					"    \"Elector Surname\": \"lname\",\n",
					"    \"Elector Forename\": \"fname\",\n",
					"    \"Elector DOB\": \"dob\",\n",
					"    \"Flags/Markers\": \"flags\",\n",
					"    \"Address1\": \"address\",\n",
					"    \"Address2\": \"address2\",\n",
					"    \"Address3\": \"address3\",\n",
					"    \"Address4\": \"address4\",\n",
					"    \"Address5\": \"address5\",\n",
					"    \"Address6\": \"address6\",\n",
					"    \"PostCode\": \"zip\",\n",
					"    \"CreationDate\": \"creation_date\"\n",
					"}\n",
					"\n",
					"# Target schema definition\n",
					"TARGET_SCHEMA = [\n",
					"    {\"name\": \"part_no\", \"type\": \"string\", \"nullable\": True},\n",
					"    {\"name\": \"register_lett\", \"type\": \"integer\", \"nullable\": True},\n",
					"    {\"name\": \"poll_number\", \"type\": \"integer\", \"nullable\": True},\n",
					"    {\"name\": \"new_marker\", \"type\": \"string\", \"nullable\": True},\n",
					"    {\"name\": \"title\", \"type\": \"string\", \"nullable\": True, \"max_length\": 10},\n",
					"    {\"name\": \"lname\", \"type\": \"string\", \"nullable\": True, \"max_length\": 35},\n",
					"    {\"name\": \"fname\", \"type\": \"string\", \"nullable\": True, \"max_length\": 35},\n",
					"    {\"name\": \"dob\", \"type\": \"string\", \"nullable\": True},\n",
					"    {\"name\": \"flags\", \"type\": \"string\", \"nullable\": True},\n",
					"    {\"name\": \"address\", \"type\": \"string\", \"nullable\": True, \"max_length\": 35},\n",
					"    {\"name\": \"address2\", \"type\": \"string\", \"nullable\": True, \"max_length\": 35},\n",
					"    {\"name\": \"address3\", \"type\": \"string\", \"nullable\": True, \"max_length\": 35},\n",
					"    {\"name\": \"address4\", \"type\": \"string\", \"nullable\": True, \"max_length\": 35},\n",
					"    {\"name\": \"address5\", \"type\": \"string\", \"nullable\": True, \"max_length\": 35},\n",
					"    {\"name\": \"address6\", \"type\": \"string\", \"nullable\": True, \"max_length\": 35},\n",
					"    {\"name\": \"zip\", \"type\": \"string\", \"nullable\": True, \"max_length\": 10},\n",
					"    {\"name\": \"date_selected1\", \"type\": \"timestamp\", \"nullable\": True},\n",
					"    {\"name\": \"date_selected2\", \"type\": \"timestamp\", \"nullable\": True},\n",
					"    {\"name\": \"date_selected3\", \"type\": \"timestamp\", \"nullable\": True},\n",
					"    {\"name\": \"rec_num\", \"type\": \"integer\", \"nullable\": True},\n",
					"    {\"name\": \"perm_disqual\", \"type\": \"string\", \"nullable\": True},\n",
					"    {\"name\": \"source_id\", \"type\": \"string\", \"nullable\": True},\n",
					"    {\"name\": \"postcode_start\", \"type\": \"string\", \"nullable\": True, \"max_length\": 4},\n",
					"    {\"name\": \"hash_id\", \"type\": \"string\", \"nullable\": True},\n",
					"    {\"name\": \"creation_date\", \"type\": \"string\", \"nullable\": True}\n",
					"]"
				],
				"execution_count": null
			}
		]
	}
}