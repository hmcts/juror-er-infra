{
	"name": "DataQuality_Checks_postgresql",
	"properties": {
		"content": {
			"query": "--check empty lname and fname if empty count empty rows with lname and fname\n\nSELECT count(*)\n FROM [dbo].[er_juror_postgresql];\n\nSELECT \nsum ( case when fname is null then 1 else 0 end ) fname_empty_cnt,\nsum ( case when lname is null then 1 else 0 end ) lname_empty_cnt\n FROM [dbo].[er_juror_postgresql]\n;\n\nselect *\nfrom [dbo].[er_juror_postgresql]\nwhere fname is null;\n\nSelect rec_num, count(*)\nFROM [dbo].[er_juror_postgresql]\ngroup by rec_num\norder by rec_num asc;\nselect * \nFROM [dbo].[er_juror_postgresql]\n\nwhere address4 is null;\n\nSelect new_marker, count(*)\nFROM [dbo].[er_juror_postgresql]\ngroup by new_marker\norder by new_marker asc;\n\nSELECT count(*)\n FROM [dbo].[er_juror_postgresql]\nwhere fname is null and lname is null;\n\n--check if adderesses and zip are empty cout empty rows\nSELECT \nsum ( case when address is null then 1 else 0 end ) add1_empty_cnt,\nsum ( case when address2 is null then 1 else 0 end ) add2_empty_cnt,--can be empty\nsum ( case when address3 is null then 1 else 0 end ) add3_empty_cnt,--can be empty\nsum ( case when address4 is null then 1 else 0 end ) add4_empty_cnt,--can't be empty\nsum ( case when address6 is null then 1 else 0 end ) add6_empty_cnt,--has to b e empty\nsum ( case when zip is null then 1 else 0 end ) zip_empty_cnt\nFROM [dbo].[er_juror_postgresql]\n \n;\n\nselect top(10) *\nfrom [dbo].[er_juror_postgresql];\n--address4 is null;\n\nselect flags, count(*)\nfrom [dbo].[er_juror_postgresql]\ngroup by flags;\n\nSELECT hash_id, count(*)\n FROM [dbo].[er_juror_postgresql]\nwhere address4 is null \ngroup by hash_id\nhaving count(*)>1;\n\n--Binary Issuer Problem: \nSELECT\n    MAX(LEN([part_no])) AS max_part_no_len,\n    MAX(LEN([register_lett])) AS max_register_lett_len,\n    MAX(LEN([new_marker])) AS max_new_marker_len,\n    MAX(LEN([title])) AS max_title_len,\n    MAX(LEN([lname])) AS max_lname_len,\n    MAX(LEN([fname])) AS max_fname_len,\n    MAX(LEN([dob])) AS max_dob_len,\n    MAX(LEN([flags])) AS max_flags_len,\n    MAX(LEN([address])) AS max_address_len,\n    MAX(LEN([address2])) AS max_address2_len,\n    MAX(LEN([address3])) AS max_address3_len,\n    MAX(LEN([address4])) AS max_address4_len,\n    MAX(LEN([address5])) AS max_address5_len,\n    MAX(LEN([address6])) AS max_address6_len,\n    MAX(LEN([zip])) AS max_zip_len,\n    MAX(LEN([perm_disqual])) AS max_perm_disqual_len,\n    MAX(LEN([source_id])) AS max_source_id_len,\n    MAX(LEN([postcode_start])) AS max_postcode_start_len,\n    MAX(LEN([hash_id])) AS max_hash_id_len,\n    MAX(LEN([creation_date])) AS max_creation_date_len\nFROM [dbo].[er_juror_postgresql]",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "baubais_synapse_sql_prod",
				"poolName": "baubais_synapse_sql_prod"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}